/*
 * StopWatch.c
 *
 *  Created on: Sep 16, 2022
 *      Author: TASNEEM
 */

#include <avr/io.h>
#include <avr/interrupt.h>
#include<avr/delay.h>


/* global variable contain the 7-seg count value */
unsigned char g_SEC1 = 0;
unsigned char g_SEC2 = 0;
unsigned char g_MIN1 = 0;
unsigned char g_MIN2 = 0;
unsigned char g_HOUR1 = 0;
unsigned char g_HOUR2 = 0;

unsigned int tick =0;
unsigned char g_Interrupt_Flag = 0;

void Timer1_CTC_MODE_Init(void);
void INT2_Init(void);
void INT1_Init(void);
void INT0_Init(void);



/* External INT2 Interrupt Service Routine */
ISR(INT0_vect)
{
	g_SEC1 = 0;
	g_SEC2 = 0;
	g_MIN1 = 0;
	g_MIN2 = 0;
	g_HOUR1 = 0;
	g_HOUR2 = 0;
}

/* External INT2 Interrupt Service Routine */
ISR(INT1_vect)
{
	//Clear bits CS12, CS11 and CS10 to stop the timer (No Clock Source)
	TCCR1B &= ~(1<<CS12) & ~(1<<CS11) & ~(1<<CS10);
}

/* External INT2 Interrupt Service Routine */
ISR(INT2_vect)
{
	//Enable Clock Source again at prescaler 1024
	//Set Bits CS12, CS10
	TCCR1B |= (1<<CS12) | (1<<CS10);

}

ISR(TIMER1_COMPA_vect)
{
	// set the interrupt flag to indicate that INT occurs
	g_Interrupt_Flag = 1;
}




int main (void)
{
	unsigned short i ;
	DDRC |= 0x0F; 						// use first 4 pins of C as output to MCU (into decoder)
	PORTC &= 0xF0;						// 7-segment display zero at the beginning.

	DDRA |= 0x3F;						// use first 6-pins in PORTA as output for enabling or disabling the 6 7-Segments

	Timer1_CTC_MODE_Init();



	INT0_Init();						// Enable external INT0
	INT1_Init();						// Enable external INT1
	INT2_Init();						// Enable external INT2


	while(1)
	{
		if(g_Interrupt_Flag == 1){

			if(g_SEC1 < 9)
			{
				g_SEC1++;
			}
			else
			{
				g_SEC1 = 0;
				if(g_SEC2 < 5)
				{
					g_SEC2++;
				}
				else
				{
					g_SEC2=0;
					if(g_MIN1 < 9)
					{
						g_MIN1++;
					}
					else
					{
						g_MIN1 = 0;
						if(g_MIN2 < 5)
						{
							g_MIN2++;
						}
						else
						{
							g_MIN2 = 0;
							if(g_HOUR1 < 9)
							{
								g_HOUR1++;
							}
							else
							{
								g_HOUR1 = 0;
								if(g_HOUR2 < 9)
								{
									g_HOUR2++;
								}
								else
								{
									g_HOUR2 = 0;
								}
							}
				}
				}

				}
			}
			// reset the interrupt event flag
			g_Interrupt_Flag = 0;
		}

		for (i = 0; i < 6; ++i)
		{	//enable first 7-segment and increment it  and disable rest
			PORTA = (PORTA & 0xC0) | (1<<PA0);
			PORTC = (PORTC & 0xF0) | (g_SEC1 & 0x0F);
			_delay_us(0.01);
			PORTA = (PORTA & 0xC0) | (1<<PA1);
			PORTC = (PORTC & 0xF0) | (g_SEC2 & 0x0F);
			_delay_us(0.01);
			PORTA = (PORTA & 0xC0) | (1<<PA2);
			PORTC = (PORTC & 0xF0) | (g_MIN1 & 0x0F);
			_delay_us(0.01);
			PORTA = (PORTA & 0xC0) | (1<<PA3);
			PORTC = (PORTC & 0xF0) | (g_MIN2 & 0x0F);
			_delay_us(0.01);
			PORTA = (PORTA & 0xC0) | (1<<PA4);
			PORTC = (PORTC & 0xF0) | (g_HOUR1 & 0x0F);
			_delay_us(0.01);
			PORTA = (PORTA & 0xC0) | (1<<PA5);
			PORTC = (PORTC & 0xF0) | (g_HOUR2 & 0x0F);
			_delay_us(0.01);

		}




	}
}


void Timer1_CTC_MODE_Init(void)
{
	TCNT1 = 0;				//Initialize timer1 count to 0

	TCCR1A = (1 << FOC1A);
	TCCR1B = (1 << WGM12) | (1 << CS12 )| (1 << CS10); //pre-scalar 1024

	TIMSK = (1<<OCIE1A); 	// Enable Timer1 compare A interrupt
	SREG |= (1<<7);			// Enable interrupts by setting I-bit
	OCR1A = 976;			//each second as the one count cost 1 milli-sec so we need 1000 m-s

}

/* External INT0 enable and configuration function */
void INT0_Init(void)
{
	DDRD &= ~(1<<PD2);						// SPECFIY PD2 AS INPUT pin(INT0)PUSH BUTTONS
	SREG |= (1<<7);							// Enable interrupts by setting I-bit
	GICR |= (1<<INT0);						// Enable external interrupt pin INT0
	MCUCR |= (1<<ISC01);					// Trigger INT0 with the FALLING edge
	MCUCR &= ~(1<<ISC00);
}

/* External INT1 enable and configuration function */
void INT1_Init(void)
{
	DDRD &= ~(1<<PD3);						// SPECFIY PD3 AS INPUT pin(INT1)PUSH BUTTONS
	SREG |= (1<<7);							// Enable interrupts by setting I-bit
	GICR |= (1<<INT1);						// Enable external interrupt pin INT1
	MCUCR |= (1<<ISC11) | (1 << ISC10);		// Trigger INT1 with the RISING edge
}

/* External INT2 enable and configuration function */
void INT2_Init(void)
{
	DDRB &= ~(1<< PB2); 	// SPECFIY PB2 AS INPUT PIN (INT2)PUSH BUTTON
	SREG |= (1<<7);			// Enable interrupts by setting I-bit
	GICR |= (1<<INT2);		// Enable external interrupt pin INT2
	MCUCSR &= ~(1<<ISC2);	// Trigger INT2 with the FALLING edge
}





