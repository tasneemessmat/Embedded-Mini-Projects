
control_ecu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000022c8  0000235c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080007c  0080007c  00002378  2**0
                  ALLOC
  3 .stab         00002838  00000000  00000000  00002378  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013c9  00000000  00000000  00004bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000060b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006229  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a6c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 47 11 	jmp	0x228e	; 0x228e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 47 11 	jmp	0x228e	; 0x228e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "control_services.h"



int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	uint8 key;
	/* Initialize Module */
	CONTROL_init();
     b5a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <CONTROL_init>
	CONTROL_createPassword_changePassword();
     b5e:	0e 94 de 07 	call	0xfbc	; 0xfbc <CONTROL_createPassword_changePassword>


	while(1)
	{
		/*First Get key pressed from HMI ecu*/
		while(UART_recieveByte() != HMI_ECU_READY);
     b62:	0e 94 6f 10 	call	0x20de	; 0x20de <UART_recieveByte>
     b66:	84 30       	cpi	r24, 0x04	; 4
     b68:	e1 f7       	brne	.-8      	; 0xb62 <main+0x1c>
		UART_sendByte(CONTROL_ECU_READY);
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <UART_sendByte>
		key = UART_recieveByte();
     b70:	0e 94 6f 10 	call	0x20de	; 0x20de <UART_recieveByte>
     b74:	8f 87       	std	Y+15, r24	; 0x0f
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	aa e7       	ldi	r26, 0x7A	; 122
     b7c:	b4 e4       	ldi	r27, 0x44	; 68
     b7e:	8b 87       	std	Y+11, r24	; 0x0b
     b80:	9c 87       	std	Y+12, r25	; 0x0c
     b82:	ad 87       	std	Y+13, r26	; 0x0d
     b84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b86:	6b 85       	ldd	r22, Y+11	; 0x0b
     b88:	7c 85       	ldd	r23, Y+12	; 0x0c
     b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	4a ef       	ldi	r20, 0xFA	; 250
     b94:	54 e4       	ldi	r21, 0x44	; 68
     b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b9a:	dc 01       	movw	r26, r24
     b9c:	cb 01       	movw	r24, r22
     b9e:	8f 83       	std	Y+7, r24	; 0x07
     ba0:	98 87       	std	Y+8, r25	; 0x08
     ba2:	a9 87       	std	Y+9, r26	; 0x09
     ba4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba6:	6f 81       	ldd	r22, Y+7	; 0x07
     ba8:	78 85       	ldd	r23, Y+8	; 0x08
     baa:	89 85       	ldd	r24, Y+9	; 0x09
     bac:	9a 85       	ldd	r25, Y+10	; 0x0a
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e8       	ldi	r20, 0x80	; 128
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bba:	88 23       	and	r24, r24
     bbc:	2c f4       	brge	.+10     	; 0xbc8 <main+0x82>
		__ticks = 1;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	9e 83       	std	Y+6, r25	; 0x06
     bc4:	8d 83       	std	Y+5, r24	; 0x05
     bc6:	3f c0       	rjmp	.+126    	; 0xc46 <main+0x100>
	else if (__tmp > 65535)
     bc8:	6f 81       	ldd	r22, Y+7	; 0x07
     bca:	78 85       	ldd	r23, Y+8	; 0x08
     bcc:	89 85       	ldd	r24, Y+9	; 0x09
     bce:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	3f ef       	ldi	r19, 0xFF	; 255
     bd4:	4f e7       	ldi	r20, 0x7F	; 127
     bd6:	57 e4       	ldi	r21, 0x47	; 71
     bd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bdc:	18 16       	cp	r1, r24
     bde:	4c f5       	brge	.+82     	; 0xc32 <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be0:	6b 85       	ldd	r22, Y+11	; 0x0b
     be2:	7c 85       	ldd	r23, Y+12	; 0x0c
     be4:	8d 85       	ldd	r24, Y+13	; 0x0d
     be6:	9e 85       	ldd	r25, Y+14	; 0x0e
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e2       	ldi	r20, 0x20	; 32
     bee:	51 e4       	ldi	r21, 0x41	; 65
     bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
     bf8:	bc 01       	movw	r22, r24
     bfa:	cd 01       	movw	r24, r26
     bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	9e 83       	std	Y+6, r25	; 0x06
     c06:	8d 83       	std	Y+5, r24	; 0x05
     c08:	0f c0       	rjmp	.+30     	; 0xc28 <main+0xe2>
     c0a:	88 ec       	ldi	r24, 0xC8	; 200
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	9c 83       	std	Y+4, r25	; 0x04
     c10:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	9c 81       	ldd	r25, Y+4	; 0x04
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <main+0xd0>
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1e:	8d 81       	ldd	r24, Y+5	; 0x05
     c20:	9e 81       	ldd	r25, Y+6	; 0x06
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	9e 83       	std	Y+6, r25	; 0x06
     c26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c28:	8d 81       	ldd	r24, Y+5	; 0x05
     c2a:	9e 81       	ldd	r25, Y+6	; 0x06
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	69 f7       	brne	.-38     	; 0xc0a <main+0xc4>
     c30:	14 c0       	rjmp	.+40     	; 0xc5a <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c32:	6f 81       	ldd	r22, Y+7	; 0x07
     c34:	78 85       	ldd	r23, Y+8	; 0x08
     c36:	89 85       	ldd	r24, Y+9	; 0x09
     c38:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9e 83       	std	Y+6, r25	; 0x06
     c44:	8d 83       	std	Y+5, r24	; 0x05
     c46:	8d 81       	ldd	r24, Y+5	; 0x05
     c48:	9e 81       	ldd	r25, Y+6	; 0x06
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <main+0x10c>
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);

		if (key == '+'){
     c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c5c:	8b 32       	cpi	r24, 0x2B	; 43
     c5e:	59 f5       	brne	.+86     	; 0xcb6 <main+0x170>
			/*Get password to check it with the one saved in memory*/
			CONTROL_receivePassword(password);
     c60:	82 e8       	ldi	r24, 0x82	; 130
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 02 07 	call	0xe04	; 0xe04 <CONTROL_receivePassword>
			PasswordStatus = CONTROL_checkPasswordinMemory(0x0311, password);
     c68:	22 e8       	ldi	r18, 0x82	; 130
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	81 e1       	ldi	r24, 0x11	; 17
     c6e:	93 e0       	ldi	r25, 0x03	; 3
     c70:	b9 01       	movw	r22, r18
     c72:	0e 94 1e 08 	call	0x103c	; 0x103c <CONTROL_checkPasswordinMemory>
     c76:	80 93 88 00 	sts	0x0088, r24
			CONTROL_sendResponse(PasswordStatus);
     c7a:	80 91 88 00 	lds	r24, 0x0088
     c7e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CONTROL_sendResponse>

			if (PasswordStatus == MATCHED_PASSWORDS){
     c82:	80 91 88 00 	lds	r24, 0x0088
     c86:	86 30       	cpi	r24, 0x06	; 6
     c88:	19 f4       	brne	.+6      	; 0xc90 <main+0x14a>
				/*Now Open the door*/
				CONTROL_openDoor();
     c8a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CONTROL_openDoor>
     c8e:	69 cf       	rjmp	.-302    	; 0xb62 <main+0x1c>
			}
			else if (PasswordStatus == UNMATCHED_PASSWORDS){
     c90:	80 91 88 00 	lds	r24, 0x0088
     c94:	85 30       	cpi	r24, 0x05	; 5
     c96:	09 f0       	breq	.+2      	; 0xc9a <main+0x154>
     c98:	64 cf       	rjmp	.-312    	; 0xb62 <main+0x1c>

				PasswordStatus = CONTROL_handlingUnmatchedPasswords();
     c9a:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CONTROL_handlingUnmatchedPasswords>
     c9e:	80 93 88 00 	sts	0x0088, r24


				if(PasswordStatus == MATCHED_PASSWORDS){
     ca2:	80 91 88 00 	lds	r24, 0x0088
     ca6:	86 30       	cpi	r24, 0x06	; 6
     ca8:	19 f4       	brne	.+6      	; 0xcb0 <main+0x16a>
					CONTROL_openDoor();
     caa:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CONTROL_openDoor>
     cae:	59 cf       	rjmp	.-334    	; 0xb62 <main+0x1c>
				}
				else{
					CONTROL_lock();
     cb0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <CONTROL_lock>
     cb4:	56 cf       	rjmp	.-340    	; 0xb62 <main+0x1c>
				}
			}
		}
		else if(key == '-')
     cb6:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb8:	8d 32       	cpi	r24, 0x2D	; 45
     cba:	09 f0       	breq	.+2      	; 0xcbe <main+0x178>
     cbc:	52 cf       	rjmp	.-348    	; 0xb62 <main+0x1c>
		{
			/*Get password to check it with the one saved in memory*/
			CONTROL_receivePassword(password);
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 02 07 	call	0xe04	; 0xe04 <CONTROL_receivePassword>
			CONTROL_checkPasswordinMemory(0x311, password);
     cc6:	22 e8       	ldi	r18, 0x82	; 130
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e1       	ldi	r24, 0x11	; 17
     ccc:	93 e0       	ldi	r25, 0x03	; 3
     cce:	b9 01       	movw	r22, r18
     cd0:	0e 94 1e 08 	call	0x103c	; 0x103c <CONTROL_checkPasswordinMemory>
			CONTROL_sendResponse(PasswordStatus);
     cd4:	80 91 88 00 	lds	r24, 0x0088
     cd8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CONTROL_sendResponse>

			if(PasswordStatus == MATCHED_PASSWORDS){
     cdc:	80 91 88 00 	lds	r24, 0x0088
     ce0:	86 30       	cpi	r24, 0x06	; 6
     ce2:	19 f4       	brne	.+6      	; 0xcea <main+0x1a4>
				CONTROL_createPassword_changePassword();
     ce4:	0e 94 de 07 	call	0xfbc	; 0xfbc <CONTROL_createPassword_changePassword>
     ce8:	3c cf       	rjmp	.-392    	; 0xb62 <main+0x1c>
			}
			else if(PasswordStatus == UNMATCHED_PASSWORDS){
     cea:	80 91 88 00 	lds	r24, 0x0088
     cee:	85 30       	cpi	r24, 0x05	; 5
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <main+0x1ae>
     cf2:	37 cf       	rjmp	.-402    	; 0xb62 <main+0x1c>
				PasswordStatus = CONTROL_handlingUnmatchedPasswords();
     cf4:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CONTROL_handlingUnmatchedPasswords>
     cf8:	80 93 88 00 	sts	0x0088, r24

				if(PasswordStatus == MATCHED_PASSWORDS){
     cfc:	80 91 88 00 	lds	r24, 0x0088
     d00:	86 30       	cpi	r24, 0x06	; 6
     d02:	19 f4       	brne	.+6      	; 0xd0a <main+0x1c4>
					CONTROL_createPassword_changePassword();
     d04:	0e 94 de 07 	call	0xfbc	; 0xfbc <CONTROL_createPassword_changePassword>
     d08:	2c cf       	rjmp	.-424    	; 0xb62 <main+0x1c>
				}
				else if(PasswordStatus == UNMATCHED_PASSWORDS) {
     d0a:	80 91 88 00 	lds	r24, 0x0088
     d0e:	85 30       	cpi	r24, 0x05	; 5
     d10:	09 f0       	breq	.+2      	; 0xd14 <main+0x1ce>
     d12:	27 cf       	rjmp	.-434    	; 0xb62 <main+0x1c>
					CONTROL_lock();
     d14:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <CONTROL_lock>
     d18:	24 cf       	rjmp	.-440    	; 0xb62 <main+0x1c>

00000d1a <Buzzer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Buzzer_init()
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	/*Setup the direction for the buzzer pin as output pin through the GPIO driver.*/
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	41 e0       	ldi	r20, 0x01	; 1
     d28:	0e 94 33 0b 	call	0x1666	; 0x1666 <GPIO_setupPinDirection>

	/*Turn off the buzzer through the GPIO.*/
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	40 e0       	ldi	r20, 0x00	; 0
     d32:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_writePin>
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <Buzzer_on>:
void Buzzer_on(void)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_writePin>
}
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <Buzzer_off>:
void Buzzer_off(void){
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	41 e0       	ldi	r20, 0x01	; 1
     d62:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_writePin>
}
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <CONTROL_init>:
uint8 password [6];
uint8 ConfirmPassword [6];
uint8 PasswordStatus;

void CONTROL_init(void)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	2e 97       	sbiw	r28, 0x0e	; 14
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
	/* Initialize The UART */
	Uart_ConfigType UARTConfig = {9600, Disabled, OneBit, EightBits};
     d80:	ce 01       	movw	r24, r28
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	9b 87       	std	Y+11, r25	; 0x0b
     d86:	8a 87       	std	Y+10, r24	; 0x0a
     d88:	e8 e6       	ldi	r30, 0x68	; 104
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	fd 87       	std	Y+13, r31	; 0x0d
     d8e:	ec 87       	std	Y+12, r30	; 0x0c
     d90:	f7 e0       	ldi	r31, 0x07	; 7
     d92:	fe 87       	std	Y+14, r31	; 0x0e
     d94:	ec 85       	ldd	r30, Y+12	; 0x0c
     d96:	fd 85       	ldd	r31, Y+13	; 0x0d
     d98:	00 80       	ld	r0, Z
     d9a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d9c:	9d 85       	ldd	r25, Y+13	; 0x0d
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	9d 87       	std	Y+13, r25	; 0x0d
     da2:	8c 87       	std	Y+12, r24	; 0x0c
     da4:	ea 85       	ldd	r30, Y+10	; 0x0a
     da6:	fb 85       	ldd	r31, Y+11	; 0x0b
     da8:	00 82       	st	Z, r0
     daa:	8a 85       	ldd	r24, Y+10	; 0x0a
     dac:	9b 85       	ldd	r25, Y+11	; 0x0b
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	9b 87       	std	Y+11, r25	; 0x0b
     db2:	8a 87       	std	Y+10, r24	; 0x0a
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	91 50       	subi	r25, 0x01	; 1
     db8:	9e 87       	std	Y+14, r25	; 0x0e
     dba:	ee 85       	ldd	r30, Y+14	; 0x0e
     dbc:	ee 23       	and	r30, r30
     dbe:	51 f7       	brne	.-44     	; 0xd94 <CONTROL_init+0x28>
	UART_init(&UARTConfig);
     dc0:	ce 01       	movw	r24, r28
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <UART_init>

	TWI_ConfigType TWIConfig = {0x01,2};
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	88 87       	std	Y+8, r24	; 0x08
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	89 87       	std	Y+9, r24	; 0x09
	/* Initialize the TWI/I2C Driver */
	TWI_init(&TWIConfig);
     dd0:	ce 01       	movw	r24, r28
     dd2:	08 96       	adiw	r24, 0x08	; 8
     dd4:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <TWI_init>

	DcMotor_Init();
     dd8:	0e 94 25 0a 	call	0x144a	; 0x144a <DcMotor_Init>
	SREG |= (1<<7);
     ddc:	af e5       	ldi	r26, 0x5F	; 95
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ef e5       	ldi	r30, 0x5F	; 95
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	80 68       	ori	r24, 0x80	; 128
     de8:	8c 93       	st	X, r24
	Timer1_setCallBack(CONTROL_timer1);
     dea:	83 e6       	ldi	r24, 0x63	; 99
     dec:	99 e0       	ldi	r25, 0x09	; 9
     dee:	0e 94 57 0f 	call	0x1eae	; 0x1eae <Timer1_setCallBack>




}
     df2:	2e 96       	adiw	r28, 0x0e	; 14
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <CONTROL_receivePassword>:
void CONTROL_receivePassword(uint8 * password){
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <CONTROL_receivePassword+0xa>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <CONTROL_receivePassword+0xc>
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	9c 83       	std	Y+4, r25	; 0x04
     e16:	8b 83       	std	Y+3, r24	; 0x03
	for(int i =0 ; i< 5 ; i++)
     e18:	1a 82       	std	Y+2, r1	; 0x02
     e1a:	19 82       	std	Y+1, r1	; 0x01
     e1c:	17 c0       	rjmp	.+46     	; 0xe4c <CONTROL_receivePassword+0x48>
	{
		while(UART_recieveByte() != HMI_ECU_READY){}
     e1e:	0e 94 6f 10 	call	0x20de	; 0x20de <UART_recieveByte>
     e22:	84 30       	cpi	r24, 0x04	; 4
     e24:	e1 f7       	brne	.-8      	; 0xe1e <CONTROL_receivePassword+0x1a>

		/* Now send that i'm ready to receive any passwords! */
		UART_sendByte(CONTROL_ECU_READY);
     e26:	83 e0       	ldi	r24, 0x03	; 3
     e28:	0e 94 58 10 	call	0x20b0	; 0x20b0 <UART_sendByte>
		password[i] = UART_recieveByte();
     e2c:	29 81       	ldd	r18, Y+1	; 0x01
     e2e:	3a 81       	ldd	r19, Y+2	; 0x02
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	8c 01       	movw	r16, r24
     e36:	02 0f       	add	r16, r18
     e38:	13 1f       	adc	r17, r19
     e3a:	0e 94 6f 10 	call	0x20de	; 0x20de <UART_recieveByte>
     e3e:	f8 01       	movw	r30, r16
     e40:	80 83       	st	Z, r24



}
void CONTROL_receivePassword(uint8 * password){
	for(int i =0 ; i< 5 ; i++)
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	9a 83       	std	Y+2, r25	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	9a 81       	ldd	r25, Y+2	; 0x02
     e50:	85 30       	cpi	r24, 0x05	; 5
     e52:	91 05       	cpc	r25, r1
     e54:	24 f3       	brlt	.-56     	; 0xe1e <CONTROL_receivePassword+0x1a>

		/* Now send that i'm ready to receive any passwords! */
		UART_sendByte(CONTROL_ECU_READY);
		password[i] = UART_recieveByte();
	}
}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	08 95       	ret

00000e68 <CONTROL_savePasswordsEEPROM>:

void CONTROL_savePasswordsEEPROM(uint16 address,uint8 * password){
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	64 97       	sbiw	r28, 0x14	; 20
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	9a 8b       	std	Y+18, r25	; 0x12
     e7e:	89 8b       	std	Y+17, r24	; 0x11
     e80:	7c 8b       	std	Y+20, r23	; 0x14
     e82:	6b 8b       	std	Y+19, r22	; 0x13
	int i;
	for(i =0 ; i < 5;i++ ){
     e84:	18 8a       	std	Y+16, r1	; 0x10
     e86:	1f 86       	std	Y+15, r1	; 0x0f
     e88:	8a c0       	rjmp	.+276    	; 0xf9e <CONTROL_savePasswordsEEPROM+0x136>
		EEPROM_writeByte(address+i, password[i]); /* Write every character in the external EEPROM - Any address */
     e8a:	2f 85       	ldd	r18, Y+15	; 0x0f
     e8c:	38 89       	ldd	r19, Y+16	; 0x10
     e8e:	89 89       	ldd	r24, Y+17	; 0x11
     e90:	9a 89       	ldd	r25, Y+18	; 0x12
     e92:	a9 01       	movw	r20, r18
     e94:	48 0f       	add	r20, r24
     e96:	59 1f       	adc	r21, r25
     e98:	2f 85       	ldd	r18, Y+15	; 0x0f
     e9a:	38 89       	ldd	r19, Y+16	; 0x10
     e9c:	8b 89       	ldd	r24, Y+19	; 0x13
     e9e:	9c 89       	ldd	r25, Y+20	; 0x14
     ea0:	fc 01       	movw	r30, r24
     ea2:	e2 0f       	add	r30, r18
     ea4:	f3 1f       	adc	r31, r19
     ea6:	20 81       	ld	r18, Z
     ea8:	ca 01       	movw	r24, r20
     eaa:	62 2f       	mov	r22, r18
     eac:	0e 94 92 0a 	call	0x1524	; 0x1524 <EEPROM_writeByte>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	a0 e2       	ldi	r26, 0x20	; 32
     eb6:	b1 e4       	ldi	r27, 0x41	; 65
     eb8:	8b 87       	std	Y+11, r24	; 0x0b
     eba:	9c 87       	std	Y+12, r25	; 0x0c
     ebc:	ad 87       	std	Y+13, r26	; 0x0d
     ebe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	4a ef       	ldi	r20, 0xFA	; 250
     ece:	54 e4       	ldi	r21, 0x44	; 68
     ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	8f 83       	std	Y+7, r24	; 0x07
     eda:	98 87       	std	Y+8, r25	; 0x08
     edc:	a9 87       	std	Y+9, r26	; 0x09
     ede:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ee0:	6f 81       	ldd	r22, Y+7	; 0x07
     ee2:	78 85       	ldd	r23, Y+8	; 0x08
     ee4:	89 85       	ldd	r24, Y+9	; 0x09
     ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e8       	ldi	r20, 0x80	; 128
     eee:	5f e3       	ldi	r21, 0x3F	; 63
     ef0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ef4:	88 23       	and	r24, r24
     ef6:	2c f4       	brge	.+10     	; 0xf02 <CONTROL_savePasswordsEEPROM+0x9a>
		__ticks = 1;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	9e 83       	std	Y+6, r25	; 0x06
     efe:	8d 83       	std	Y+5, r24	; 0x05
     f00:	3f c0       	rjmp	.+126    	; 0xf80 <CONTROL_savePasswordsEEPROM+0x118>
	else if (__tmp > 65535)
     f02:	6f 81       	ldd	r22, Y+7	; 0x07
     f04:	78 85       	ldd	r23, Y+8	; 0x08
     f06:	89 85       	ldd	r24, Y+9	; 0x09
     f08:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	3f ef       	ldi	r19, 0xFF	; 255
     f0e:	4f e7       	ldi	r20, 0x7F	; 127
     f10:	57 e4       	ldi	r21, 0x47	; 71
     f12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f16:	18 16       	cp	r1, r24
     f18:	4c f5       	brge	.+82     	; 0xf6c <CONTROL_savePasswordsEEPROM+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f20:	9e 85       	ldd	r25, Y+14	; 0x0e
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e2       	ldi	r20, 0x20	; 32
     f28:	51 e4       	ldi	r21, 0x41	; 65
     f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	bc 01       	movw	r22, r24
     f34:	cd 01       	movw	r24, r26
     f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	9e 83       	std	Y+6, r25	; 0x06
     f40:	8d 83       	std	Y+5, r24	; 0x05
     f42:	0f c0       	rjmp	.+30     	; 0xf62 <CONTROL_savePasswordsEEPROM+0xfa>
     f44:	88 ec       	ldi	r24, 0xC8	; 200
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	8b 83       	std	Y+3, r24	; 0x03
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <CONTROL_savePasswordsEEPROM+0xe8>
     f54:	9c 83       	std	Y+4, r25	; 0x04
     f56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	9e 83       	std	Y+6, r25	; 0x06
     f60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	69 f7       	brne	.-38     	; 0xf44 <CONTROL_savePasswordsEEPROM+0xdc>
     f6a:	14 c0       	rjmp	.+40     	; 0xf94 <CONTROL_savePasswordsEEPROM+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6c:	6f 81       	ldd	r22, Y+7	; 0x07
     f6e:	78 85       	ldd	r23, Y+8	; 0x08
     f70:	89 85       	ldd	r24, Y+9	; 0x09
     f72:	9a 85       	ldd	r25, Y+10	; 0x0a
     f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	9e 83       	std	Y+6, r25	; 0x06
     f7e:	8d 83       	std	Y+5, r24	; 0x05
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <CONTROL_savePasswordsEEPROM+0x124>
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	89 83       	std	Y+1, r24	; 0x01
	}
}

void CONTROL_savePasswordsEEPROM(uint16 address,uint8 * password){
	int i;
	for(i =0 ; i < 5;i++ ){
     f94:	8f 85       	ldd	r24, Y+15	; 0x0f
     f96:	98 89       	ldd	r25, Y+16	; 0x10
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	98 8b       	std	Y+16, r25	; 0x10
     f9c:	8f 87       	std	Y+15, r24	; 0x0f
     f9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa0:	98 89       	ldd	r25, Y+16	; 0x10
     fa2:	85 30       	cpi	r24, 0x05	; 5
     fa4:	91 05       	cpc	r25, r1
     fa6:	0c f4       	brge	.+2      	; 0xfaa <CONTROL_savePasswordsEEPROM+0x142>
     fa8:	70 cf       	rjmp	.-288    	; 0xe8a <CONTROL_savePasswordsEEPROM+0x22>
		EEPROM_writeByte(address+i, password[i]); /* Write every character in the external EEPROM - Any address */
		_delay_ms(10); /* Very Important Delay */
	}

}
     faa:	64 96       	adiw	r28, 0x14	; 20
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <CONTROL_createPassword_changePassword>:
/* Function for Creating password for the system or changing it*/
void CONTROL_createPassword_changePassword(void){
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	0f 92       	push	r0
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
	uint8 i=0;
     fc6:	19 82       	std	Y+1, r1	; 0x01
	/*First Loop Is responsible for Creating a Password for the system*/
	while(1){
		CONTROL_receivePassword(password);
     fc8:	82 e8       	ldi	r24, 0x82	; 130
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 02 07 	call	0xe04	; 0xe04 <CONTROL_receivePassword>
		CONTROL_receivePassword(ConfirmPassword);
     fd0:	89 e8       	ldi	r24, 0x89	; 137
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 02 07 	call	0xe04	; 0xe04 <CONTROL_receivePassword>

		/* Check if 2 passwords are identical*/
		for ( i =0; i < 5; i++){
     fd8:	19 82       	std	Y+1, r1	; 0x01
     fda:	1a c0       	rjmp	.+52     	; 0x1010 <CONTROL_createPassword_changePassword+0x54>
			if (password[i] != ConfirmPassword[i])
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	fc 01       	movw	r30, r24
     fe4:	ee 57       	subi	r30, 0x7E	; 126
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	20 81       	ld	r18, Z
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	fc 01       	movw	r30, r24
     ff2:	e7 57       	subi	r30, 0x77	; 119
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	80 81       	ld	r24, Z
     ff8:	28 17       	cp	r18, r24
     ffa:	21 f0       	breq	.+8      	; 0x1004 <CONTROL_createPassword_changePassword+0x48>
			{	PasswordStatus = UNMATCHED_PASSWORDS;
     ffc:	85 e0       	ldi	r24, 0x05	; 5
     ffe:	80 93 88 00 	sts	0x0088, r24
    1002:	09 c0       	rjmp	.+18     	; 0x1016 <CONTROL_createPassword_changePassword+0x5a>
			break;
			}
			else {
				PasswordStatus = MATCHED_PASSWORDS;
    1004:	86 e0       	ldi	r24, 0x06	; 6
    1006:	80 93 88 00 	sts	0x0088, r24
	while(1){
		CONTROL_receivePassword(password);
		CONTROL_receivePassword(ConfirmPassword);

		/* Check if 2 passwords are identical*/
		for ( i =0; i < 5; i++){
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	8f 5f       	subi	r24, 0xFF	; 255
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	85 30       	cpi	r24, 0x05	; 5
    1014:	18 f3       	brcs	.-58     	; 0xfdc <CONTROL_createPassword_changePassword+0x20>
			}
			else {
				PasswordStatus = MATCHED_PASSWORDS;
			}
		}
		CONTROL_sendResponse(PasswordStatus);
    1016:	80 91 88 00 	lds	r24, 0x0088
    101a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CONTROL_sendResponse>
		if(PasswordStatus == MATCHED_PASSWORDS){
    101e:	80 91 88 00 	lds	r24, 0x0088
    1022:	86 30       	cpi	r24, 0x06	; 6
    1024:	89 f6       	brne	.-94     	; 0xfc8 <CONTROL_createPassword_changePassword+0xc>
			CONTROL_savePasswordsEEPROM(0x0311, password);
    1026:	22 e8       	ldi	r18, 0x82	; 130
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e1       	ldi	r24, 0x11	; 17
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	b9 01       	movw	r22, r18
    1030:	0e 94 34 07 	call	0xe68	; 0xe68 <CONTROL_savePasswordsEEPROM>
		else if(PasswordStatus == UNMATCHED_PASSWORDS){
			/*Repeat same process*/
		}

	}
}
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <CONTROL_checkPasswordinMemory>:
uint8 CONTROL_checkPasswordinMemory(uint16 address, uint8 * password ){
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	27 97       	sbiw	r28, 0x07	; 7
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	9d 83       	std	Y+5, r25	; 0x05
    1052:	8c 83       	std	Y+4, r24	; 0x04
    1054:	7f 83       	std	Y+7, r23	; 0x07
    1056:	6e 83       	std	Y+6, r22	; 0x06
	uint8 status,i,x;

	for(i =0 ; i<5 ; i++){
    1058:	19 82       	std	Y+1, r1	; 0x01
    105a:	22 c0       	rjmp	.+68     	; 0x10a0 <CONTROL_checkPasswordinMemory+0x64>
		x=0;
    105c:	1b 82       	std	Y+3, r1	; 0x03
		EEPROM_readByte(address+i,&x);
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	9d 81       	ldd	r25, Y+5	; 0x05
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
    106c:	9e 01       	movw	r18, r28
    106e:	2d 5f       	subi	r18, 0xFD	; 253
    1070:	3f 4f       	sbci	r19, 0xFF	; 255
    1072:	b9 01       	movw	r22, r18
    1074:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <EEPROM_readByte>
		if (x == password[i]){
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	8e 81       	ldd	r24, Y+6	; 0x06
    1080:	9f 81       	ldd	r25, Y+7	; 0x07
    1082:	fc 01       	movw	r30, r24
    1084:	e2 0f       	add	r30, r18
    1086:	f3 1f       	adc	r31, r19
    1088:	90 81       	ld	r25, Z
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	98 17       	cp	r25, r24
    108e:	19 f4       	brne	.+6      	; 0x1096 <CONTROL_checkPasswordinMemory+0x5a>
			status = MATCHED_PASSWORDS;
    1090:	86 e0       	ldi	r24, 0x06	; 6
    1092:	8a 83       	std	Y+2, r24	; 0x02
    1094:	02 c0       	rjmp	.+4      	; 0x109a <CONTROL_checkPasswordinMemory+0x5e>
		}
		else{
			status = UNMATCHED_PASSWORDS;
    1096:	85 e0       	ldi	r24, 0x05	; 5
    1098:	8a 83       	std	Y+2, r24	; 0x02
	}
}
uint8 CONTROL_checkPasswordinMemory(uint16 address, uint8 * password ){
	uint8 status,i,x;

	for(i =0 ; i<5 ; i++){
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	85 30       	cpi	r24, 0x05	; 5
    10a4:	d8 f2       	brcs	.-74     	; 0x105c <CONTROL_checkPasswordinMemory+0x20>
		else{
			status = UNMATCHED_PASSWORDS;
		}

	}
	return status;
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    10a8:	27 96       	adiw	r28, 0x07	; 7
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <CONTROL_sendResponse>:

void CONTROL_sendResponse (uint8  PasswordStatus)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	0f 92       	push	r0
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
    UART_sendByte(CONTROL_ECU_READY);
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	0e 94 58 10 	call	0x20b0	; 0x20b0 <UART_sendByte>
    /* Now send if they are matching or not to the HMI ECU */
    /* First wait for him to be ready */
    while(UART_recieveByte() != HMI_ECU_READY){}
    10cc:	0e 94 6f 10 	call	0x20de	; 0x20de <UART_recieveByte>
    10d0:	84 30       	cpi	r24, 0x04	; 4
    10d2:	e1 f7       	brne	.-8      	; 0x10cc <CONTROL_sendResponse+0x12>

    UART_sendByte(PasswordStatus);
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	0e 94 58 10 	call	0x20b0	; 0x20b0 <UART_sendByte>
}
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <CONTROL_openDoor>:
void CONTROL_openDoor(void){
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	69 97       	sbiw	r28, 0x19	; 25
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
	 *                            Ttimer = 3000 * 0.001 = 3 seconds
	 *                          1- To make the door opening time is 15 second we need 5 overflow
	 *                          2- To make the door holding time is 1 overflow (5+1) seconds we need 6 overflow
	 *                          3- To make the door closing time is (5+1+5) seconds we need 11 overflow
	 * */
	Timer1_ConfigType TimerDoor= {0,3000,F_CPU_1024,CTCMode};
    10f6:	ce 01       	movw	r24, r28
    10f8:	0f 96       	adiw	r24, 0x0f	; 15
    10fa:	9e 8b       	std	Y+22, r25	; 0x16
    10fc:	8d 8b       	std	Y+21, r24	; 0x15
    10fe:	ef e6       	ldi	r30, 0x6F	; 111
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	f8 8f       	std	Y+24, r31	; 0x18
    1104:	ef 8b       	std	Y+23, r30	; 0x17
    1106:	f6 e0       	ldi	r31, 0x06	; 6
    1108:	f9 8f       	std	Y+25, r31	; 0x19
    110a:	ef 89       	ldd	r30, Y+23	; 0x17
    110c:	f8 8d       	ldd	r31, Y+24	; 0x18
    110e:	00 80       	ld	r0, Z
    1110:	8f 89       	ldd	r24, Y+23	; 0x17
    1112:	98 8d       	ldd	r25, Y+24	; 0x18
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	98 8f       	std	Y+24, r25	; 0x18
    1118:	8f 8b       	std	Y+23, r24	; 0x17
    111a:	ed 89       	ldd	r30, Y+21	; 0x15
    111c:	fe 89       	ldd	r31, Y+22	; 0x16
    111e:	00 82       	st	Z, r0
    1120:	8d 89       	ldd	r24, Y+21	; 0x15
    1122:	9e 89       	ldd	r25, Y+22	; 0x16
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	9e 8b       	std	Y+22, r25	; 0x16
    1128:	8d 8b       	std	Y+21, r24	; 0x15
    112a:	99 8d       	ldd	r25, Y+25	; 0x19
    112c:	91 50       	subi	r25, 0x01	; 1
    112e:	99 8f       	std	Y+25, r25	; 0x19
    1130:	e9 8d       	ldd	r30, Y+25	; 0x19
    1132:	ee 23       	and	r30, r30
    1134:	51 f7       	brne	.-44     	; 0x110a <CONTROL_openDoor+0x28>

	DcMotor_Rotate(Clockwise, 100);
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	64 e6       	ldi	r22, 0x64	; 100
    113a:	0e 94 40 0a 	call	0x1480	; 0x1480 <DcMotor_Rotate>
	g_tick =0;
    113e:	10 92 7c 00 	sts	0x007C, r1
    1142:	10 92 7d 00 	sts	0x007D, r1
    1146:	10 92 7e 00 	sts	0x007E, r1
    114a:	10 92 7f 00 	sts	0x007F, r1
	Timer1_init(&TimerDoor);
    114e:	ce 01       	movw	r24, r28
    1150:	0f 96       	adiw	r24, 0x0f	; 15
    1152:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <Timer1_init>


	while(g_tick < 5);
    1156:	80 91 7c 00 	lds	r24, 0x007C
    115a:	90 91 7d 00 	lds	r25, 0x007D
    115e:	a0 91 7e 00 	lds	r26, 0x007E
    1162:	b0 91 7f 00 	lds	r27, 0x007F
    1166:	85 30       	cpi	r24, 0x05	; 5
    1168:	91 05       	cpc	r25, r1
    116a:	a1 05       	cpc	r26, r1
    116c:	b1 05       	cpc	r27, r1
    116e:	98 f3       	brcs	.-26     	; 0x1156 <CONTROL_openDoor+0x74>

	DcMotor_Rotate(Stop, 0);
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	0e 94 40 0a 	call	0x1480	; 0x1480 <DcMotor_Rotate>

	while(g_tick < 6);
    1178:	80 91 7c 00 	lds	r24, 0x007C
    117c:	90 91 7d 00 	lds	r25, 0x007D
    1180:	a0 91 7e 00 	lds	r26, 0x007E
    1184:	b0 91 7f 00 	lds	r27, 0x007F
    1188:	86 30       	cpi	r24, 0x06	; 6
    118a:	91 05       	cpc	r25, r1
    118c:	a1 05       	cpc	r26, r1
    118e:	b1 05       	cpc	r27, r1
    1190:	98 f3       	brcs	.-26     	; 0x1178 <CONTROL_openDoor+0x96>

	DcMotor_Rotate(AntiClockwise, 100);
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	64 e6       	ldi	r22, 0x64	; 100
    1196:	0e 94 40 0a 	call	0x1480	; 0x1480 <DcMotor_Rotate>

	while(g_tick < 11);
    119a:	80 91 7c 00 	lds	r24, 0x007C
    119e:	90 91 7d 00 	lds	r25, 0x007D
    11a2:	a0 91 7e 00 	lds	r26, 0x007E
    11a6:	b0 91 7f 00 	lds	r27, 0x007F
    11aa:	8b 30       	cpi	r24, 0x0B	; 11
    11ac:	91 05       	cpc	r25, r1
    11ae:	a1 05       	cpc	r26, r1
    11b0:	b1 05       	cpc	r27, r1
    11b2:	98 f3       	brcs	.-26     	; 0x119a <CONTROL_openDoor+0xb8>
	DcMotor_Rotate(Stop, 0);
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	0e 94 40 0a 	call	0x1480	; 0x1480 <DcMotor_Rotate>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	aa e7       	ldi	r26, 0x7A	; 122
    11c2:	b4 e4       	ldi	r27, 0x44	; 68
    11c4:	8b 87       	std	Y+11, r24	; 0x0b
    11c6:	9c 87       	std	Y+12, r25	; 0x0c
    11c8:	ad 87       	std	Y+13, r26	; 0x0d
    11ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	4a ef       	ldi	r20, 0xFA	; 250
    11da:	54 e4       	ldi	r21, 0x44	; 68
    11dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	8f 83       	std	Y+7, r24	; 0x07
    11e6:	98 87       	std	Y+8, r25	; 0x08
    11e8:	a9 87       	std	Y+9, r26	; 0x09
    11ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ec:	6f 81       	ldd	r22, Y+7	; 0x07
    11ee:	78 85       	ldd	r23, Y+8	; 0x08
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e8       	ldi	r20, 0x80	; 128
    11fa:	5f e3       	ldi	r21, 0x3F	; 63
    11fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1200:	88 23       	and	r24, r24
    1202:	2c f4       	brge	.+10     	; 0x120e <CONTROL_openDoor+0x12c>
		__ticks = 1;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	3f c0       	rjmp	.+126    	; 0x128c <CONTROL_openDoor+0x1aa>
	else if (__tmp > 65535)
    120e:	6f 81       	ldd	r22, Y+7	; 0x07
    1210:	78 85       	ldd	r23, Y+8	; 0x08
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	9a 85       	ldd	r25, Y+10	; 0x0a
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	3f ef       	ldi	r19, 0xFF	; 255
    121a:	4f e7       	ldi	r20, 0x7F	; 127
    121c:	57 e4       	ldi	r21, 0x47	; 71
    121e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1222:	18 16       	cp	r1, r24
    1224:	4c f5       	brge	.+82     	; 0x1278 <CONTROL_openDoor+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1226:	6b 85       	ldd	r22, Y+11	; 0x0b
    1228:	7c 85       	ldd	r23, Y+12	; 0x0c
    122a:	8d 85       	ldd	r24, Y+13	; 0x0d
    122c:	9e 85       	ldd	r25, Y+14	; 0x0e
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e2       	ldi	r20, 0x20	; 32
    1234:	51 e4       	ldi	r21, 0x41	; 65
    1236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	9e 83       	std	Y+6, r25	; 0x06
    124c:	8d 83       	std	Y+5, r24	; 0x05
    124e:	0f c0       	rjmp	.+30     	; 0x126e <CONTROL_openDoor+0x18c>
    1250:	88 ec       	ldi	r24, 0xC8	; 200
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <CONTROL_openDoor+0x17a>
    1260:	9c 83       	std	Y+4, r25	; 0x04
    1262:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	69 f7       	brne	.-38     	; 0x1250 <CONTROL_openDoor+0x16e>
    1276:	14 c0       	rjmp	.+40     	; 0x12a0 <CONTROL_openDoor+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1278:	6f 81       	ldd	r22, Y+7	; 0x07
    127a:	78 85       	ldd	r23, Y+8	; 0x08
    127c:	89 85       	ldd	r24, Y+9	; 0x09
    127e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	8d 83       	std	Y+5, r24	; 0x05
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	f1 f7       	brne	.-4      	; 0x1298 <CONTROL_openDoor+0x1b6>
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);
	Timer1_deInit();
    12a0:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Timer1_deInit>
	g_tick = 0;
    12a4:	10 92 7c 00 	sts	0x007C, r1
    12a8:	10 92 7d 00 	sts	0x007D, r1
    12ac:	10 92 7e 00 	sts	0x007E, r1
    12b0:	10 92 7f 00 	sts	0x007F, r1

}
    12b4:	69 96       	adiw	r28, 0x19	; 25
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <CONTROL_timer1>:
void CONTROL_timer1 (void){
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62

	g_tick++;
    12ce:	80 91 7c 00 	lds	r24, 0x007C
    12d2:	90 91 7d 00 	lds	r25, 0x007D
    12d6:	a0 91 7e 00 	lds	r26, 0x007E
    12da:	b0 91 7f 00 	lds	r27, 0x007F
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	a1 1d       	adc	r26, r1
    12e2:	b1 1d       	adc	r27, r1
    12e4:	80 93 7c 00 	sts	0x007C, r24
    12e8:	90 93 7d 00 	sts	0x007D, r25
    12ec:	a0 93 7e 00 	sts	0x007E, r26
    12f0:	b0 93 7f 00 	sts	0x007F, r27

}
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <CONTROL_handlingUnmatchedPasswords>:
uint8 CONTROL_handlingUnmatchedPasswords(void){
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	0f 92       	push	r0
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62

	/*Take Password*/
	CONTROL_receivePassword(password);
    1304:	82 e8       	ldi	r24, 0x82	; 130
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 02 07 	call	0xe04	; 0xe04 <CONTROL_receivePassword>
	CONTROL_checkPasswordinMemory(0x311, password);
    130c:	22 e8       	ldi	r18, 0x82	; 130
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e1       	ldi	r24, 0x11	; 17
    1312:	93 e0       	ldi	r25, 0x03	; 3
    1314:	b9 01       	movw	r22, r18
    1316:	0e 94 1e 08 	call	0x103c	; 0x103c <CONTROL_checkPasswordinMemory>
	CONTROL_sendResponse(PasswordStatus);
    131a:	80 91 88 00 	lds	r24, 0x0088
    131e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CONTROL_sendResponse>

	if(PasswordStatus == UNMATCHED_PASSWORDS){
    1322:	80 91 88 00 	lds	r24, 0x0088
    1326:	85 30       	cpi	r24, 0x05	; 5
    1328:	71 f5       	brne	.+92     	; 0x1386 <CONTROL_handlingUnmatchedPasswords+0x8c>
		/*Give one more chance*/
		CONTROL_receivePassword(password);
    132a:	82 e8       	ldi	r24, 0x82	; 130
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 02 07 	call	0xe04	; 0xe04 <CONTROL_receivePassword>
		CONTROL_checkPasswordinMemory(0x311, password);
    1332:	22 e8       	ldi	r18, 0x82	; 130
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e1       	ldi	r24, 0x11	; 17
    1338:	93 e0       	ldi	r25, 0x03	; 3
    133a:	b9 01       	movw	r22, r18
    133c:	0e 94 1e 08 	call	0x103c	; 0x103c <CONTROL_checkPasswordinMemory>
		CONTROL_sendResponse(PasswordStatus);
    1340:	80 91 88 00 	lds	r24, 0x0088
    1344:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CONTROL_sendResponse>

		if(PasswordStatus == UNMATCHED_PASSWORDS){
    1348:	80 91 88 00 	lds	r24, 0x0088
    134c:	85 30       	cpi	r24, 0x05	; 5
    134e:	99 f4       	brne	.+38     	; 0x1376 <CONTROL_handlingUnmatchedPasswords+0x7c>
			/*Last One*/
			CONTROL_receivePassword(password);
    1350:	82 e8       	ldi	r24, 0x82	; 130
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 02 07 	call	0xe04	; 0xe04 <CONTROL_receivePassword>
			CONTROL_checkPasswordinMemory(0x311, password);
    1358:	22 e8       	ldi	r18, 0x82	; 130
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e1       	ldi	r24, 0x11	; 17
    135e:	93 e0       	ldi	r25, 0x03	; 3
    1360:	b9 01       	movw	r22, r18
    1362:	0e 94 1e 08 	call	0x103c	; 0x103c <CONTROL_checkPasswordinMemory>
			CONTROL_sendResponse(PasswordStatus);
    1366:	80 91 88 00 	lds	r24, 0x0088
    136a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CONTROL_sendResponse>

			return PasswordStatus;
    136e:	80 91 88 00 	lds	r24, 0x0088
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	13 c0       	rjmp	.+38     	; 0x139c <CONTROL_handlingUnmatchedPasswords+0xa2>


		}
		else if (PasswordStatus == MATCHED_PASSWORDS){
    1376:	80 91 88 00 	lds	r24, 0x0088
    137a:	86 30       	cpi	r24, 0x06	; 6
    137c:	61 f4       	brne	.+24     	; 0x1396 <CONTROL_handlingUnmatchedPasswords+0x9c>
			return PasswordStatus;
    137e:	80 91 88 00 	lds	r24, 0x0088
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	0b c0       	rjmp	.+22     	; 0x139c <CONTROL_handlingUnmatchedPasswords+0xa2>
		}
	}

	else if(PasswordStatus == MATCHED_PASSWORDS){
    1386:	80 91 88 00 	lds	r24, 0x0088
    138a:	86 30       	cpi	r24, 0x06	; 6
    138c:	21 f4       	brne	.+8      	; 0x1396 <CONTROL_handlingUnmatchedPasswords+0x9c>
		return PasswordStatus;
    138e:	80 91 88 00 	lds	r24, 0x0088
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	03 c0       	rjmp	.+6      	; 0x139c <CONTROL_handlingUnmatchedPasswords+0xa2>
	}

	return PasswordStatus;
    1396:	80 91 88 00 	lds	r24, 0x0088
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	89 81       	ldd	r24, Y+1	; 0x01

}
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <CONTROL_lock>:
void CONTROL_lock(void){
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	2b 97       	sbiw	r28, 0x0b	; 11
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
	 *                            Ttimer = 1 milli second
	 *                            with compare value of 30000
	 *                            Ttimer = 30000 * 0.001 = 30 seconds
	 * So we need 2 overflows
	 **/
	Timer1_ConfigType TimerError = {0,30000,F_CPU_1024,CTCMode};
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	98 87       	std	Y+8, r25	; 0x08
    13c0:	8f 83       	std	Y+7, r24	; 0x07
    13c2:	e5 e7       	ldi	r30, 0x75	; 117
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	fa 87       	std	Y+10, r31	; 0x0a
    13c8:	e9 87       	std	Y+9, r30	; 0x09
    13ca:	f6 e0       	ldi	r31, 0x06	; 6
    13cc:	fb 87       	std	Y+11, r31	; 0x0b
    13ce:	e9 85       	ldd	r30, Y+9	; 0x09
    13d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    13d2:	00 80       	ld	r0, Z
    13d4:	89 85       	ldd	r24, Y+9	; 0x09
    13d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	9a 87       	std	Y+10, r25	; 0x0a
    13dc:	89 87       	std	Y+9, r24	; 0x09
    13de:	ef 81       	ldd	r30, Y+7	; 0x07
    13e0:	f8 85       	ldd	r31, Y+8	; 0x08
    13e2:	00 82       	st	Z, r0
    13e4:	8f 81       	ldd	r24, Y+7	; 0x07
    13e6:	98 85       	ldd	r25, Y+8	; 0x08
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	98 87       	std	Y+8, r25	; 0x08
    13ec:	8f 83       	std	Y+7, r24	; 0x07
    13ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    13f0:	91 50       	subi	r25, 0x01	; 1
    13f2:	9b 87       	std	Y+11, r25	; 0x0b
    13f4:	eb 85       	ldd	r30, Y+11	; 0x0b
    13f6:	ee 23       	and	r30, r30
    13f8:	51 f7       	brne	.-44     	; 0x13ce <CONTROL_lock+0x28>
	g_tick =0;
    13fa:	10 92 7c 00 	sts	0x007C, r1
    13fe:	10 92 7d 00 	sts	0x007D, r1
    1402:	10 92 7e 00 	sts	0x007E, r1
    1406:	10 92 7f 00 	sts	0x007F, r1
	/*Enable Buzzer for 1 minute*/
	Buzzer_on();
    140a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Buzzer_on>

	Timer1_init(&TimerError);
    140e:	ce 01       	movw	r24, r28
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <Timer1_init>

	while(g_tick < 2);
    1416:	80 91 7c 00 	lds	r24, 0x007C
    141a:	90 91 7d 00 	lds	r25, 0x007D
    141e:	a0 91 7e 00 	lds	r26, 0x007E
    1422:	b0 91 7f 00 	lds	r27, 0x007F
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	91 05       	cpc	r25, r1
    142a:	a1 05       	cpc	r26, r1
    142c:	b1 05       	cpc	r27, r1
    142e:	98 f3       	brcs	.-26     	; 0x1416 <CONTROL_lock+0x70>
	Timer1_deInit();
    1430:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Timer1_deInit>
	Buzzer_off();
    1434:	0e 94 aa 06 	call	0xd54	; 0xd54 <Buzzer_off>
}
    1438:	2b 96       	adiw	r28, 0x0b	; 11
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <DcMotor_Init>:
#include "dcmotor.h"
#include "gpio.h"
#include "pwm.h"

void DcMotor_Init(void)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
	/*Configure the two pins as Output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, PIN_OUTPUT);
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	66 e0       	ldi	r22, 0x06	; 6
    1456:	41 e0       	ldi	r20, 0x01	; 1
    1458:	0e 94 33 0b 	call	0x1666	; 0x1666 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, PIN_OUTPUT);
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	67 e0       	ldi	r22, 0x07	; 7
    1460:	41 e0       	ldi	r20, 0x01	; 1
    1462:	0e 94 33 0b 	call	0x1666	; 0x1666 <GPIO_setupPinDirection>
	/* Motor is stop at the beginning */
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	61 e0       	ldi	r22, 0x01	; 1
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_writePin>
}
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <DcMotor_Rotate+0x6>
    1486:	0f 92       	push	r0
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	8a 83       	std	Y+2, r24	; 0x02
    148e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_dutyCycle=0;
    1490:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
	 */
	if(state == Stop){
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	88 23       	and	r24, r24
    1496:	59 f4       	brne	.+22     	; 0x14ae <DcMotor_Rotate+0x2e>
		GPIO_writePin(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	66 e0       	ldi	r22, 0x06	; 6
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	67 e0       	ldi	r22, 0x07	; 7
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_writePin>
    14ac:	18 c0       	rjmp	.+48     	; 0x14de <DcMotor_Rotate+0x5e>
	}
	else if(state == Clockwise)
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	59 f4       	brne	.+22     	; 0x14ca <DcMotor_Rotate+0x4a>
	{
		GPIO_writePin(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, LOGIC_HIGH);
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	66 e0       	ldi	r22, 0x06	; 6
    14b8:	41 e0       	ldi	r20, 0x01	; 1
    14ba:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	67 e0       	ldi	r22, 0x07	; 7
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_writePin>
    14c8:	0a c0       	rjmp	.+20     	; 0x14de <DcMotor_Rotate+0x5e>
	}
	else{
		GPIO_writePin(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	66 e0       	ldi	r22, 0x06	; 6
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, LOGIC_HIGH);
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	67 e0       	ldi	r22, 0x07	; 7
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_writePin>
	}
	/*
	 * Calculate the required duty cycle
	 */

	a_dutyCycle = (uint8)(((uint32)speed*255)/(100));
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a0 e0       	ldi	r26, 0x00	; 0
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	2f ef       	ldi	r18, 0xFF	; 255
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	bc 01       	movw	r22, r24
    14f2:	cd 01       	movw	r24, r26
    14f4:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__mulsi3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	24 e6       	ldi	r18, 0x64	; 100
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	0e 94 09 11 	call	0x2212	; 0x2212 <__udivmodsi4>
    150c:	da 01       	movw	r26, r20
    150e:	c9 01       	movw	r24, r18
    1510:	89 83       	std	Y+1, r24	; 0x01

	PWM_Timer0_Start(a_dutyCycle);
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <PWM_Timer0_Start>


}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <EEPROM_writeByte+0x6>
    152a:	00 d0       	rcall	.+0      	; 0x152c <EEPROM_writeByte+0x8>
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1536:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    153a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <TWI_getStatus>
    153e:	88 30       	cpi	r24, 0x08	; 8
    1540:	11 f0       	breq	.+4      	; 0x1546 <EEPROM_writeByte+0x22>
        return ERROR;
    1542:	1c 82       	std	Y+4, r1	; 0x04
    1544:	28 c0       	rjmp	.+80     	; 0x1596 <EEPROM_writeByte+0x72>
	 * 2 - Shifting the result by 7 to get them in their suitable place in device address bits
	 * 3 - Oring The result with 0xA0 (The Fixed 1010 in the device address)
	 * 4 - if write last bit will be zero by default
	 * 5 - if read: Or the result with 0x01
	 */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	80 70       	andi	r24, 0x00	; 0
    154c:	97 70       	andi	r25, 0x07	; 7
    154e:	88 0f       	add	r24, r24
    1550:	89 2f       	mov	r24, r25
    1552:	88 1f       	adc	r24, r24
    1554:	99 0b       	sbc	r25, r25
    1556:	91 95       	neg	r25
    1558:	80 6a       	ori	r24, 0xA0	; 160
    155a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    155e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <TWI_getStatus>
    1562:	88 31       	cpi	r24, 0x18	; 24
    1564:	11 f0       	breq	.+4      	; 0x156a <EEPROM_writeByte+0x46>
        return ERROR; 
    1566:	1c 82       	std	Y+4, r1	; 0x04
    1568:	16 c0       	rjmp	.+44     	; 0x1596 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
	/* Will Only send lowest bits as I already sent the first 3 bits as part from device address */
    TWI_writeByte((uint8)(u16addr));
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <TWI_writeByte>
	
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1570:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <TWI_getStatus>
    1574:	88 32       	cpi	r24, 0x28	; 40
    1576:	11 f0       	breq	.+4      	; 0x157c <EEPROM_writeByte+0x58>
        return ERROR;
    1578:	1c 82       	std	Y+4, r1	; 0x04
    157a:	0d c0       	rjmp	.+26     	; 0x1596 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1582:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <TWI_getStatus>
    1586:	88 32       	cpi	r24, 0x28	; 40
    1588:	11 f0       	breq	.+4      	; 0x158e <EEPROM_writeByte+0x6a>
        return ERROR;
    158a:	1c 82       	std	Y+4, r1	; 0x04
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    158e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <TWI_stop>
	
    return SUCCESS;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	8c 83       	std	Y+4, r24	; 0x04
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <EEPROM_readByte+0x6>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <EEPROM_readByte+0x8>
    15ae:	0f 92       	push	r0
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	7c 83       	std	Y+4, r23	; 0x04
    15ba:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    15bc:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    15c0:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <TWI_getStatus>
    15c4:	88 30       	cpi	r24, 0x08	; 8
    15c6:	11 f0       	breq	.+4      	; 0x15cc <EEPROM_readByte+0x26>
        return ERROR;
    15c8:	1d 82       	std	Y+5, r1	; 0x05
    15ca:	44 c0       	rjmp	.+136    	; 0x1654 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	80 70       	andi	r24, 0x00	; 0
    15d2:	97 70       	andi	r25, 0x07	; 7
    15d4:	88 0f       	add	r24, r24
    15d6:	89 2f       	mov	r24, r25
    15d8:	88 1f       	adc	r24, r24
    15da:	99 0b       	sbc	r25, r25
    15dc:	91 95       	neg	r25
    15de:	80 6a       	ori	r24, 0xA0	; 160
    15e0:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15e4:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <TWI_getStatus>
    15e8:	88 31       	cpi	r24, 0x18	; 24
    15ea:	11 f0       	breq	.+4      	; 0x15f0 <EEPROM_readByte+0x4a>
        return ERROR;
    15ec:	1d 82       	std	Y+5, r1	; 0x05
    15ee:	32 c0       	rjmp	.+100    	; 0x1654 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15f6:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <TWI_getStatus>
    15fa:	88 32       	cpi	r24, 0x28	; 40
    15fc:	11 f0       	breq	.+4      	; 0x1602 <EEPROM_readByte+0x5c>
        return ERROR;
    15fe:	1d 82       	std	Y+5, r1	; 0x05
    1600:	29 c0       	rjmp	.+82     	; 0x1654 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1602:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1606:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <TWI_getStatus>
    160a:	80 31       	cpi	r24, 0x10	; 16
    160c:	11 f0       	breq	.+4      	; 0x1612 <EEPROM_readByte+0x6c>
        return ERROR;
    160e:	1d 82       	std	Y+5, r1	; 0x05
    1610:	21 c0       	rjmp	.+66     	; 0x1654 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	80 70       	andi	r24, 0x00	; 0
    1618:	97 70       	andi	r25, 0x07	; 7
    161a:	88 0f       	add	r24, r24
    161c:	89 2f       	mov	r24, r25
    161e:	88 1f       	adc	r24, r24
    1620:	99 0b       	sbc	r25, r25
    1622:	91 95       	neg	r25
    1624:	81 6a       	ori	r24, 0xA1	; 161
    1626:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    162a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <TWI_getStatus>
    162e:	80 34       	cpi	r24, 0x40	; 64
    1630:	11 f0       	breq	.+4      	; 0x1636 <EEPROM_readByte+0x90>
        return ERROR;
    1632:	1d 82       	std	Y+5, r1	; 0x05
    1634:	0f c0       	rjmp	.+30     	; 0x1654 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1636:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <TWI_readByteWithNACK>
    163a:	eb 81       	ldd	r30, Y+3	; 0x03
    163c:	fc 81       	ldd	r31, Y+4	; 0x04
    163e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1640:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <TWI_getStatus>
    1644:	88 35       	cpi	r24, 0x58	; 88
    1646:	11 f0       	breq	.+4      	; 0x164c <EEPROM_readByte+0xa6>
        return ERROR;
    1648:	1d 82       	std	Y+5, r1	; 0x05
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    164c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <TWI_stop>

    return SUCCESS;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	8d 83       	std	Y+5, r24	; 0x05
    1654:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	00 d0       	rcall	.+0      	; 0x166c <GPIO_setupPinDirection+0x6>
    166c:	00 d0       	rcall	.+0      	; 0x166e <GPIO_setupPinDirection+0x8>
    166e:	0f 92       	push	r0
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	6a 83       	std	Y+2, r22	; 0x02
    1678:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	88 30       	cpi	r24, 0x08	; 8
    167e:	08 f0       	brcs	.+2      	; 0x1682 <GPIO_setupPinDirection+0x1c>
    1680:	d5 c0       	rjmp	.+426    	; 0x182c <GPIO_setupPinDirection+0x1c6>
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	84 30       	cpi	r24, 0x04	; 4
    1686:	08 f0       	brcs	.+2      	; 0x168a <GPIO_setupPinDirection+0x24>
    1688:	d1 c0       	rjmp	.+418    	; 0x182c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	3d 83       	std	Y+5, r19	; 0x05
    1692:	2c 83       	std	Y+4, r18	; 0x04
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	9d 81       	ldd	r25, Y+5	; 0x05
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <GPIO_setupPinDirection+0x3a>
    169e:	43 c0       	rjmp	.+134    	; 0x1726 <GPIO_setupPinDirection+0xc0>
    16a0:	2c 81       	ldd	r18, Y+4	; 0x04
    16a2:	3d 81       	ldd	r19, Y+5	; 0x05
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <GPIO_setupPinDirection+0x4e>
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	71 f0       	breq	.+28     	; 0x16ce <GPIO_setupPinDirection+0x68>
    16b2:	bc c0       	rjmp	.+376    	; 0x182c <GPIO_setupPinDirection+0x1c6>
    16b4:	2c 81       	ldd	r18, Y+4	; 0x04
    16b6:	3d 81       	ldd	r19, Y+5	; 0x05
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <GPIO_setupPinDirection+0x5a>
    16be:	5f c0       	rjmp	.+190    	; 0x177e <GPIO_setupPinDirection+0x118>
    16c0:	8c 81       	ldd	r24, Y+4	; 0x04
    16c2:	9d 81       	ldd	r25, Y+5	; 0x05
    16c4:	83 30       	cpi	r24, 0x03	; 3
    16c6:	91 05       	cpc	r25, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <GPIO_setupPinDirection+0x66>
    16ca:	85 c0       	rjmp	.+266    	; 0x17d6 <GPIO_setupPinDirection+0x170>
    16cc:	af c0       	rjmp	.+350    	; 0x182c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	a1 f4       	brne	.+40     	; 0x16fc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16d4:	aa e3       	ldi	r26, 0x3A	; 58
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	ea e3       	ldi	r30, 0x3A	; 58
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <GPIO_setupPinDirection+0x8c>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <GPIO_setupPinDirection+0x88>
    16f6:	84 2b       	or	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	98 c0       	rjmp	.+304    	; 0x182c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16fc:	aa e3       	ldi	r26, 0x3A	; 58
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ea e3       	ldi	r30, 0x3A	; 58
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <GPIO_setupPinDirection+0xb4>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <GPIO_setupPinDirection+0xb0>
    171e:	80 95       	com	r24
    1720:	84 23       	and	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	83 c0       	rjmp	.+262    	; 0x182c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	a1 f4       	brne	.+40     	; 0x1754 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    172c:	a7 e3       	ldi	r26, 0x37	; 55
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e7 e3       	ldi	r30, 0x37	; 55
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <GPIO_setupPinDirection+0xe4>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <GPIO_setupPinDirection+0xe0>
    174e:	84 2b       	or	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	6c c0       	rjmp	.+216    	; 0x182c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1754:	a7 e3       	ldi	r26, 0x37	; 55
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e7 e3       	ldi	r30, 0x37	; 55
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <GPIO_setupPinDirection+0x10c>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <GPIO_setupPinDirection+0x108>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	57 c0       	rjmp	.+174    	; 0x182c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	a1 f4       	brne	.+40     	; 0x17ac <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1784:	a4 e3       	ldi	r26, 0x34	; 52
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e4 e3       	ldi	r30, 0x34	; 52
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	48 2f       	mov	r20, r24
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 2e       	mov	r0, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <GPIO_setupPinDirection+0x13c>
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	0a 94       	dec	r0
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <GPIO_setupPinDirection+0x138>
    17a6:	84 2b       	or	r24, r20
    17a8:	8c 93       	st	X, r24
    17aa:	40 c0       	rjmp	.+128    	; 0x182c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17ac:	a4 e3       	ldi	r26, 0x34	; 52
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e4 e3       	ldi	r30, 0x34	; 52
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <GPIO_setupPinDirection+0x164>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <GPIO_setupPinDirection+0x160>
    17ce:	80 95       	com	r24
    17d0:	84 23       	and	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	2b c0       	rjmp	.+86     	; 0x182c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	a1 f4       	brne	.+40     	; 0x1804 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17dc:	a1 e3       	ldi	r26, 0x31	; 49
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e1 e3       	ldi	r30, 0x31	; 49
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <GPIO_setupPinDirection+0x194>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <GPIO_setupPinDirection+0x190>
    17fe:	84 2b       	or	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	14 c0       	rjmp	.+40     	; 0x182c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1804:	a1 e3       	ldi	r26, 0x31	; 49
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e1 e3       	ldi	r30, 0x31	; 49
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	02 2e       	mov	r0, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <GPIO_setupPinDirection+0x1bc>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	0a 94       	dec	r0
    1824:	e2 f7       	brpl	.-8      	; 0x181e <GPIO_setupPinDirection+0x1b8>
    1826:	80 95       	com	r24
    1828:	84 23       	and	r24, r20
    182a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	00 d0       	rcall	.+0      	; 0x1842 <GPIO_writePin+0x6>
    1842:	00 d0       	rcall	.+0      	; 0x1844 <GPIO_writePin+0x8>
    1844:	0f 92       	push	r0
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	6a 83       	std	Y+2, r22	; 0x02
    184e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	88 30       	cpi	r24, 0x08	; 8
    1854:	08 f0       	brcs	.+2      	; 0x1858 <GPIO_writePin+0x1c>
    1856:	d5 c0       	rjmp	.+426    	; 0x1a02 <GPIO_writePin+0x1c6>
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	84 30       	cpi	r24, 0x04	; 4
    185c:	08 f0       	brcs	.+2      	; 0x1860 <GPIO_writePin+0x24>
    185e:	d1 c0       	rjmp	.+418    	; 0x1a02 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	3d 83       	std	Y+5, r19	; 0x05
    1868:	2c 83       	std	Y+4, r18	; 0x04
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	91 05       	cpc	r25, r1
    1872:	09 f4       	brne	.+2      	; 0x1876 <GPIO_writePin+0x3a>
    1874:	43 c0       	rjmp	.+134    	; 0x18fc <GPIO_writePin+0xc0>
    1876:	2c 81       	ldd	r18, Y+4	; 0x04
    1878:	3d 81       	ldd	r19, Y+5	; 0x05
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	2c f4       	brge	.+10     	; 0x188a <GPIO_writePin+0x4e>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	71 f0       	breq	.+28     	; 0x18a4 <GPIO_writePin+0x68>
    1888:	bc c0       	rjmp	.+376    	; 0x1a02 <GPIO_writePin+0x1c6>
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	3d 81       	ldd	r19, Y+5	; 0x05
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <GPIO_writePin+0x5a>
    1894:	5f c0       	rjmp	.+190    	; 0x1954 <GPIO_writePin+0x118>
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	9d 81       	ldd	r25, Y+5	; 0x05
    189a:	83 30       	cpi	r24, 0x03	; 3
    189c:	91 05       	cpc	r25, r1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <GPIO_writePin+0x66>
    18a0:	85 c0       	rjmp	.+266    	; 0x19ac <GPIO_writePin+0x170>
    18a2:	af c0       	rjmp	.+350    	; 0x1a02 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	a1 f4       	brne	.+40     	; 0x18d2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18aa:	ab e3       	ldi	r26, 0x3B	; 59
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	eb e3       	ldi	r30, 0x3B	; 59
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <GPIO_writePin+0x8c>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <GPIO_writePin+0x88>
    18cc:	84 2b       	or	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	98 c0       	rjmp	.+304    	; 0x1a02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18d2:	ab e3       	ldi	r26, 0x3B	; 59
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	eb e3       	ldi	r30, 0x3B	; 59
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <GPIO_writePin+0xb4>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <GPIO_writePin+0xb0>
    18f4:	80 95       	com	r24
    18f6:	84 23       	and	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	83 c0       	rjmp	.+262    	; 0x1a02 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	a1 f4       	brne	.+40     	; 0x192a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1902:	a8 e3       	ldi	r26, 0x38	; 56
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e8 e3       	ldi	r30, 0x38	; 56
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <GPIO_writePin+0xe4>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <GPIO_writePin+0xe0>
    1924:	84 2b       	or	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	6c c0       	rjmp	.+216    	; 0x1a02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    192a:	a8 e3       	ldi	r26, 0x38	; 56
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e8 e3       	ldi	r30, 0x38	; 56
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <GPIO_writePin+0x10c>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <GPIO_writePin+0x108>
    194c:	80 95       	com	r24
    194e:	84 23       	and	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	57 c0       	rjmp	.+174    	; 0x1a02 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	a1 f4       	brne	.+40     	; 0x1982 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    195a:	a5 e3       	ldi	r26, 0x35	; 53
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e5 e3       	ldi	r30, 0x35	; 53
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <GPIO_writePin+0x13c>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <GPIO_writePin+0x138>
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	40 c0       	rjmp	.+128    	; 0x1a02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1982:	a5 e3       	ldi	r26, 0x35	; 53
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e5 e3       	ldi	r30, 0x35	; 53
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <GPIO_writePin+0x164>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <GPIO_writePin+0x160>
    19a4:	80 95       	com	r24
    19a6:	84 23       	and	r24, r20
    19a8:	8c 93       	st	X, r24
    19aa:	2b c0       	rjmp	.+86     	; 0x1a02 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	a1 f4       	brne	.+40     	; 0x19da <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19b2:	a2 e3       	ldi	r26, 0x32	; 50
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e2 e3       	ldi	r30, 0x32	; 50
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <GPIO_writePin+0x194>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <GPIO_writePin+0x190>
    19d4:	84 2b       	or	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	14 c0       	rjmp	.+40     	; 0x1a02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19da:	a2 e3       	ldi	r26, 0x32	; 50
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e2 e3       	ldi	r30, 0x32	; 50
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <GPIO_writePin+0x1bc>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <GPIO_writePin+0x1b8>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <GPIO_readPin+0x6>
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <GPIO_readPin+0x8>
    1a1a:	0f 92       	push	r0
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	8a 83       	std	Y+2, r24	; 0x02
    1a22:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a24:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	88 30       	cpi	r24, 0x08	; 8
    1a2a:	08 f0       	brcs	.+2      	; 0x1a2e <GPIO_readPin+0x1c>
    1a2c:	84 c0       	rjmp	.+264    	; 0x1b36 <GPIO_readPin+0x124>
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	84 30       	cpi	r24, 0x04	; 4
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <GPIO_readPin+0x24>
    1a34:	80 c0       	rjmp	.+256    	; 0x1b36 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	3d 83       	std	Y+5, r19	; 0x05
    1a3e:	2c 83       	std	Y+4, r18	; 0x04
    1a40:	4c 81       	ldd	r20, Y+4	; 0x04
    1a42:	5d 81       	ldd	r21, Y+5	; 0x05
    1a44:	41 30       	cpi	r20, 0x01	; 1
    1a46:	51 05       	cpc	r21, r1
    1a48:	79 f1       	breq	.+94     	; 0x1aa8 <GPIO_readPin+0x96>
    1a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4e:	82 30       	cpi	r24, 0x02	; 2
    1a50:	91 05       	cpc	r25, r1
    1a52:	34 f4       	brge	.+12     	; 0x1a60 <GPIO_readPin+0x4e>
    1a54:	2c 81       	ldd	r18, Y+4	; 0x04
    1a56:	3d 81       	ldd	r19, Y+5	; 0x05
    1a58:	21 15       	cp	r18, r1
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	69 f0       	breq	.+26     	; 0x1a78 <GPIO_readPin+0x66>
    1a5e:	6b c0       	rjmp	.+214    	; 0x1b36 <GPIO_readPin+0x124>
    1a60:	4c 81       	ldd	r20, Y+4	; 0x04
    1a62:	5d 81       	ldd	r21, Y+5	; 0x05
    1a64:	42 30       	cpi	r20, 0x02	; 2
    1a66:	51 05       	cpc	r21, r1
    1a68:	b9 f1       	breq	.+110    	; 0x1ad8 <GPIO_readPin+0xc6>
    1a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6e:	83 30       	cpi	r24, 0x03	; 3
    1a70:	91 05       	cpc	r25, r1
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <GPIO_readPin+0x64>
    1a74:	49 c0       	rjmp	.+146    	; 0x1b08 <GPIO_readPin+0xf6>
    1a76:	5f c0       	rjmp	.+190    	; 0x1b36 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a78:	e9 e3       	ldi	r30, 0x39	; 57
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	88 2f       	mov	r24, r24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a9 01       	movw	r20, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <GPIO_readPin+0x7e>
    1a8c:	55 95       	asr	r21
    1a8e:	47 95       	ror	r20
    1a90:	8a 95       	dec	r24
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <GPIO_readPin+0x7a>
    1a94:	ca 01       	movw	r24, r20
    1a96:	81 70       	andi	r24, 0x01	; 1
    1a98:	90 70       	andi	r25, 0x00	; 0
    1a9a:	88 23       	and	r24, r24
    1a9c:	19 f0       	breq	.+6      	; 0x1aa4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	49 c0       	rjmp	.+146    	; 0x1b36 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aa4:	19 82       	std	Y+1, r1	; 0x01
    1aa6:	47 c0       	rjmp	.+142    	; 0x1b36 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1aa8:	e6 e3       	ldi	r30, 0x36	; 54
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	88 2f       	mov	r24, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a9 01       	movw	r20, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <GPIO_readPin+0xae>
    1abc:	55 95       	asr	r21
    1abe:	47 95       	ror	r20
    1ac0:	8a 95       	dec	r24
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <GPIO_readPin+0xaa>
    1ac4:	ca 01       	movw	r24, r20
    1ac6:	81 70       	andi	r24, 0x01	; 1
    1ac8:	90 70       	andi	r25, 0x00	; 0
    1aca:	88 23       	and	r24, r24
    1acc:	19 f0       	breq	.+6      	; 0x1ad4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	31 c0       	rjmp	.+98     	; 0x1b36 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ad4:	19 82       	std	Y+1, r1	; 0x01
    1ad6:	2f c0       	rjmp	.+94     	; 0x1b36 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ad8:	e3 e3       	ldi	r30, 0x33	; 51
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a9 01       	movw	r20, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <GPIO_readPin+0xde>
    1aec:	55 95       	asr	r21
    1aee:	47 95       	ror	r20
    1af0:	8a 95       	dec	r24
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <GPIO_readPin+0xda>
    1af4:	ca 01       	movw	r24, r20
    1af6:	81 70       	andi	r24, 0x01	; 1
    1af8:	90 70       	andi	r25, 0x00	; 0
    1afa:	88 23       	and	r24, r24
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	19 c0       	rjmp	.+50     	; 0x1b36 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b04:	19 82       	std	Y+1, r1	; 0x01
    1b06:	17 c0       	rjmp	.+46     	; 0x1b36 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b08:	e0 e3       	ldi	r30, 0x30	; 48
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a9 01       	movw	r20, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <GPIO_readPin+0x10e>
    1b1c:	55 95       	asr	r21
    1b1e:	47 95       	ror	r20
    1b20:	8a 95       	dec	r24
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <GPIO_readPin+0x10a>
    1b24:	ca 01       	movw	r24, r20
    1b26:	81 70       	andi	r24, 0x01	; 1
    1b28:	90 70       	andi	r25, 0x00	; 0
    1b2a:	88 23       	and	r24, r24
    1b2c:	19 f0       	breq	.+6      	; 0x1b34 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b34:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <GPIO_setupPortDirection+0x6>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <GPIO_setupPortDirection+0x8>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	84 30       	cpi	r24, 0x04	; 4
    1b5c:	90 f5       	brcc	.+100    	; 0x1bc2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	3c 83       	std	Y+4, r19	; 0x04
    1b66:	2b 83       	std	Y+3, r18	; 0x03
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	d1 f0       	breq	.+52     	; 0x1ba6 <GPIO_setupPortDirection+0x5e>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <GPIO_setupPortDirection+0x3e>
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	61 f0       	breq	.+24     	; 0x1b9c <GPIO_setupPortDirection+0x54>
    1b84:	1e c0       	rjmp	.+60     	; 0x1bc2 <GPIO_setupPortDirection+0x7a>
    1b86:	2b 81       	ldd	r18, Y+3	; 0x03
    1b88:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	81 f0       	breq	.+32     	; 0x1bb0 <GPIO_setupPortDirection+0x68>
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	91 05       	cpc	r25, r1
    1b98:	81 f0       	breq	.+32     	; 0x1bba <GPIO_setupPortDirection+0x72>
    1b9a:	13 c0       	rjmp	.+38     	; 0x1bc2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b9c:	ea e3       	ldi	r30, 0x3A	; 58
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	80 83       	st	Z, r24
    1ba4:	0e c0       	rjmp	.+28     	; 0x1bc2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ba6:	e7 e3       	ldi	r30, 0x37	; 55
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	80 83       	st	Z, r24
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bb0:	e4 e3       	ldi	r30, 0x34	; 52
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	80 83       	st	Z, r24
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bba:	e1 e3       	ldi	r30, 0x31	; 49
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <GPIO_writePort+0x6>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <GPIO_writePort+0x8>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	84 30       	cpi	r24, 0x04	; 4
    1be4:	90 f5       	brcc	.+100    	; 0x1c4a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	3c 83       	std	Y+4, r19	; 0x04
    1bee:	2b 83       	std	Y+3, r18	; 0x03
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	d1 f0       	breq	.+52     	; 0x1c2e <GPIO_writePort+0x5e>
    1bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfe:	22 30       	cpi	r18, 0x02	; 2
    1c00:	31 05       	cpc	r19, r1
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <GPIO_writePort+0x3e>
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	61 f0       	breq	.+24     	; 0x1c24 <GPIO_writePort+0x54>
    1c0c:	1e c0       	rjmp	.+60     	; 0x1c4a <GPIO_writePort+0x7a>
    1c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c10:	3c 81       	ldd	r19, Y+4	; 0x04
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	31 05       	cpc	r19, r1
    1c16:	81 f0       	breq	.+32     	; 0x1c38 <GPIO_writePort+0x68>
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	83 30       	cpi	r24, 0x03	; 3
    1c1e:	91 05       	cpc	r25, r1
    1c20:	81 f0       	breq	.+32     	; 0x1c42 <GPIO_writePort+0x72>
    1c22:	13 c0       	rjmp	.+38     	; 0x1c4a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c24:	eb e3       	ldi	r30, 0x3B	; 59
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	80 83       	st	Z, r24
    1c2c:	0e c0       	rjmp	.+28     	; 0x1c4a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c2e:	e8 e3       	ldi	r30, 0x38	; 56
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	80 83       	st	Z, r24
    1c36:	09 c0       	rjmp	.+18     	; 0x1c4a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c38:	e5 e3       	ldi	r30, 0x35	; 53
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	80 83       	st	Z, r24
    1c40:	04 c0       	rjmp	.+8      	; 0x1c4a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c42:	e2 e3       	ldi	r30, 0x32	; 50
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <GPIO_readPort+0x6>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <GPIO_readPort+0x8>
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c66:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	84 30       	cpi	r24, 0x04	; 4
    1c6c:	90 f5       	brcc	.+100    	; 0x1cd2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3c 83       	std	Y+4, r19	; 0x04
    1c76:	2b 83       	std	Y+3, r18	; 0x03
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	91 05       	cpc	r25, r1
    1c80:	d1 f0       	breq	.+52     	; 0x1cb6 <GPIO_readPort+0x5e>
    1c82:	2b 81       	ldd	r18, Y+3	; 0x03
    1c84:	3c 81       	ldd	r19, Y+4	; 0x04
    1c86:	22 30       	cpi	r18, 0x02	; 2
    1c88:	31 05       	cpc	r19, r1
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <GPIO_readPort+0x3e>
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	61 f0       	breq	.+24     	; 0x1cac <GPIO_readPort+0x54>
    1c94:	1e c0       	rjmp	.+60     	; 0x1cd2 <GPIO_readPort+0x7a>
    1c96:	2b 81       	ldd	r18, Y+3	; 0x03
    1c98:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9a:	22 30       	cpi	r18, 0x02	; 2
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	81 f0       	breq	.+32     	; 0x1cc0 <GPIO_readPort+0x68>
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	83 30       	cpi	r24, 0x03	; 3
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	81 f0       	breq	.+32     	; 0x1cca <GPIO_readPort+0x72>
    1caa:	13 c0       	rjmp	.+38     	; 0x1cd2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1cac:	e9 e3       	ldi	r30, 0x39	; 57
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	0e c0       	rjmp	.+28     	; 0x1cd2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1cb6:	e6 e3       	ldi	r30, 0x36	; 54
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	09 c0       	rjmp	.+18     	; 0x1cd2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1cc0:	e3 e3       	ldi	r30, 0x33	; 51
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1cca:	e0 e3       	ldi	r30, 0x30	; 48
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <PWM_Timer0_Start>:
#include"pwm.h"
#include "avr/io.h" /* To use the Timer Registers */

/*Generate a PWM signal with frequency 500Hz*/
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	0f 92       	push	r0
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
    1cee:	e2 e5       	ldi	r30, 0x52	; 82
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	10 82       	st	Z, r1
	 * FOC0 bit:  0 is not active as it's PWM mode
	 * WGM01:0: 11 as Fast PWM Mode
	 * COM01:0: 10 as (non-inverting mode)
	 * CS02:0:  010 Clock Select F_CPU/8.
	 */
	TCCR0 = (1<< WGM01) | (1<<WGM00) |(1<<COM01) |(1<<CS01);
    1cf4:	e3 e5       	ldi	r30, 0x53	; 83
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	8a e6       	ldi	r24, 0x6A	; 106
    1cfa:	80 83       	st	Z, r24

	OCR0 = duty_cycle;
    1cfc:	ec e5       	ldi	r30, 0x5C	; 92
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin
    1d04:	a7 e3       	ldi	r26, 0x37	; 55
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e7 e3       	ldi	r30, 0x37	; 55
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	88 60       	ori	r24, 0x08	; 8
    1d10:	8c 93       	st	X, r24

}
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    1d1a:	1f 92       	push	r1
    1d1c:	0f 92       	push	r0
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	0f 92       	push	r0
    1d22:	11 24       	eor	r1, r1
    1d24:	2f 93       	push	r18
    1d26:	3f 93       	push	r19
    1d28:	4f 93       	push	r20
    1d2a:	5f 93       	push	r21
    1d2c:	6f 93       	push	r22
    1d2e:	7f 93       	push	r23
    1d30:	8f 93       	push	r24
    1d32:	9f 93       	push	r25
    1d34:	af 93       	push	r26
    1d36:	bf 93       	push	r27
    1d38:	ef 93       	push	r30
    1d3a:	ff 93       	push	r31
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1d44:	80 91 80 00 	lds	r24, 0x0080
    1d48:	90 91 81 00 	lds	r25, 0x0081
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	29 f0       	breq	.+10     	; 0x1d5a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1d50:	e0 91 80 00 	lds	r30, 0x0080
    1d54:	f0 91 81 00 	lds	r31, 0x0081
    1d58:	09 95       	icall
	}
}
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	ff 91       	pop	r31
    1d60:	ef 91       	pop	r30
    1d62:	bf 91       	pop	r27
    1d64:	af 91       	pop	r26
    1d66:	9f 91       	pop	r25
    1d68:	8f 91       	pop	r24
    1d6a:	7f 91       	pop	r23
    1d6c:	6f 91       	pop	r22
    1d6e:	5f 91       	pop	r21
    1d70:	4f 91       	pop	r20
    1d72:	3f 91       	pop	r19
    1d74:	2f 91       	pop	r18
    1d76:	0f 90       	pop	r0
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	0f 90       	pop	r0
    1d7c:	1f 90       	pop	r1
    1d7e:	18 95       	reti

00001d80 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1d80:	1f 92       	push	r1
    1d82:	0f 92       	push	r0
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	0f 92       	push	r0
    1d88:	11 24       	eor	r1, r1
    1d8a:	2f 93       	push	r18
    1d8c:	3f 93       	push	r19
    1d8e:	4f 93       	push	r20
    1d90:	5f 93       	push	r21
    1d92:	6f 93       	push	r22
    1d94:	7f 93       	push	r23
    1d96:	8f 93       	push	r24
    1d98:	9f 93       	push	r25
    1d9a:	af 93       	push	r26
    1d9c:	bf 93       	push	r27
    1d9e:	ef 93       	push	r30
    1da0:	ff 93       	push	r31
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1daa:	80 91 80 00 	lds	r24, 0x0080
    1dae:	90 91 81 00 	lds	r25, 0x0081
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	29 f0       	breq	.+10     	; 0x1dc0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1db6:	e0 91 80 00 	lds	r30, 0x0080
    1dba:	f0 91 81 00 	lds	r31, 0x0081
    1dbe:	09 95       	icall
	}
}
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	ff 91       	pop	r31
    1dc6:	ef 91       	pop	r30
    1dc8:	bf 91       	pop	r27
    1dca:	af 91       	pop	r26
    1dcc:	9f 91       	pop	r25
    1dce:	8f 91       	pop	r24
    1dd0:	7f 91       	pop	r23
    1dd2:	6f 91       	pop	r22
    1dd4:	5f 91       	pop	r21
    1dd6:	4f 91       	pop	r20
    1dd8:	3f 91       	pop	r19
    1dda:	2f 91       	pop	r18
    1ddc:	0f 90       	pop	r0
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	0f 90       	pop	r0
    1de2:	1f 90       	pop	r1
    1de4:	18 95       	reti

00001de6 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <Timer1_init+0x6>
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
	/* Set Timer1 initial value to input value */
	TCNT1 = Config_Ptr -> initial_value;
    1df4:	ac e4       	ldi	r26, 0x4C	; 76
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfc:	80 81       	ld	r24, Z
    1dfe:	91 81       	ldd	r25, Z+1	; 0x01
    1e00:	11 96       	adiw	r26, 0x01	; 1
    1e02:	9c 93       	st	X, r25
    1e04:	8e 93       	st	-X, r24

	if (Config_Ptr -> mode == CTCMode){
    1e06:	e9 81       	ldd	r30, Y+1	; 0x01
    1e08:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0a:	85 81       	ldd	r24, Z+5	; 0x05
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	e1 f4       	brne	.+56     	; 0x1e48 <Timer1_init+0x62>

		/* Set Compare value as required */
		OCR1A  = Config_Ptr -> compare_value;
    1e10:	aa e4       	ldi	r26, 0x4A	; 74
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e9 81       	ldd	r30, Y+1	; 0x01
    1e16:	fa 81       	ldd	r31, Y+2	; 0x02
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	11 96       	adiw	r26, 0x01	; 1
    1e1e:	9c 93       	st	X, r25
    1e20:	8e 93       	st	-X, r24

		/* Enable Timer1 Compare A Interrupt */
		TIMSK |= (1<<OCIE1A);
    1e22:	a9 e5       	ldi	r26, 0x59	; 89
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e9 e5       	ldi	r30, 0x59	; 89
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	80 61       	ori	r24, 0x10	; 16
    1e2e:	8c 93       	st	X, r24
		/* Configure timer control register TCCR1A
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=0
		 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
		 */
		TCCR1A = (1<<FOC1A);
    1e30:	ef e4       	ldi	r30, 0x4F	; 79
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	88 e0       	ldi	r24, 0x08	; 8
    1e36:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
		 * 2. Prescaler : insert the required clock value in the first three bits (CS10, CS11 and CS12)
		 */
		TCCR1B = (1<<WGM12) | (Config_Ptr -> prescaler);
    1e38:	ae e4       	ldi	r26, 0x4E	; 78
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e40:	84 81       	ldd	r24, Z+4	; 0x04
    1e42:	88 60       	ori	r24, 0x08	; 8
    1e44:	8c 93       	st	X, r24
    1e46:	16 c0       	rjmp	.+44     	; 0x1e74 <Timer1_init+0x8e>
	}
	else if(Config_Ptr -> mode == NormalMode){
    1e48:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4c:	85 81       	ldd	r24, Z+5	; 0x05
    1e4e:	88 23       	and	r24, r24
    1e50:	89 f4       	brne	.+34     	; 0x1e74 <Timer1_init+0x8e>
		/* Enable Timer1 Overflow Interrupt	*/
		TIMSK |= (1<<TOIE1);
    1e52:	a9 e5       	ldi	r26, 0x59	; 89
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e9 e5       	ldi	r30, 0x59	; 89
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	84 60       	ori	r24, 0x04	; 4
    1e5e:	8c 93       	st	X, r24

		/* Timer1 operates in Normal Mode */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1e60:	ef e4       	ldi	r30, 0x4F	; 79
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	8c e0       	ldi	r24, 0x0C	; 12
    1e66:	80 83       	st	Z, r24

		/*
		 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
		 * of TCCR1B Register
		 */
		TCCR1B = (Config_Ptr->prescaler);
    1e68:	ae e4       	ldi	r26, 0x4E	; 78
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e70:	84 81       	ldd	r24, Z+4	; 0x04
    1e72:	8c 93       	st	X, r24
	else {
		/*#error "This Mode is Not Supported"
		 * Do Nothing
		 */
	}
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <Timer1_deInit>:

void Timer1_deInit(void)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
	/* Disconnect clock source and stop the timer
	 * Clear All Timer1 Registers */
	TCCR1A = 0;
    1e86:	ef e4       	ldi	r30, 0x4F	; 79
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	10 82       	st	Z, r1
	TCCR1B = 0;
    1e8c:	ee e4       	ldi	r30, 0x4E	; 78
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	10 82       	st	Z, r1
	TCNT1 = 0;
    1e92:	ec e4       	ldi	r30, 0x4C	; 76
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	11 82       	std	Z+1, r1	; 0x01
    1e98:	10 82       	st	Z, r1


	/* Disable Timer1 Overflow Interrupt and Timer1 Compare A Interrupt respectively */
	TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A) ;
    1e9a:	a9 e5       	ldi	r26, 0x59	; 89
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e9 e5       	ldi	r30, 0x59	; 89
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8b 7e       	andi	r24, 0xEB	; 235
    1ea6:	8c 93       	st	X, r24
}
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <Timer1_setCallBack+0x6>
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = *a_ptr;
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec0:	90 93 81 00 	sts	0x0081, r25
    1ec4:	80 93 80 00 	sts	0x0080, r24
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <TWI_init+0x6>
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr -> TWI_BaudRate;
    1ee0:	a0 e2       	ldi	r26, 0x20	; 32
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee8:	81 81       	ldd	r24, Z+1	; 0x01
    1eea:	8c 93       	st	X, r24
	TWSR = 0x00;
    1eec:	e1 e2       	ldi	r30, 0x21	; 33
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr -> TWI_Address;
    1ef2:	a2 e2       	ldi	r26, 0x22	; 34
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    1efa:	80 81       	ld	r24, Z
    1efc:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1efe:	e6 e5       	ldi	r30, 0x56	; 86
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	84 e0       	ldi	r24, 0x04	; 4
    1f04:	80 83       	st	Z, r24
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <TWI_start>:

void TWI_start(void)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1f18:	e6 e5       	ldi	r30, 0x56	; 86
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	84 ea       	ldi	r24, 0xA4	; 164
    1f1e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f20:	e6 e5       	ldi	r30, 0x56	; 86
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	88 23       	and	r24, r24
    1f28:	dc f7       	brge	.-10     	; 0x1f20 <TWI_start+0x10>
}
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <TWI_stop>:

void TWI_stop(void)
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1f38:	e6 e5       	ldi	r30, 0x56	; 86
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	84 e9       	ldi	r24, 0x94	; 148
    1f3e:	80 83       	st	Z, r24
}
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	0f 92       	push	r0
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1f52:	e3 e2       	ldi	r30, 0x23	; 35
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1f5a:	e6 e5       	ldi	r30, 0x56	; 86
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	84 e8       	ldi	r24, 0x84	; 132
    1f60:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f62:	e6 e5       	ldi	r30, 0x56	; 86
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	88 23       	and	r24, r24
    1f6a:	dc f7       	brge	.-10     	; 0x1f62 <TWI_writeByte+0x1c>
}
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1f7c:	e6 e5       	ldi	r30, 0x56	; 86
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	84 ec       	ldi	r24, 0xC4	; 196
    1f82:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f84:	e6 e5       	ldi	r30, 0x56	; 86
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	88 23       	and	r24, r24
    1f8c:	dc f7       	brge	.-10     	; 0x1f84 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1f8e:	e3 e2       	ldi	r30, 0x23	; 35
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
}
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1fa2:	e6 e5       	ldi	r30, 0x56	; 86
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	84 e8       	ldi	r24, 0x84	; 132
    1fa8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1faa:	e6 e5       	ldi	r30, 0x56	; 86
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	88 23       	and	r24, r24
    1fb2:	dc f7       	brge	.-10     	; 0x1faa <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1fb4:	e3 e2       	ldi	r30, 0x23	; 35
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
}
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	0f 92       	push	r0
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1fca:	e1 e2       	ldi	r30, 0x21	; 33
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	88 7f       	andi	r24, 0xF8	; 248
    1fd2:	89 83       	std	Y+1, r24	; 0x01
	/* To get the specific action*/
    return status;
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(Uart_ConfigType * UartConfig)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <UART_init+0x6>
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <UART_init+0x8>
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	9c 83       	std	Y+4, r25	; 0x04
    1fec:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1fee:	1a 82       	std	Y+2, r1	; 0x02
    1ff0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1ff2:	eb e2       	ldi	r30, 0x2B	; 43
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	82 e0       	ldi	r24, 0x02	; 2
    1ff8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1ffa:	ea e2       	ldi	r30, 0x2A	; 42
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	88 e1       	ldi	r24, 0x18	; 24
    2000:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((UartConfig -> DataBits_Sel)<<1) | ((UartConfig -> StopBit_Sel)<<3) | ((UartConfig -> Parity_Sel)<<4);
    2002:	a0 e4       	ldi	r26, 0x40	; 64
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	eb 81       	ldd	r30, Y+3	; 0x03
    2008:	fc 81       	ldd	r31, Y+4	; 0x04
    200a:	86 81       	ldd	r24, Z+6	; 0x06
    200c:	88 2f       	mov	r24, r24
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	28 2f       	mov	r18, r24
    2016:	20 68       	ori	r18, 0x80	; 128
    2018:	eb 81       	ldd	r30, Y+3	; 0x03
    201a:	fc 81       	ldd	r31, Y+4	; 0x04
    201c:	85 81       	ldd	r24, Z+5	; 0x05
    201e:	88 2f       	mov	r24, r24
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	28 2b       	or	r18, r24
    2030:	eb 81       	ldd	r30, Y+3	; 0x03
    2032:	fc 81       	ldd	r31, Y+4	; 0x04
    2034:	84 81       	ldd	r24, Z+4	; 0x04
    2036:	88 2f       	mov	r24, r24
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	82 95       	swap	r24
    203c:	92 95       	swap	r25
    203e:	90 7f       	andi	r25, 0xF0	; 240
    2040:	98 27       	eor	r25, r24
    2042:	80 7f       	andi	r24, 0xF0	; 240
    2044:	98 27       	eor	r25, r24
    2046:	82 2b       	or	r24, r18
    2048:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (UartConfig -> Uart_BaudRate * 8UL))) - 1);
    204a:	eb 81       	ldd	r30, Y+3	; 0x03
    204c:	fc 81       	ldd	r31, Y+4	; 0x04
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	a2 81       	ldd	r26, Z+2	; 0x02
    2054:	b3 81       	ldd	r27, Z+3	; 0x03
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	aa 1f       	adc	r26, r26
    205c:	bb 1f       	adc	r27, r27
    205e:	88 0f       	add	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	aa 1f       	adc	r26, r26
    2064:	bb 1f       	adc	r27, r27
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	aa 1f       	adc	r26, r26
    206c:	bb 1f       	adc	r27, r27
    206e:	9c 01       	movw	r18, r24
    2070:	ad 01       	movw	r20, r26
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	92 e1       	ldi	r25, 0x12	; 18
    2076:	aa e7       	ldi	r26, 0x7A	; 122
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	0e 94 09 11 	call	0x2212	; 0x2212 <__udivmodsi4>
    2082:	da 01       	movw	r26, r20
    2084:	c9 01       	movw	r24, r18
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    208c:	e0 e4       	ldi	r30, 0x40	; 64
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	89 2f       	mov	r24, r25
    2096:	99 27       	eor	r25, r25
    2098:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    209a:	e9 e2       	ldi	r30, 0x29	; 41
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	80 83       	st	Z, r24
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	0f 92       	push	r0
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    20bc:	eb e2       	ldi	r30, 0x2B	; 43
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	80 72       	andi	r24, 0x20	; 32
    20c8:	90 70       	andi	r25, 0x00	; 0
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	b9 f3       	breq	.-18     	; 0x20bc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    20ce:	ec e2       	ldi	r30, 0x2C	; 44
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    20e6:	eb e2       	ldi	r30, 0x2B	; 43
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	88 23       	and	r24, r24
    20ee:	dc f7       	brge	.-10     	; 0x20e6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    20f0:	ec e2       	ldi	r30, 0x2C	; 44
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
}
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <UART_sendString+0x6>
    2102:	0f 92       	push	r0
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	9b 83       	std	Y+3, r25	; 0x03
    210a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    210c:	19 82       	std	Y+1, r1	; 0x01
    210e:	0e c0       	rjmp	.+28     	; 0x212c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	9b 81       	ldd	r25, Y+3	; 0x03
    211a:	fc 01       	movw	r30, r24
    211c:	e2 0f       	add	r30, r18
    211e:	f3 1f       	adc	r31, r19
    2120:	80 81       	ld	r24, Z
    2122:	0e 94 58 10 	call	0x20b0	; 0x20b0 <UART_sendByte>
		i++;
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	8f 5f       	subi	r24, 0xFF	; 255
    212a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	9b 81       	ldd	r25, Y+3	; 0x03
    2136:	fc 01       	movw	r30, r24
    2138:	e2 0f       	add	r30, r18
    213a:	f3 1f       	adc	r31, r19
    213c:	80 81       	ld	r24, Z
    213e:	88 23       	and	r24, r24
    2140:	39 f7       	brne	.-50     	; 0x2110 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	00 d0       	rcall	.+0      	; 0x2158 <UART_receiveString+0xa>
    2158:	0f 92       	push	r0
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	9b 83       	std	Y+3, r25	; 0x03
    2160:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2162:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	9b 81       	ldd	r25, Y+3	; 0x03
    216e:	8c 01       	movw	r16, r24
    2170:	02 0f       	add	r16, r18
    2172:	13 1f       	adc	r17, r19
    2174:	0e 94 6f 10 	call	0x20de	; 0x20de <UART_recieveByte>
    2178:	f8 01       	movw	r30, r16
    217a:	80 83       	st	Z, r24
    217c:	0f c0       	rjmp	.+30     	; 0x219c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	8f 5f       	subi	r24, 0xFF	; 255
    2182:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	9b 81       	ldd	r25, Y+3	; 0x03
    218e:	8c 01       	movw	r16, r24
    2190:	02 0f       	add	r16, r18
    2192:	13 1f       	adc	r17, r19
    2194:	0e 94 6f 10 	call	0x20de	; 0x20de <UART_recieveByte>
    2198:	f8 01       	movw	r30, r16
    219a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	9b 81       	ldd	r25, Y+3	; 0x03
    21a6:	fc 01       	movw	r30, r24
    21a8:	e2 0f       	add	r30, r18
    21aa:	f3 1f       	adc	r31, r19
    21ac:	80 81       	ld	r24, Z
    21ae:	83 32       	cpi	r24, 0x23	; 35
    21b0:	31 f7       	brne	.-52     	; 0x217e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	9b 81       	ldd	r25, Y+3	; 0x03
    21bc:	fc 01       	movw	r30, r24
    21be:	e2 0f       	add	r30, r18
    21c0:	f3 1f       	adc	r31, r19
    21c2:	10 82       	st	Z, r1
}
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	1f 91       	pop	r17
    21d0:	0f 91       	pop	r16
    21d2:	08 95       	ret

000021d4 <__mulsi3>:
    21d4:	62 9f       	mul	r22, r18
    21d6:	d0 01       	movw	r26, r0
    21d8:	73 9f       	mul	r23, r19
    21da:	f0 01       	movw	r30, r0
    21dc:	82 9f       	mul	r24, r18
    21de:	e0 0d       	add	r30, r0
    21e0:	f1 1d       	adc	r31, r1
    21e2:	64 9f       	mul	r22, r20
    21e4:	e0 0d       	add	r30, r0
    21e6:	f1 1d       	adc	r31, r1
    21e8:	92 9f       	mul	r25, r18
    21ea:	f0 0d       	add	r31, r0
    21ec:	83 9f       	mul	r24, r19
    21ee:	f0 0d       	add	r31, r0
    21f0:	74 9f       	mul	r23, r20
    21f2:	f0 0d       	add	r31, r0
    21f4:	65 9f       	mul	r22, r21
    21f6:	f0 0d       	add	r31, r0
    21f8:	99 27       	eor	r25, r25
    21fa:	72 9f       	mul	r23, r18
    21fc:	b0 0d       	add	r27, r0
    21fe:	e1 1d       	adc	r30, r1
    2200:	f9 1f       	adc	r31, r25
    2202:	63 9f       	mul	r22, r19
    2204:	b0 0d       	add	r27, r0
    2206:	e1 1d       	adc	r30, r1
    2208:	f9 1f       	adc	r31, r25
    220a:	bd 01       	movw	r22, r26
    220c:	cf 01       	movw	r24, r30
    220e:	11 24       	eor	r1, r1
    2210:	08 95       	ret

00002212 <__udivmodsi4>:
    2212:	a1 e2       	ldi	r26, 0x21	; 33
    2214:	1a 2e       	mov	r1, r26
    2216:	aa 1b       	sub	r26, r26
    2218:	bb 1b       	sub	r27, r27
    221a:	fd 01       	movw	r30, r26
    221c:	0d c0       	rjmp	.+26     	; 0x2238 <__udivmodsi4_ep>

0000221e <__udivmodsi4_loop>:
    221e:	aa 1f       	adc	r26, r26
    2220:	bb 1f       	adc	r27, r27
    2222:	ee 1f       	adc	r30, r30
    2224:	ff 1f       	adc	r31, r31
    2226:	a2 17       	cp	r26, r18
    2228:	b3 07       	cpc	r27, r19
    222a:	e4 07       	cpc	r30, r20
    222c:	f5 07       	cpc	r31, r21
    222e:	20 f0       	brcs	.+8      	; 0x2238 <__udivmodsi4_ep>
    2230:	a2 1b       	sub	r26, r18
    2232:	b3 0b       	sbc	r27, r19
    2234:	e4 0b       	sbc	r30, r20
    2236:	f5 0b       	sbc	r31, r21

00002238 <__udivmodsi4_ep>:
    2238:	66 1f       	adc	r22, r22
    223a:	77 1f       	adc	r23, r23
    223c:	88 1f       	adc	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	1a 94       	dec	r1
    2242:	69 f7       	brne	.-38     	; 0x221e <__udivmodsi4_loop>
    2244:	60 95       	com	r22
    2246:	70 95       	com	r23
    2248:	80 95       	com	r24
    224a:	90 95       	com	r25
    224c:	9b 01       	movw	r18, r22
    224e:	ac 01       	movw	r20, r24
    2250:	bd 01       	movw	r22, r26
    2252:	cf 01       	movw	r24, r30
    2254:	08 95       	ret

00002256 <__prologue_saves__>:
    2256:	2f 92       	push	r2
    2258:	3f 92       	push	r3
    225a:	4f 92       	push	r4
    225c:	5f 92       	push	r5
    225e:	6f 92       	push	r6
    2260:	7f 92       	push	r7
    2262:	8f 92       	push	r8
    2264:	9f 92       	push	r9
    2266:	af 92       	push	r10
    2268:	bf 92       	push	r11
    226a:	cf 92       	push	r12
    226c:	df 92       	push	r13
    226e:	ef 92       	push	r14
    2270:	ff 92       	push	r15
    2272:	0f 93       	push	r16
    2274:	1f 93       	push	r17
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	ca 1b       	sub	r28, r26
    2280:	db 0b       	sbc	r29, r27
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	09 94       	ijmp

0000228e <__epilogue_restores__>:
    228e:	2a 88       	ldd	r2, Y+18	; 0x12
    2290:	39 88       	ldd	r3, Y+17	; 0x11
    2292:	48 88       	ldd	r4, Y+16	; 0x10
    2294:	5f 84       	ldd	r5, Y+15	; 0x0f
    2296:	6e 84       	ldd	r6, Y+14	; 0x0e
    2298:	7d 84       	ldd	r7, Y+13	; 0x0d
    229a:	8c 84       	ldd	r8, Y+12	; 0x0c
    229c:	9b 84       	ldd	r9, Y+11	; 0x0b
    229e:	aa 84       	ldd	r10, Y+10	; 0x0a
    22a0:	b9 84       	ldd	r11, Y+9	; 0x09
    22a2:	c8 84       	ldd	r12, Y+8	; 0x08
    22a4:	df 80       	ldd	r13, Y+7	; 0x07
    22a6:	ee 80       	ldd	r14, Y+6	; 0x06
    22a8:	fd 80       	ldd	r15, Y+5	; 0x05
    22aa:	0c 81       	ldd	r16, Y+4	; 0x04
    22ac:	1b 81       	ldd	r17, Y+3	; 0x03
    22ae:	aa 81       	ldd	r26, Y+2	; 0x02
    22b0:	b9 81       	ldd	r27, Y+1	; 0x01
    22b2:	ce 0f       	add	r28, r30
    22b4:	d1 1d       	adc	r29, r1
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	ed 01       	movw	r28, r26
    22c2:	08 95       	ret

000022c4 <_exit>:
    22c4:	f8 94       	cli

000022c6 <__stop_program>:
    22c6:	ff cf       	rjmp	.-2      	; 0x22c6 <__stop_program>
