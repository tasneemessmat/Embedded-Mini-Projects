
hmi_ecu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fe4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000182  00800060  00003fe4  00004078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008001e2  008001e2  000041fa  2**0
                  ALLOC
  3 .stab         00003834  00000000  00000000  000041fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001299  00000000  00000000  00007a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000abc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000baad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c85c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cc49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d417  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7b 1d 	jmp	0x3af6	; 0x3af6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3e       	cpi	r26, 0xE2	; 226
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ee       	ldi	r26, 0xE2	; 226
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 f0 1f 	jmp	0x3fe0	; 0x3fe0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 1f 	jmp	0x3ee8	; 0x3ee8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ec       	ldi	r26, 0xC6	; 198
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 1f 	jmp	0x3f20	; 0x3f20 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 1f 	jmp	0x3ee8	; 0x3ee8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ec       	ldi	r24, 0xC6	; 198
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 1f 	jmp	0x3f20	; 0x3f20 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:




int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	cb 54       	subi	r28, 0x4B	; 75
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	/* Initialize Module */
	HMI_init();
     b60:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <HMI_init>
	LCD_displayString("Hi There !");
     b64:	80 e6       	ldi	r24, 0x60	; 96
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
     b6c:	fe 01       	movw	r30, r28
     b6e:	ed 5b       	subi	r30, 0xBD	; 189
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	aa e7       	ldi	r26, 0x7A	; 122
     b78:	b4 e4       	ldi	r27, 0x44	; 68
     b7a:	80 83       	st	Z, r24
     b7c:	91 83       	std	Z+1, r25	; 0x01
     b7e:	a2 83       	std	Z+2, r26	; 0x02
     b80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b82:	8e 01       	movw	r16, r28
     b84:	01 5c       	subi	r16, 0xC1	; 193
     b86:	1f 4f       	sbci	r17, 0xFF	; 255
     b88:	fe 01       	movw	r30, r28
     b8a:	ed 5b       	subi	r30, 0xBD	; 189
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	60 81       	ld	r22, Z
     b90:	71 81       	ldd	r23, Z+1	; 0x01
     b92:	82 81       	ldd	r24, Z+2	; 0x02
     b94:	93 81       	ldd	r25, Z+3	; 0x03
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	4a ef       	ldi	r20, 0xFA	; 250
     b9c:	54 e4       	ldi	r21, 0x44	; 68
     b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba2:	dc 01       	movw	r26, r24
     ba4:	cb 01       	movw	r24, r22
     ba6:	f8 01       	movw	r30, r16
     ba8:	80 83       	st	Z, r24
     baa:	91 83       	std	Z+1, r25	; 0x01
     bac:	a2 83       	std	Z+2, r26	; 0x02
     bae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bb0:	fe 01       	movw	r30, r28
     bb2:	ff 96       	adiw	r30, 0x3f	; 63
     bb4:	60 81       	ld	r22, Z
     bb6:	71 81       	ldd	r23, Z+1	; 0x01
     bb8:	82 81       	ldd	r24, Z+2	; 0x02
     bba:	93 81       	ldd	r25, Z+3	; 0x03
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e8       	ldi	r20, 0x80	; 128
     bc2:	5f e3       	ldi	r21, 0x3F	; 63
     bc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc8:	88 23       	and	r24, r24
     bca:	2c f4       	brge	.+10     	; 0xbd6 <main+0x90>
		__ticks = 1;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	9e af       	std	Y+62, r25	; 0x3e
     bd2:	8d af       	std	Y+61, r24	; 0x3d
     bd4:	46 c0       	rjmp	.+140    	; 0xc62 <main+0x11c>
	else if (__tmp > 65535)
     bd6:	fe 01       	movw	r30, r28
     bd8:	ff 96       	adiw	r30, 0x3f	; 63
     bda:	60 81       	ld	r22, Z
     bdc:	71 81       	ldd	r23, Z+1	; 0x01
     bde:	82 81       	ldd	r24, Z+2	; 0x02
     be0:	93 81       	ldd	r25, Z+3	; 0x03
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	3f ef       	ldi	r19, 0xFF	; 255
     be6:	4f e7       	ldi	r20, 0x7F	; 127
     be8:	57 e4       	ldi	r21, 0x47	; 71
     bea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bee:	18 16       	cp	r1, r24
     bf0:	64 f5       	brge	.+88     	; 0xc4a <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf2:	fe 01       	movw	r30, r28
     bf4:	ed 5b       	subi	r30, 0xBD	; 189
     bf6:	ff 4f       	sbci	r31, 0xFF	; 255
     bf8:	60 81       	ld	r22, Z
     bfa:	71 81       	ldd	r23, Z+1	; 0x01
     bfc:	82 81       	ldd	r24, Z+2	; 0x02
     bfe:	93 81       	ldd	r25, Z+3	; 0x03
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e2       	ldi	r20, 0x20	; 32
     c06:	51 e4       	ldi	r21, 0x41	; 65
     c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	9e af       	std	Y+62, r25	; 0x3e
     c1e:	8d af       	std	Y+61, r24	; 0x3d
     c20:	0f c0       	rjmp	.+30     	; 0xc40 <main+0xfa>
     c22:	88 ec       	ldi	r24, 0xC8	; 200
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9c af       	std	Y+60, r25	; 0x3c
     c28:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2a:	8b ad       	ldd	r24, Y+59	; 0x3b
     c2c:	9c ad       	ldd	r25, Y+60	; 0x3c
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <main+0xe8>
     c32:	9c af       	std	Y+60, r25	; 0x3c
     c34:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c36:	8d ad       	ldd	r24, Y+61	; 0x3d
     c38:	9e ad       	ldd	r25, Y+62	; 0x3e
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	9e af       	std	Y+62, r25	; 0x3e
     c3e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c40:	8d ad       	ldd	r24, Y+61	; 0x3d
     c42:	9e ad       	ldd	r25, Y+62	; 0x3e
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	69 f7       	brne	.-38     	; 0xc22 <main+0xdc>
     c48:	16 c0       	rjmp	.+44     	; 0xc76 <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4a:	fe 01       	movw	r30, r28
     c4c:	ff 96       	adiw	r30, 0x3f	; 63
     c4e:	60 81       	ld	r22, Z
     c50:	71 81       	ldd	r23, Z+1	; 0x01
     c52:	82 81       	ldd	r24, Z+2	; 0x02
     c54:	93 81       	ldd	r25, Z+3	; 0x03
     c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5a:	dc 01       	movw	r26, r24
     c5c:	cb 01       	movw	r24, r22
     c5e:	9e af       	std	Y+62, r25	; 0x3e
     c60:	8d af       	std	Y+61, r24	; 0x3d
     c62:	8d ad       	ldd	r24, Y+61	; 0x3d
     c64:	9e ad       	ldd	r25, Y+62	; 0x3e
     c66:	9a af       	std	Y+58, r25	; 0x3a
     c68:	89 af       	std	Y+57, r24	; 0x39
     c6a:	89 ad       	ldd	r24, Y+57	; 0x39
     c6c:	9a ad       	ldd	r25, Y+58	; 0x3a
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <main+0x128>
     c72:	9a af       	std	Y+58, r25	; 0x3a
     c74:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);

	HMI_createPassword_changePassword();
     c76:	0e 94 34 0a 	call	0x1468	; 0x1468 <HMI_createPassword_changePassword>

while(1)
{
	/* Display Main System */
	LCD_clearScreen();
     c7a:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
     c7e:	8b e6       	ldi	r24, 0x6B	; 107
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
	LCD_moveCursor(1, 0);
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
     c8e:	89 e7       	ldi	r24, 0x79	; 121
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
	/******************************************/

	/* Now get an option from user */
	key = KEYPAD_getPressedKey();
     c96:	0e 94 09 12 	call	0x2412	; 0x2412 <KEYPAD_getPressedKey>
     c9a:	fe 01       	movw	r30, r28
     c9c:	e5 5b       	subi	r30, 0xB5	; 181
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	80 83       	st	Z, r24
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	aa ef       	ldi	r26, 0xFA	; 250
     ca8:	b3 e4       	ldi	r27, 0x43	; 67
     caa:	8d ab       	std	Y+53, r24	; 0x35
     cac:	9e ab       	std	Y+54, r25	; 0x36
     cae:	af ab       	std	Y+55, r26	; 0x37
     cb0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb2:	6d a9       	ldd	r22, Y+53	; 0x35
     cb4:	7e a9       	ldd	r23, Y+54	; 0x36
     cb6:	8f a9       	ldd	r24, Y+55	; 0x37
     cb8:	98 ad       	ldd	r25, Y+56	; 0x38
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	4a ef       	ldi	r20, 0xFA	; 250
     cc0:	54 e4       	ldi	r21, 0x44	; 68
     cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	89 ab       	std	Y+49, r24	; 0x31
     ccc:	9a ab       	std	Y+50, r25	; 0x32
     cce:	ab ab       	std	Y+51, r26	; 0x33
     cd0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cd2:	69 a9       	ldd	r22, Y+49	; 0x31
     cd4:	7a a9       	ldd	r23, Y+50	; 0x32
     cd6:	8b a9       	ldd	r24, Y+51	; 0x33
     cd8:	9c a9       	ldd	r25, Y+52	; 0x34
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e8       	ldi	r20, 0x80	; 128
     ce0:	5f e3       	ldi	r21, 0x3F	; 63
     ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ce6:	88 23       	and	r24, r24
     ce8:	2c f4       	brge	.+10     	; 0xcf4 <main+0x1ae>
		__ticks = 1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	98 ab       	std	Y+48, r25	; 0x30
     cf0:	8f a7       	std	Y+47, r24	; 0x2f
     cf2:	3f c0       	rjmp	.+126    	; 0xd72 <main+0x22c>
	else if (__tmp > 65535)
     cf4:	69 a9       	ldd	r22, Y+49	; 0x31
     cf6:	7a a9       	ldd	r23, Y+50	; 0x32
     cf8:	8b a9       	ldd	r24, Y+51	; 0x33
     cfa:	9c a9       	ldd	r25, Y+52	; 0x34
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	3f ef       	ldi	r19, 0xFF	; 255
     d00:	4f e7       	ldi	r20, 0x7F	; 127
     d02:	57 e4       	ldi	r21, 0x47	; 71
     d04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d08:	18 16       	cp	r1, r24
     d0a:	4c f5       	brge	.+82     	; 0xd5e <main+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0c:	6d a9       	ldd	r22, Y+53	; 0x35
     d0e:	7e a9       	ldd	r23, Y+54	; 0x36
     d10:	8f a9       	ldd	r24, Y+55	; 0x37
     d12:	98 ad       	ldd	r25, Y+56	; 0x38
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e2       	ldi	r20, 0x20	; 32
     d1a:	51 e4       	ldi	r21, 0x41	; 65
     d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	98 ab       	std	Y+48, r25	; 0x30
     d32:	8f a7       	std	Y+47, r24	; 0x2f
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <main+0x20e>
     d36:	88 ec       	ldi	r24, 0xC8	; 200
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9e a7       	std	Y+46, r25	; 0x2e
     d3c:	8d a7       	std	Y+45, r24	; 0x2d
     d3e:	8d a5       	ldd	r24, Y+45	; 0x2d
     d40:	9e a5       	ldd	r25, Y+46	; 0x2e
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	f1 f7       	brne	.-4      	; 0xd42 <main+0x1fc>
     d46:	9e a7       	std	Y+46, r25	; 0x2e
     d48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4a:	8f a5       	ldd	r24, Y+47	; 0x2f
     d4c:	98 a9       	ldd	r25, Y+48	; 0x30
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	98 ab       	std	Y+48, r25	; 0x30
     d52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d54:	8f a5       	ldd	r24, Y+47	; 0x2f
     d56:	98 a9       	ldd	r25, Y+48	; 0x30
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	69 f7       	brne	.-38     	; 0xd36 <main+0x1f0>
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <main+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5e:	69 a9       	ldd	r22, Y+49	; 0x31
     d60:	7a a9       	ldd	r23, Y+50	; 0x32
     d62:	8b a9       	ldd	r24, Y+51	; 0x33
     d64:	9c a9       	ldd	r25, Y+52	; 0x34
     d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	98 ab       	std	Y+48, r25	; 0x30
     d70:	8f a7       	std	Y+47, r24	; 0x2f
     d72:	8f a5       	ldd	r24, Y+47	; 0x2f
     d74:	98 a9       	ldd	r25, Y+48	; 0x30
     d76:	9c a7       	std	Y+44, r25	; 0x2c
     d78:	8b a7       	std	Y+43, r24	; 0x2b
     d7a:	8b a5       	ldd	r24, Y+43	; 0x2b
     d7c:	9c a5       	ldd	r25, Y+44	; 0x2c
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <main+0x238>
     d82:	9c a7       	std	Y+44, r25	; 0x2c
     d84:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500); /* Press time */

	/*Send The required key for control ecu */
	UART_sendByte(HMI_ECU_READY);
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <UART_sendByte>
	while(UART_recieveByte() != CONTROL_ECU_READY);
     d8c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <UART_recieveByte>
     d90:	83 30       	cpi	r24, 0x03	; 3
     d92:	e1 f7       	brne	.-8      	; 0xd8c <main+0x246>
	UART_sendByte(key);
     d94:	fe 01       	movw	r30, r28
     d96:	e5 5b       	subi	r30, 0xB5	; 181
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	80 81       	ld	r24, Z
     d9c:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <UART_sendByte>
	/******************************************/


	if (key == '+'){
     da0:	fe 01       	movw	r30, r28
     da2:	e5 5b       	subi	r30, 0xB5	; 181
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	80 81       	ld	r24, Z
     da8:	8b 32       	cpi	r24, 0x2B	; 43
     daa:	09 f0       	breq	.+2      	; 0xdae <main+0x268>
     dac:	37 c1       	rjmp	.+622    	; 0x101c <main+0x4d6>
		for(int i=0;i<5;i++){
     dae:	fe 01       	movw	r30, r28
     db0:	e7 5b       	subi	r30, 0xB7	; 183
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	11 82       	std	Z+1, r1	; 0x01
     db6:	10 82       	st	Z, r1
     db8:	16 c0       	rjmp	.+44     	; 0xde6 <main+0x2a0>
			password[i] ='2';
     dba:	fe 01       	movw	r30, r28
     dbc:	e7 5b       	subi	r30, 0xB7	; 183
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	80 81       	ld	r24, Z
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	fc 01       	movw	r30, r24
     dc6:	e9 51       	subi	r30, 0x19	; 25
     dc8:	fe 4f       	sbci	r31, 0xFE	; 254
     dca:	82 e3       	ldi	r24, 0x32	; 50
     dcc:	80 83       	st	Z, r24
	UART_sendByte(key);
	/******************************************/


	if (key == '+'){
		for(int i=0;i<5;i++){
     dce:	de 01       	movw	r26, r28
     dd0:	a7 5b       	subi	r26, 0xB7	; 183
     dd2:	bf 4f       	sbci	r27, 0xFF	; 255
     dd4:	fe 01       	movw	r30, r28
     dd6:	e7 5b       	subi	r30, 0xB7	; 183
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	9c 93       	st	X, r25
     de4:	8e 93       	st	-X, r24
     de6:	fe 01       	movw	r30, r28
     de8:	e7 5b       	subi	r30, 0xB7	; 183
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	85 30       	cpi	r24, 0x05	; 5
     df2:	91 05       	cpc	r25, r1
     df4:	14 f3       	brlt	.-60     	; 0xdba <main+0x274>
		}
//		LCD_clearScreen();
//		/*get password from user */
//		LCD_displayString("Please Enter Password: ");
//		HMI_writePassword(password);
	HMI_sendPassword(password);
     df6:	87 ee       	ldi	r24, 0xE7	; 231
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	0e 94 1c 09 	call	0x1238	; 0x1238 <HMI_sendPassword>
//		/*wait to see if it matched the one saved or not*/
	HMI_waitResponse(&Password_status);
     dfe:	84 ee       	ldi	r24, 0xE4	; 228
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	0e 94 49 09 	call	0x1292	; 0x1292 <HMI_waitResponse>
		/******************************************/

		if (Password_status == MATCHED_PASSWORDS){
     e06:	80 91 e4 01 	lds	r24, 0x01E4
     e0a:	86 30       	cpi	r24, 0x06	; 6
     e0c:	09 f0       	breq	.+2      	; 0xe10 <main+0x2ca>
     e0e:	7b c0       	rjmp	.+246    	; 0xf06 <main+0x3c0>
			LCD_clearScreen();
     e10:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
			LCD_displayString("Valid Password :)");
     e14:	89 e8       	ldi	r24, 0x89	; 137
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	aa ef       	ldi	r26, 0xFA	; 250
     e22:	b3 e4       	ldi	r27, 0x43	; 67
     e24:	8f a3       	std	Y+39, r24	; 0x27
     e26:	98 a7       	std	Y+40, r25	; 0x28
     e28:	a9 a7       	std	Y+41, r26	; 0x29
     e2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e2c:	6f a1       	ldd	r22, Y+39	; 0x27
     e2e:	78 a5       	ldd	r23, Y+40	; 0x28
     e30:	89 a5       	ldd	r24, Y+41	; 0x29
     e32:	9a a5       	ldd	r25, Y+42	; 0x2a
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	4a ef       	ldi	r20, 0xFA	; 250
     e3a:	54 e4       	ldi	r21, 0x44	; 68
     e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	8b a3       	std	Y+35, r24	; 0x23
     e46:	9c a3       	std	Y+36, r25	; 0x24
     e48:	ad a3       	std	Y+37, r26	; 0x25
     e4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e4c:	6b a1       	ldd	r22, Y+35	; 0x23
     e4e:	7c a1       	ldd	r23, Y+36	; 0x24
     e50:	8d a1       	ldd	r24, Y+37	; 0x25
     e52:	9e a1       	ldd	r25, Y+38	; 0x26
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e8       	ldi	r20, 0x80	; 128
     e5a:	5f e3       	ldi	r21, 0x3F	; 63
     e5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e60:	88 23       	and	r24, r24
     e62:	2c f4       	brge	.+10     	; 0xe6e <main+0x328>
		__ticks = 1;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	9a a3       	std	Y+34, r25	; 0x22
     e6a:	89 a3       	std	Y+33, r24	; 0x21
     e6c:	3f c0       	rjmp	.+126    	; 0xeec <main+0x3a6>
	else if (__tmp > 65535)
     e6e:	6b a1       	ldd	r22, Y+35	; 0x23
     e70:	7c a1       	ldd	r23, Y+36	; 0x24
     e72:	8d a1       	ldd	r24, Y+37	; 0x25
     e74:	9e a1       	ldd	r25, Y+38	; 0x26
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	3f ef       	ldi	r19, 0xFF	; 255
     e7a:	4f e7       	ldi	r20, 0x7F	; 127
     e7c:	57 e4       	ldi	r21, 0x47	; 71
     e7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e82:	18 16       	cp	r1, r24
     e84:	4c f5       	brge	.+82     	; 0xed8 <main+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e86:	6f a1       	ldd	r22, Y+39	; 0x27
     e88:	78 a5       	ldd	r23, Y+40	; 0x28
     e8a:	89 a5       	ldd	r24, Y+41	; 0x29
     e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e2       	ldi	r20, 0x20	; 32
     e94:	51 e4       	ldi	r21, 0x41	; 65
     e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	bc 01       	movw	r22, r24
     ea0:	cd 01       	movw	r24, r26
     ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	9a a3       	std	Y+34, r25	; 0x22
     eac:	89 a3       	std	Y+33, r24	; 0x21
     eae:	0f c0       	rjmp	.+30     	; 0xece <main+0x388>
     eb0:	88 ec       	ldi	r24, 0xC8	; 200
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	98 a3       	std	Y+32, r25	; 0x20
     eb6:	8f 8f       	std	Y+31, r24	; 0x1f
     eb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eba:	98 a1       	ldd	r25, Y+32	; 0x20
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <main+0x376>
     ec0:	98 a3       	std	Y+32, r25	; 0x20
     ec2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec4:	89 a1       	ldd	r24, Y+33	; 0x21
     ec6:	9a a1       	ldd	r25, Y+34	; 0x22
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	9a a3       	std	Y+34, r25	; 0x22
     ecc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ece:	89 a1       	ldd	r24, Y+33	; 0x21
     ed0:	9a a1       	ldd	r25, Y+34	; 0x22
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	69 f7       	brne	.-38     	; 0xeb0 <main+0x36a>
     ed6:	14 c0       	rjmp	.+40     	; 0xf00 <main+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed8:	6b a1       	ldd	r22, Y+35	; 0x23
     eda:	7c a1       	ldd	r23, Y+36	; 0x24
     edc:	8d a1       	ldd	r24, Y+37	; 0x25
     ede:	9e a1       	ldd	r25, Y+38	; 0x26
     ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	9a a3       	std	Y+34, r25	; 0x22
     eea:	89 a3       	std	Y+33, r24	; 0x21
     eec:	89 a1       	ldd	r24, Y+33	; 0x21
     eee:	9a a1       	ldd	r25, Y+34	; 0x22
     ef0:	9e 8f       	std	Y+30, r25	; 0x1e
     ef2:	8d 8f       	std	Y+29, r24	; 0x1d
     ef4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ef6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <main+0x3b2>
     efc:	9e 8f       	std	Y+30, r25	; 0x1e
     efe:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			/*Now open the door*/
			HMI_openDoor();
     f00:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <HMI_openDoor>
     f04:	ba ce       	rjmp	.-652    	; 0xc7a <main+0x134>
		}
		else if(Password_status == UNMATCHED_PASSWORDS){
     f06:	80 91 e4 01 	lds	r24, 0x01E4
     f0a:	85 30       	cpi	r24, 0x05	; 5
     f0c:	09 f0       	breq	.+2      	; 0xf10 <main+0x3ca>
     f0e:	b5 ce       	rjmp	.-662    	; 0xc7a <main+0x134>
			LCD_clearScreen();
     f10:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
			LCD_displayString("Invalid Password!");
     f14:	8b e9       	ldi	r24, 0x9B	; 155
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	aa ef       	ldi	r26, 0xFA	; 250
     f22:	b3 e4       	ldi	r27, 0x43	; 67
     f24:	89 8f       	std	Y+25, r24	; 0x19
     f26:	9a 8f       	std	Y+26, r25	; 0x1a
     f28:	ab 8f       	std	Y+27, r26	; 0x1b
     f2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2c:	69 8d       	ldd	r22, Y+25	; 0x19
     f2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f30:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f32:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4a ef       	ldi	r20, 0xFA	; 250
     f3a:	54 e4       	ldi	r21, 0x44	; 68
     f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8d 8b       	std	Y+21, r24	; 0x15
     f46:	9e 8b       	std	Y+22, r25	; 0x16
     f48:	af 8b       	std	Y+23, r26	; 0x17
     f4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f4c:	6d 89       	ldd	r22, Y+21	; 0x15
     f4e:	7e 89       	ldd	r23, Y+22	; 0x16
     f50:	8f 89       	ldd	r24, Y+23	; 0x17
     f52:	98 8d       	ldd	r25, Y+24	; 0x18
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f60:	88 23       	and	r24, r24
     f62:	2c f4       	brge	.+10     	; 0xf6e <main+0x428>
		__ticks = 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9c 8b       	std	Y+20, r25	; 0x14
     f6a:	8b 8b       	std	Y+19, r24	; 0x13
     f6c:	3f c0       	rjmp	.+126    	; 0xfec <main+0x4a6>
	else if (__tmp > 65535)
     f6e:	6d 89       	ldd	r22, Y+21	; 0x15
     f70:	7e 89       	ldd	r23, Y+22	; 0x16
     f72:	8f 89       	ldd	r24, Y+23	; 0x17
     f74:	98 8d       	ldd	r25, Y+24	; 0x18
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	3f ef       	ldi	r19, 0xFF	; 255
     f7a:	4f e7       	ldi	r20, 0x7F	; 127
     f7c:	57 e4       	ldi	r21, 0x47	; 71
     f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f82:	18 16       	cp	r1, r24
     f84:	4c f5       	brge	.+82     	; 0xfd8 <main+0x492>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f86:	69 8d       	ldd	r22, Y+25	; 0x19
     f88:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e2       	ldi	r20, 0x20	; 32
     f94:	51 e4       	ldi	r21, 0x41	; 65
     f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	9c 8b       	std	Y+20, r25	; 0x14
     fac:	8b 8b       	std	Y+19, r24	; 0x13
     fae:	0f c0       	rjmp	.+30     	; 0xfce <main+0x488>
     fb0:	88 ec       	ldi	r24, 0xC8	; 200
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9a 8b       	std	Y+18, r25	; 0x12
     fb6:	89 8b       	std	Y+17, r24	; 0x11
     fb8:	89 89       	ldd	r24, Y+17	; 0x11
     fba:	9a 89       	ldd	r25, Y+18	; 0x12
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <main+0x476>
     fc0:	9a 8b       	std	Y+18, r25	; 0x12
     fc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc4:	8b 89       	ldd	r24, Y+19	; 0x13
     fc6:	9c 89       	ldd	r25, Y+20	; 0x14
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	9c 8b       	std	Y+20, r25	; 0x14
     fcc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fce:	8b 89       	ldd	r24, Y+19	; 0x13
     fd0:	9c 89       	ldd	r25, Y+20	; 0x14
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	69 f7       	brne	.-38     	; 0xfb0 <main+0x46a>
     fd6:	14 c0       	rjmp	.+40     	; 0x1000 <main+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd8:	6d 89       	ldd	r22, Y+21	; 0x15
     fda:	7e 89       	ldd	r23, Y+22	; 0x16
     fdc:	8f 89       	ldd	r24, Y+23	; 0x17
     fde:	98 8d       	ldd	r25, Y+24	; 0x18
     fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	9c 8b       	std	Y+20, r25	; 0x14
     fea:	8b 8b       	std	Y+19, r24	; 0x13
     fec:	8b 89       	ldd	r24, Y+19	; 0x13
     fee:	9c 89       	ldd	r25, Y+20	; 0x14
     ff0:	98 8b       	std	Y+16, r25	; 0x10
     ff2:	8f 87       	std	Y+15, r24	; 0x0f
     ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff6:	98 89       	ldd	r25, Y+16	; 0x10
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <main+0x4b2>
     ffc:	98 8b       	std	Y+16, r25	; 0x10
     ffe:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);

			Password_status = HMI_handlingUnmatchedPasswords();
    1000:	0e 94 40 0c 	call	0x1880	; 0x1880 <HMI_handlingUnmatchedPasswords>
    1004:	80 93 e4 01 	sts	0x01E4, r24

			if(Password_status == MATCHED_PASSWORDS){
    1008:	80 91 e4 01 	lds	r24, 0x01E4
    100c:	86 30       	cpi	r24, 0x06	; 6
    100e:	19 f4       	brne	.+6      	; 0x1016 <main+0x4d0>
				/*Now open the door*/
				HMI_openDoor();
    1010:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <HMI_openDoor>
    1014:	32 ce       	rjmp	.-924    	; 0xc7a <main+0x134>
			}
			else {

				HMI_lock();
    1016:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <HMI_lock>
    101a:	2f ce       	rjmp	.-930    	; 0xc7a <main+0x134>

		}


	}
	else if (key == '-'){
    101c:	fe 01       	movw	r30, r28
    101e:	e5 5b       	subi	r30, 0xB5	; 181
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	80 81       	ld	r24, Z
    1024:	8d 32       	cpi	r24, 0x2D	; 45
    1026:	09 f0       	breq	.+2      	; 0x102a <main+0x4e4>
    1028:	28 ce       	rjmp	.-944    	; 0xc7a <main+0x134>

		for(int i=0;i<5;i++){
    102a:	fe 01       	movw	r30, r28
    102c:	e9 5b       	subi	r30, 0xB9	; 185
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	11 82       	std	Z+1, r1	; 0x01
    1032:	10 82       	st	Z, r1
    1034:	16 c0       	rjmp	.+44     	; 0x1062 <main+0x51c>
			password[i]='9';
    1036:	fe 01       	movw	r30, r28
    1038:	e9 5b       	subi	r30, 0xB9	; 185
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	80 81       	ld	r24, Z
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	fc 01       	movw	r30, r24
    1042:	e9 51       	subi	r30, 0x19	; 25
    1044:	fe 4f       	sbci	r31, 0xFE	; 254
    1046:	89 e3       	ldi	r24, 0x39	; 57
    1048:	80 83       	st	Z, r24


	}
	else if (key == '-'){

		for(int i=0;i<5;i++){
    104a:	de 01       	movw	r26, r28
    104c:	a9 5b       	subi	r26, 0xB9	; 185
    104e:	bf 4f       	sbci	r27, 0xFF	; 255
    1050:	fe 01       	movw	r30, r28
    1052:	e9 5b       	subi	r30, 0xB9	; 185
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	80 81       	ld	r24, Z
    1058:	91 81       	ldd	r25, Z+1	; 0x01
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	11 96       	adiw	r26, 0x01	; 1
    105e:	9c 93       	st	X, r25
    1060:	8e 93       	st	-X, r24
    1062:	fe 01       	movw	r30, r28
    1064:	e9 5b       	subi	r30, 0xB9	; 185
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	85 30       	cpi	r24, 0x05	; 5
    106e:	91 05       	cpc	r25, r1
    1070:	14 f3       	brlt	.-60     	; 0x1036 <main+0x4f0>
		}
//		LCD_clearScreen();
//		/*get password from user */
//		LCD_displayString("Please Enter Password: ");
//		HMI_writePassword(password);
		HMI_sendPassword(password);
    1072:	87 ee       	ldi	r24, 0xE7	; 231
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	0e 94 1c 09 	call	0x1238	; 0x1238 <HMI_sendPassword>
		/*wait to see if it matched the one saved or not*/
		HMI_waitResponse(&Password_status);
    107a:	84 ee       	ldi	r24, 0xE4	; 228
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	0e 94 49 09 	call	0x1292	; 0x1292 <HMI_waitResponse>

		if(Password_status == MATCHED_PASSWORDS){
    1082:	80 91 e4 01 	lds	r24, 0x01E4
    1086:	86 30       	cpi	r24, 0x06	; 6
    1088:	41 f4       	brne	.+16     	; 0x109a <main+0x554>
			LCD_clearScreen();
    108a:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
			LCD_displayString("Valid Password :)");
    108e:	89 e8       	ldi	r24, 0x89	; 137
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
			HMI_createPassword_changePassword();
    1096:	0e 94 34 0a 	call	0x1468	; 0x1468 <HMI_createPassword_changePassword>

		}
		if(Password_status == UNMATCHED_PASSWORDS){
    109a:	80 91 e4 01 	lds	r24, 0x01E4
    109e:	85 30       	cpi	r24, 0x05	; 5
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <main+0x55e>
    10a2:	eb cd       	rjmp	.-1066   	; 0xc7a <main+0x134>
			LCD_clearScreen();
    10a4:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
			LCD_displayString("Invalid Password!");
    10a8:	8b e9       	ldi	r24, 0x9B	; 155
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	aa ef       	ldi	r26, 0xFA	; 250
    10b6:	b3 e4       	ldi	r27, 0x43	; 67
    10b8:	8b 87       	std	Y+11, r24	; 0x0b
    10ba:	9c 87       	std	Y+12, r25	; 0x0c
    10bc:	ad 87       	std	Y+13, r26	; 0x0d
    10be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	4a ef       	ldi	r20, 0xFA	; 250
    10ce:	54 e4       	ldi	r21, 0x44	; 68
    10d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	8f 83       	std	Y+7, r24	; 0x07
    10da:	98 87       	std	Y+8, r25	; 0x08
    10dc:	a9 87       	std	Y+9, r26	; 0x09
    10de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e0:	6f 81       	ldd	r22, Y+7	; 0x07
    10e2:	78 85       	ldd	r23, Y+8	; 0x08
    10e4:	89 85       	ldd	r24, Y+9	; 0x09
    10e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e8       	ldi	r20, 0x80	; 128
    10ee:	5f e3       	ldi	r21, 0x3F	; 63
    10f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	2c f4       	brge	.+10     	; 0x1102 <main+0x5bc>
		__ticks = 1;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	9e 83       	std	Y+6, r25	; 0x06
    10fe:	8d 83       	std	Y+5, r24	; 0x05
    1100:	3f c0       	rjmp	.+126    	; 0x1180 <main+0x63a>
	else if (__tmp > 65535)
    1102:	6f 81       	ldd	r22, Y+7	; 0x07
    1104:	78 85       	ldd	r23, Y+8	; 0x08
    1106:	89 85       	ldd	r24, Y+9	; 0x09
    1108:	9a 85       	ldd	r25, Y+10	; 0x0a
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	3f ef       	ldi	r19, 0xFF	; 255
    110e:	4f e7       	ldi	r20, 0x7F	; 127
    1110:	57 e4       	ldi	r21, 0x47	; 71
    1112:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1116:	18 16       	cp	r1, r24
    1118:	4c f5       	brge	.+82     	; 0x116c <main+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111a:	6b 85       	ldd	r22, Y+11	; 0x0b
    111c:	7c 85       	ldd	r23, Y+12	; 0x0c
    111e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1120:	9e 85       	ldd	r25, Y+14	; 0x0e
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e2       	ldi	r20, 0x20	; 32
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	bc 01       	movw	r22, r24
    1134:	cd 01       	movw	r24, r26
    1136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	9e 83       	std	Y+6, r25	; 0x06
    1140:	8d 83       	std	Y+5, r24	; 0x05
    1142:	0f c0       	rjmp	.+30     	; 0x1162 <main+0x61c>
    1144:	88 ec       	ldi	r24, 0xC8	; 200
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9c 83       	std	Y+4, r25	; 0x04
    114a:	8b 83       	std	Y+3, r24	; 0x03
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	9c 81       	ldd	r25, Y+4	; 0x04
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <main+0x60a>
    1154:	9c 83       	std	Y+4, r25	; 0x04
    1156:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	9e 83       	std	Y+6, r25	; 0x06
    1160:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1162:	8d 81       	ldd	r24, Y+5	; 0x05
    1164:	9e 81       	ldd	r25, Y+6	; 0x06
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	69 f7       	brne	.-38     	; 0x1144 <main+0x5fe>
    116a:	14 c0       	rjmp	.+40     	; 0x1194 <main+0x64e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116c:	6f 81       	ldd	r22, Y+7	; 0x07
    116e:	78 85       	ldd	r23, Y+8	; 0x08
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	9a 85       	ldd	r25, Y+10	; 0x0a
    1174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	9e 83       	std	Y+6, r25	; 0x06
    117e:	8d 83       	std	Y+5, r24	; 0x05
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	9a 83       	std	Y+2, r25	; 0x02
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	9a 81       	ldd	r25, Y+2	; 0x02
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	f1 f7       	brne	.-4      	; 0x118c <main+0x646>
    1190:	9a 83       	std	Y+2, r25	; 0x02
    1192:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);

			Password_status = HMI_handlingUnmatchedPasswords();
    1194:	0e 94 40 0c 	call	0x1880	; 0x1880 <HMI_handlingUnmatchedPasswords>
    1198:	80 93 e4 01 	sts	0x01E4, r24

			if(Password_status == MATCHED_PASSWORDS){
    119c:	80 91 e4 01 	lds	r24, 0x01E4
    11a0:	86 30       	cpi	r24, 0x06	; 6
    11a2:	19 f4       	brne	.+6      	; 0x11aa <main+0x664>
				HMI_createPassword_changePassword();
    11a4:	0e 94 34 0a 	call	0x1468	; 0x1468 <HMI_createPassword_changePassword>
    11a8:	68 cd       	rjmp	.-1328   	; 0xc7a <main+0x134>
			}
			else {
				HMI_lock();
    11aa:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <HMI_lock>
    11ae:	65 cd       	rjmp	.-1334   	; 0xc7a <main+0x134>

000011b0 <HMI_init>:
uint8 ConfirmPassword [6] ;
uint8 Password_status =0;


void HMI_init(void)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	2c 97       	sbiw	r28, 0x0c	; 12
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
	/* Initialize the LCD */
	LCD_init();
    11c4:	0e 94 18 13 	call	0x2630	; 0x2630 <LCD_init>

	/* Initialize The UART */
	Uart_ConfigType UARTConfig = {9600, Disabled, OneBit, EightBits};
    11c8:	ce 01       	movw	r24, r28
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	99 87       	std	Y+9, r25	; 0x09
    11ce:	88 87       	std	Y+8, r24	; 0x08
    11d0:	ee ec       	ldi	r30, 0xCE	; 206
    11d2:	f1 e0       	ldi	r31, 0x01	; 1
    11d4:	fb 87       	std	Y+11, r31	; 0x0b
    11d6:	ea 87       	std	Y+10, r30	; 0x0a
    11d8:	f7 e0       	ldi	r31, 0x07	; 7
    11da:	fc 87       	std	Y+12, r31	; 0x0c
    11dc:	ea 85       	ldd	r30, Y+10	; 0x0a
    11de:	fb 85       	ldd	r31, Y+11	; 0x0b
    11e0:	00 80       	ld	r0, Z
    11e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    11e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	9b 87       	std	Y+11, r25	; 0x0b
    11ea:	8a 87       	std	Y+10, r24	; 0x0a
    11ec:	e8 85       	ldd	r30, Y+8	; 0x08
    11ee:	f9 85       	ldd	r31, Y+9	; 0x09
    11f0:	00 82       	st	Z, r0
    11f2:	88 85       	ldd	r24, Y+8	; 0x08
    11f4:	99 85       	ldd	r25, Y+9	; 0x09
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	99 87       	std	Y+9, r25	; 0x09
    11fa:	88 87       	std	Y+8, r24	; 0x08
    11fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    11fe:	91 50       	subi	r25, 0x01	; 1
    1200:	9c 87       	std	Y+12, r25	; 0x0c
    1202:	ec 85       	ldd	r30, Y+12	; 0x0c
    1204:	ee 23       	and	r30, r30
    1206:	51 f7       	brne	.-44     	; 0x11dc <HMI_init+0x2c>
	UART_init(&UARTConfig);
    1208:	ce 01       	movw	r24, r28
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	0e 94 57 1e 	call	0x3cae	; 0x3cae <UART_init>

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    1210:	af e5       	ldi	r26, 0x5F	; 95
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ef e5       	ldi	r30, 0x5F	; 95
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	80 68       	ori	r24, 0x80	; 128
    121c:	8c 93       	st	X, r24
	/* Set the Call back function pointer in the TIMER driver */
	Timer1_setCallBack(HMI_timer1);
    121e:	84 e3       	ldi	r24, 0x34	; 52
    1220:	9c e0       	ldi	r25, 0x0C	; 12
    1222:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <Timer1_setCallBack>


}
    1226:	2c 96       	adiw	r28, 0x0c	; 12
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <HMI_sendPassword>:
void HMI_sendPassword(uint8 * arrPass){
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <HMI_sendPassword+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <HMI_sendPassword+0x8>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	9c 83       	std	Y+4, r25	; 0x04
    1246:	8b 83       	std	Y+3, r24	; 0x03

	for(int i =0 ; i< 5 ; i++)
    1248:	1a 82       	std	Y+2, r1	; 0x02
    124a:	19 82       	std	Y+1, r1	; 0x01
    124c:	16 c0       	rjmp	.+44     	; 0x127a <HMI_sendPassword+0x42>
	{
		UART_sendByte(HMI_ECU_READY);
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <UART_sendByte>
		/* Now wait for Control ECU to be ready to receive the passwords*/
		while(UART_recieveByte() != CONTROL_ECU_READY){}
    1254:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <UART_recieveByte>
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	e1 f7       	brne	.-8      	; 0x1254 <HMI_sendPassword+0x1c>
		UART_sendByte(arrPass[i]);
    125c:	29 81       	ldd	r18, Y+1	; 0x01
    125e:	3a 81       	ldd	r19, Y+2	; 0x02
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	fc 01       	movw	r30, r24
    1266:	e2 0f       	add	r30, r18
    1268:	f3 1f       	adc	r31, r19
    126a:	80 81       	ld	r24, Z
    126c:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <UART_sendByte>


}
void HMI_sendPassword(uint8 * arrPass){

	for(int i =0 ; i< 5 ; i++)
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	9a 81       	ldd	r25, Y+2	; 0x02
    127e:	85 30       	cpi	r24, 0x05	; 5
    1280:	91 05       	cpc	r25, r1
    1282:	2c f3       	brlt	.-54     	; 0x124e <HMI_sendPassword+0x16>
		/* Now wait for Control ECU to be ready to receive the passwords*/
		while(UART_recieveByte() != CONTROL_ECU_READY){}
		UART_sendByte(arrPass[i]);
	}

}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <HMI_waitResponse>:
void HMI_waitResponse(uint8 * Password_status)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	00 d0       	rcall	.+0      	; 0x1298 <HMI_waitResponse+0x6>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
	/* Now we will wait it's response with their status */
	while(UART_recieveByte() != CONTROL_ECU_READY){}
    12a0:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <UART_recieveByte>
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	e1 f7       	brne	.-8      	; 0x12a0 <HMI_waitResponse+0xe>

	UART_sendByte(HMI_ECU_READY);
    12a8:	84 e0       	ldi	r24, 0x04	; 4
    12aa:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <UART_sendByte>

	*Password_status = UART_recieveByte();
    12ae:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <UART_recieveByte>
    12b2:	e9 81       	ldd	r30, Y+1	; 0x01
    12b4:	fa 81       	ldd	r31, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24

}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <HMI_writePassword>:
void HMI_writePassword(uint8 * arrPass){
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	64 97       	sbiw	r28, 0x14	; 20
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	9c 8b       	std	Y+20, r25	; 0x14
    12d8:	8b 8b       	std	Y+19, r24	; 0x13
	int i=0,key=0;
    12da:	1a 8a       	std	Y+18, r1	; 0x12
    12dc:	19 8a       	std	Y+17, r1	; 0x11
    12de:	18 8a       	std	Y+16, r1	; 0x10
    12e0:	1f 86       	std	Y+15, r1	; 0x0f
    12e2:	af c0       	rjmp	.+350    	; 0x1442 <HMI_writePassword+0x180>

    while(i<5)
    {
    	/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		key = KEYPAD_getPressedKey();
    12e4:	0e 94 09 12 	call	0x2412	; 0x2412 <KEYPAD_getPressedKey>
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	98 8b       	std	Y+16, r25	; 0x10
    12ee:	8f 87       	std	Y+15, r24	; 0x0f

		if((key <= 9) && (key >= 0))
    12f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f2:	98 89       	ldd	r25, Y+16	; 0x10
    12f4:	8a 30       	cpi	r24, 0x0A	; 10
    12f6:	91 05       	cpc	r25, r1
    12f8:	d4 f4       	brge	.+52     	; 0x132e <HMI_writePassword+0x6c>
    12fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    12fc:	98 89       	ldd	r25, Y+16	; 0x10
    12fe:	99 23       	and	r25, r25
    1300:	b4 f0       	brlt	.+44     	; 0x132e <HMI_writePassword+0x6c>
		{
			arrPass[i] = key; /*CONSTRAINT- DIGITS ONLY ALLOWED to lessen keypad errors*/
    1302:	29 89       	ldd	r18, Y+17	; 0x11
    1304:	3a 89       	ldd	r19, Y+18	; 0x12
    1306:	8b 89       	ldd	r24, Y+19	; 0x13
    1308:	9c 89       	ldd	r25, Y+20	; 0x14
    130a:	fc 01       	movw	r30, r24
    130c:	e2 0f       	add	r30, r18
    130e:	f3 1f       	adc	r31, r19
    1310:	8f 85       	ldd	r24, Y+15	; 0x0f
    1312:	80 83       	st	Z, r24
			/*Display * for each character*/
			LCD_moveCursor(1, i );
    1314:	99 89       	ldd	r25, Y+17	; 0x11
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	69 2f       	mov	r22, r25
    131a:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <LCD_moveCursor>
			LCD_displayCharacter('*');
    131e:	8a e2       	ldi	r24, 0x2A	; 42
    1320:	0e 94 4f 18 	call	0x309e	; 0x309e <LCD_displayCharacter>
			i++;
    1324:	89 89       	ldd	r24, Y+17	; 0x11
    1326:	9a 89       	ldd	r25, Y+18	; 0x12
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	9a 8b       	std	Y+18, r25	; 0x12
    132c:	89 8b       	std	Y+17, r24	; 0x11
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e8       	ldi	r25, 0x80	; 128
    1332:	ab eb       	ldi	r26, 0xBB	; 187
    1334:	b4 e4       	ldi	r27, 0x44	; 68
    1336:	8b 87       	std	Y+11, r24	; 0x0b
    1338:	9c 87       	std	Y+12, r25	; 0x0c
    133a:	ad 87       	std	Y+13, r26	; 0x0d
    133c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1340:	7c 85       	ldd	r23, Y+12	; 0x0c
    1342:	8d 85       	ldd	r24, Y+13	; 0x0d
    1344:	9e 85       	ldd	r25, Y+14	; 0x0e
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	4a ef       	ldi	r20, 0xFA	; 250
    134c:	54 e4       	ldi	r21, 0x44	; 68
    134e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	8f 83       	std	Y+7, r24	; 0x07
    1358:	98 87       	std	Y+8, r25	; 0x08
    135a:	a9 87       	std	Y+9, r26	; 0x09
    135c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    135e:	6f 81       	ldd	r22, Y+7	; 0x07
    1360:	78 85       	ldd	r23, Y+8	; 0x08
    1362:	89 85       	ldd	r24, Y+9	; 0x09
    1364:	9a 85       	ldd	r25, Y+10	; 0x0a
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e8       	ldi	r20, 0x80	; 128
    136c:	5f e3       	ldi	r21, 0x3F	; 63
    136e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1372:	88 23       	and	r24, r24
    1374:	2c f4       	brge	.+10     	; 0x1380 <HMI_writePassword+0xbe>
		__ticks = 1;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	3f c0       	rjmp	.+126    	; 0x13fe <HMI_writePassword+0x13c>
	else if (__tmp > 65535)
    1380:	6f 81       	ldd	r22, Y+7	; 0x07
    1382:	78 85       	ldd	r23, Y+8	; 0x08
    1384:	89 85       	ldd	r24, Y+9	; 0x09
    1386:	9a 85       	ldd	r25, Y+10	; 0x0a
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	3f ef       	ldi	r19, 0xFF	; 255
    138c:	4f e7       	ldi	r20, 0x7F	; 127
    138e:	57 e4       	ldi	r21, 0x47	; 71
    1390:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1394:	18 16       	cp	r1, r24
    1396:	4c f5       	brge	.+82     	; 0x13ea <HMI_writePassword+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1398:	6b 85       	ldd	r22, Y+11	; 0x0b
    139a:	7c 85       	ldd	r23, Y+12	; 0x0c
    139c:	8d 85       	ldd	r24, Y+13	; 0x0d
    139e:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e2       	ldi	r20, 0x20	; 32
    13a6:	51 e4       	ldi	r21, 0x41	; 65
    13a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	bc 01       	movw	r22, r24
    13b2:	cd 01       	movw	r24, r26
    13b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	9e 83       	std	Y+6, r25	; 0x06
    13be:	8d 83       	std	Y+5, r24	; 0x05
    13c0:	0f c0       	rjmp	.+30     	; 0x13e0 <HMI_writePassword+0x11e>
    13c2:	88 ec       	ldi	r24, 0xC8	; 200
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9c 83       	std	Y+4, r25	; 0x04
    13c8:	8b 83       	std	Y+3, r24	; 0x03
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <HMI_writePassword+0x10c>
    13d2:	9c 83       	std	Y+4, r25	; 0x04
    13d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	9e 83       	std	Y+6, r25	; 0x06
    13de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	69 f7       	brne	.-38     	; 0x13c2 <HMI_writePassword+0x100>
    13e8:	14 c0       	rjmp	.+40     	; 0x1412 <HMI_writePassword+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ea:	6f 81       	ldd	r22, Y+7	; 0x07
    13ec:	78 85       	ldd	r23, Y+8	; 0x08
    13ee:	89 85       	ldd	r24, Y+9	; 0x09
    13f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	9e 83       	std	Y+6, r25	; 0x06
    13fc:	8d 83       	std	Y+5, r24	; 0x05
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	9a 83       	std	Y+2, r25	; 0x02
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	f1 f7       	brne	.-4      	; 0x140a <HMI_writePassword+0x148>
    140e:	9a 83       	std	Y+2, r25	; 0x02
    1410:	89 83       	std	Y+1, r24	; 0x01
		}

		_delay_ms(1500); /* Press time */
		while((GPIO_readPin(PORTA_ID, PIN4_ID)==1)||(GPIO_readPin(PORTA_ID, PIN5_ID)==1)||(GPIO_readPin(PORTA_ID, PIN6_ID)==1)||(GPIO_readPin(PORTA_ID, PIN7_ID)==1));	//waiting till the key is released
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	64 e0       	ldi	r22, 0x04	; 4
    1416:	0e 94 a1 10 	call	0x2142	; 0x2142 <GPIO_readPin>
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	d1 f3       	breq	.-12     	; 0x1412 <HMI_writePassword+0x150>
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	65 e0       	ldi	r22, 0x05	; 5
    1422:	0e 94 a1 10 	call	0x2142	; 0x2142 <GPIO_readPin>
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	a1 f3       	breq	.-24     	; 0x1412 <HMI_writePassword+0x150>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	66 e0       	ldi	r22, 0x06	; 6
    142e:	0e 94 a1 10 	call	0x2142	; 0x2142 <GPIO_readPin>
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	71 f3       	breq	.-36     	; 0x1412 <HMI_writePassword+0x150>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	67 e0       	ldi	r22, 0x07	; 7
    143a:	0e 94 a1 10 	call	0x2142	; 0x2142 <GPIO_readPin>
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	41 f3       	breq	.-48     	; 0x1412 <HMI_writePassword+0x150>

}
void HMI_writePassword(uint8 * arrPass){
	int i=0,key=0;

    while(i<5)
    1442:	89 89       	ldd	r24, Y+17	; 0x11
    1444:	9a 89       	ldd	r25, Y+18	; 0x12
    1446:	85 30       	cpi	r24, 0x05	; 5
    1448:	91 05       	cpc	r25, r1
    144a:	0c f4       	brge	.+2      	; 0x144e <HMI_writePassword+0x18c>
    144c:	4b cf       	rjmp	.-362    	; 0x12e4 <HMI_writePassword+0x22>
	/*
	 * Assuming enter buttor is "=" so wait untill we get it from user
	 */
	do{
		/*Do Nothing*/
	}while(KEYPAD_getPressedKey() != '=');
    144e:	0e 94 09 12 	call	0x2412	; 0x2412 <KEYPAD_getPressedKey>
    1452:	8d 33       	cpi	r24, 0x3D	; 61
    1454:	e1 f7       	brne	.-8      	; 0x144e <HMI_writePassword+0x18c>
}
    1456:	64 96       	adiw	r28, 0x14	; 20
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <HMI_createPassword_changePassword>:

/*
 * Function to take password from user, and send it to control ecu.
 */
void HMI_createPassword_changePassword(void){
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	6c 97       	sbiw	r28, 0x1c	; 28
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
	/*First Loop Is responsible for Creating a Password for the system*/
	while (1){
				/* Create Password for the first time or change it */
			LCD_clearScreen();
    147c:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>

			LCD_displayString("Please Enter Password: ");
    1480:	8d ea       	ldi	r24, 0xAD	; 173
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>

			HMI_writePassword(password);
    1488:	87 ee       	ldi	r24, 0xE7	; 231
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <HMI_writePassword>
			LCD_clearScreen();
    1490:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>

			LCD_displayString("Please re-enter the same Pass :");
    1494:	85 ec       	ldi	r24, 0xC5	; 197
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
				/* Now write the same password again */
			HMI_writePassword(ConfirmPassword);
    149c:	81 ef       	ldi	r24, 0xF1	; 241
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <HMI_writePassword>

			/* Now That we have both passwords we will send them to CONTROL ECU To check them*/
			HMI_sendPassword(password);
    14a4:	87 ee       	ldi	r24, 0xE7	; 231
    14a6:	91 e0       	ldi	r25, 0x01	; 1
    14a8:	0e 94 1c 09 	call	0x1238	; 0x1238 <HMI_sendPassword>
			HMI_sendPassword(ConfirmPassword);
    14ac:	81 ef       	ldi	r24, 0xF1	; 241
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	0e 94 1c 09 	call	0x1238	; 0x1238 <HMI_sendPassword>

			HMI_waitResponse(&Password_status);
    14b4:	84 ee       	ldi	r24, 0xE4	; 228
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	0e 94 49 09 	call	0x1292	; 0x1292 <HMI_waitResponse>


			if(Password_status == MATCHED_PASSWORDS)
    14bc:	80 91 e4 01 	lds	r24, 0x01E4
    14c0:	86 30       	cpi	r24, 0x06	; 6
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <HMI_createPassword_changePassword+0x5e>
    14c4:	79 c0       	rjmp	.+242    	; 0x15b8 <HMI_createPassword_changePassword+0x150>
			{
				LCD_clearScreen();
    14c6:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
				LCD_displayString("Password Created Successfully!");
    14ca:	85 ee       	ldi	r24, 0xE5	; 229
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	aa e7       	ldi	r26, 0x7A	; 122
    14d8:	b4 e4       	ldi	r27, 0x44	; 68
    14da:	89 8f       	std	Y+25, r24	; 0x19
    14dc:	9a 8f       	std	Y+26, r25	; 0x1a
    14de:	ab 8f       	std	Y+27, r26	; 0x1b
    14e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e2:	69 8d       	ldd	r22, Y+25	; 0x19
    14e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	4a ef       	ldi	r20, 0xFA	; 250
    14f0:	54 e4       	ldi	r21, 0x44	; 68
    14f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	8d 8b       	std	Y+21, r24	; 0x15
    14fc:	9e 8b       	std	Y+22, r25	; 0x16
    14fe:	af 8b       	std	Y+23, r26	; 0x17
    1500:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1502:	6d 89       	ldd	r22, Y+21	; 0x15
    1504:	7e 89       	ldd	r23, Y+22	; 0x16
    1506:	8f 89       	ldd	r24, Y+23	; 0x17
    1508:	98 8d       	ldd	r25, Y+24	; 0x18
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e8       	ldi	r20, 0x80	; 128
    1510:	5f e3       	ldi	r21, 0x3F	; 63
    1512:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1516:	88 23       	and	r24, r24
    1518:	2c f4       	brge	.+10     	; 0x1524 <HMI_createPassword_changePassword+0xbc>
		__ticks = 1;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9c 8b       	std	Y+20, r25	; 0x14
    1520:	8b 8b       	std	Y+19, r24	; 0x13
    1522:	3f c0       	rjmp	.+126    	; 0x15a2 <HMI_createPassword_changePassword+0x13a>
	else if (__tmp > 65535)
    1524:	6d 89       	ldd	r22, Y+21	; 0x15
    1526:	7e 89       	ldd	r23, Y+22	; 0x16
    1528:	8f 89       	ldd	r24, Y+23	; 0x17
    152a:	98 8d       	ldd	r25, Y+24	; 0x18
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	3f ef       	ldi	r19, 0xFF	; 255
    1530:	4f e7       	ldi	r20, 0x7F	; 127
    1532:	57 e4       	ldi	r21, 0x47	; 71
    1534:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1538:	18 16       	cp	r1, r24
    153a:	4c f5       	brge	.+82     	; 0x158e <HMI_createPassword_changePassword+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153c:	69 8d       	ldd	r22, Y+25	; 0x19
    153e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1540:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1542:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e2       	ldi	r20, 0x20	; 32
    154a:	51 e4       	ldi	r21, 0x41	; 65
    154c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	9c 8b       	std	Y+20, r25	; 0x14
    1562:	8b 8b       	std	Y+19, r24	; 0x13
    1564:	0f c0       	rjmp	.+30     	; 0x1584 <HMI_createPassword_changePassword+0x11c>
    1566:	88 ec       	ldi	r24, 0xC8	; 200
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	9a 8b       	std	Y+18, r25	; 0x12
    156c:	89 8b       	std	Y+17, r24	; 0x11
    156e:	89 89       	ldd	r24, Y+17	; 0x11
    1570:	9a 89       	ldd	r25, Y+18	; 0x12
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <HMI_createPassword_changePassword+0x10a>
    1576:	9a 8b       	std	Y+18, r25	; 0x12
    1578:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157a:	8b 89       	ldd	r24, Y+19	; 0x13
    157c:	9c 89       	ldd	r25, Y+20	; 0x14
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	9c 8b       	std	Y+20, r25	; 0x14
    1582:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1584:	8b 89       	ldd	r24, Y+19	; 0x13
    1586:	9c 89       	ldd	r25, Y+20	; 0x14
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	69 f7       	brne	.-38     	; 0x1566 <HMI_createPassword_changePassword+0xfe>
    158c:	93 c0       	rjmp	.+294    	; 0x16b4 <HMI_createPassword_changePassword+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158e:	6d 89       	ldd	r22, Y+21	; 0x15
    1590:	7e 89       	ldd	r23, Y+22	; 0x16
    1592:	8f 89       	ldd	r24, Y+23	; 0x17
    1594:	98 8d       	ldd	r25, Y+24	; 0x18
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9c 8b       	std	Y+20, r25	; 0x14
    15a0:	8b 8b       	std	Y+19, r24	; 0x13
    15a2:	8b 89       	ldd	r24, Y+19	; 0x13
    15a4:	9c 89       	ldd	r25, Y+20	; 0x14
    15a6:	98 8b       	std	Y+16, r25	; 0x10
    15a8:	8f 87       	std	Y+15, r24	; 0x0f
    15aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ac:	98 89       	ldd	r25, Y+16	; 0x10
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <HMI_createPassword_changePassword+0x146>
    15b2:	98 8b       	std	Y+16, r25	; 0x10
    15b4:	8f 87       	std	Y+15, r24	; 0x0f
    15b6:	7e c0       	rjmp	.+252    	; 0x16b4 <HMI_createPassword_changePassword+0x24c>
				/*
				 * Exit the loop to get to the application
			 */
			break;
		}
		else if(Password_status == UNMATCHED_PASSWORDS){
    15b8:	80 91 e4 01 	lds	r24, 0x01E4
    15bc:	85 30       	cpi	r24, 0x05	; 5
    15be:	09 f0       	breq	.+2      	; 0x15c2 <HMI_createPassword_changePassword+0x15a>
    15c0:	5d cf       	rjmp	.-326    	; 0x147c <HMI_createPassword_changePassword+0x14>
			LCD_clearScreen();
    15c2:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
			LCD_displayString("Passwords Are Not Matching!!");
    15c6:	84 e0       	ldi	r24, 0x04	; 4
    15c8:	91 e0       	ldi	r25, 0x01	; 1
    15ca:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	aa e7       	ldi	r26, 0x7A	; 122
    15d4:	b4 e4       	ldi	r27, 0x44	; 68
    15d6:	8b 87       	std	Y+11, r24	; 0x0b
    15d8:	9c 87       	std	Y+12, r25	; 0x0c
    15da:	ad 87       	std	Y+13, r26	; 0x0d
    15dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15de:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	4a ef       	ldi	r20, 0xFA	; 250
    15ec:	54 e4       	ldi	r21, 0x44	; 68
    15ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	8f 83       	std	Y+7, r24	; 0x07
    15f8:	98 87       	std	Y+8, r25	; 0x08
    15fa:	a9 87       	std	Y+9, r26	; 0x09
    15fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1600:	78 85       	ldd	r23, Y+8	; 0x08
    1602:	89 85       	ldd	r24, Y+9	; 0x09
    1604:	9a 85       	ldd	r25, Y+10	; 0x0a
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e8       	ldi	r20, 0x80	; 128
    160c:	5f e3       	ldi	r21, 0x3F	; 63
    160e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1612:	88 23       	and	r24, r24
    1614:	2c f4       	brge	.+10     	; 0x1620 <HMI_createPassword_changePassword+0x1b8>
		__ticks = 1;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	3f c0       	rjmp	.+126    	; 0x169e <HMI_createPassword_changePassword+0x236>
	else if (__tmp > 65535)
    1620:	6f 81       	ldd	r22, Y+7	; 0x07
    1622:	78 85       	ldd	r23, Y+8	; 0x08
    1624:	89 85       	ldd	r24, Y+9	; 0x09
    1626:	9a 85       	ldd	r25, Y+10	; 0x0a
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	3f ef       	ldi	r19, 0xFF	; 255
    162c:	4f e7       	ldi	r20, 0x7F	; 127
    162e:	57 e4       	ldi	r21, 0x47	; 71
    1630:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1634:	18 16       	cp	r1, r24
    1636:	4c f5       	brge	.+82     	; 0x168a <HMI_createPassword_changePassword+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1638:	6b 85       	ldd	r22, Y+11	; 0x0b
    163a:	7c 85       	ldd	r23, Y+12	; 0x0c
    163c:	8d 85       	ldd	r24, Y+13	; 0x0d
    163e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e2       	ldi	r20, 0x20	; 32
    1646:	51 e4       	ldi	r21, 0x41	; 65
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	9e 83       	std	Y+6, r25	; 0x06
    165e:	8d 83       	std	Y+5, r24	; 0x05
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <HMI_createPassword_changePassword+0x218>
    1662:	88 ec       	ldi	r24, 0xC8	; 200
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9c 83       	std	Y+4, r25	; 0x04
    1668:	8b 83       	std	Y+3, r24	; 0x03
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <HMI_createPassword_changePassword+0x206>
    1672:	9c 83       	std	Y+4, r25	; 0x04
    1674:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	69 f7       	brne	.-38     	; 0x1662 <HMI_createPassword_changePassword+0x1fa>
    1688:	f9 ce       	rjmp	.-526    	; 0x147c <HMI_createPassword_changePassword+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168a:	6f 81       	ldd	r22, Y+7	; 0x07
    168c:	78 85       	ldd	r23, Y+8	; 0x08
    168e:	89 85       	ldd	r24, Y+9	; 0x09
    1690:	9a 85       	ldd	r25, Y+10	; 0x0a
    1692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	8d 83       	std	Y+5, r24	; 0x05
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	9e 81       	ldd	r25, Y+6	; 0x06
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <HMI_createPassword_changePassword+0x242>
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	e4 ce       	rjmp	.-568    	; 0x147c <HMI_createPassword_changePassword+0x14>
			_delay_ms(1000);

		}
	}
}
    16b4:	6c 96       	adiw	r28, 0x1c	; 28
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <HMI_openDoor>:




void HMI_openDoor(void)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	69 97       	sbiw	r28, 0x19	; 25
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
		 *                            Ttimer = 3000 * 0.001 = 3 seconds
		 *                          1- To make the door opening time is 15 second we need 5 overflow
		 *                          2- To make the door holding time is 1 overflow (5+1) seconds we need 6 overflow
		 *                          3- To make the door closing time is (5+1+5) seconds we need 11 overflow
		 * */
	Timer1_ConfigType TimerDoor= {0,3000,F_CPU_1024,CTCMode};
    16da:	ce 01       	movw	r24, r28
    16dc:	0f 96       	adiw	r24, 0x0f	; 15
    16de:	9e 8b       	std	Y+22, r25	; 0x16
    16e0:	8d 8b       	std	Y+21, r24	; 0x15
    16e2:	e5 ed       	ldi	r30, 0xD5	; 213
    16e4:	f1 e0       	ldi	r31, 0x01	; 1
    16e6:	f8 8f       	std	Y+24, r31	; 0x18
    16e8:	ef 8b       	std	Y+23, r30	; 0x17
    16ea:	f6 e0       	ldi	r31, 0x06	; 6
    16ec:	f9 8f       	std	Y+25, r31	; 0x19
    16ee:	ef 89       	ldd	r30, Y+23	; 0x17
    16f0:	f8 8d       	ldd	r31, Y+24	; 0x18
    16f2:	00 80       	ld	r0, Z
    16f4:	8f 89       	ldd	r24, Y+23	; 0x17
    16f6:	98 8d       	ldd	r25, Y+24	; 0x18
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	98 8f       	std	Y+24, r25	; 0x18
    16fc:	8f 8b       	std	Y+23, r24	; 0x17
    16fe:	ed 89       	ldd	r30, Y+21	; 0x15
    1700:	fe 89       	ldd	r31, Y+22	; 0x16
    1702:	00 82       	st	Z, r0
    1704:	8d 89       	ldd	r24, Y+21	; 0x15
    1706:	9e 89       	ldd	r25, Y+22	; 0x16
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	9e 8b       	std	Y+22, r25	; 0x16
    170c:	8d 8b       	std	Y+21, r24	; 0x15
    170e:	99 8d       	ldd	r25, Y+25	; 0x19
    1710:	91 50       	subi	r25, 0x01	; 1
    1712:	99 8f       	std	Y+25, r25	; 0x19
    1714:	e9 8d       	ldd	r30, Y+25	; 0x19
    1716:	ee 23       	and	r30, r30
    1718:	51 f7       	brne	.-44     	; 0x16ee <HMI_openDoor+0x28>
	LCD_clearScreen();
    171a:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
	LCD_displayString("Door is Unlocking");
    171e:	81 e2       	ldi	r24, 0x21	; 33
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>

	Timer1_init(&TimerDoor);
    1726:	ce 01       	movw	r24, r28
    1728:	0f 96       	adiw	r24, 0x0f	; 15
    172a:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <Timer1_init>

	while(g_tick < 5);
    172e:	80 91 e2 01 	lds	r24, 0x01E2
    1732:	85 30       	cpi	r24, 0x05	; 5
    1734:	e0 f3       	brcs	.-8      	; 0x172e <HMI_openDoor+0x68>
	LCD_clearScreen();
    1736:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
	LCD_displayString("Door is Unlocked");
    173a:	83 e3       	ldi	r24, 0x33	; 51
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>

	while(g_tick < 6);
    1742:	80 91 e2 01 	lds	r24, 0x01E2
    1746:	86 30       	cpi	r24, 0x06	; 6
    1748:	e0 f3       	brcs	.-8      	; 0x1742 <HMI_openDoor+0x7c>

	LCD_clearScreen();
    174a:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
	LCD_displayString("Door is Locking");
    174e:	84 e4       	ldi	r24, 0x44	; 68
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>

	while(g_tick < 11);
    1756:	80 91 e2 01 	lds	r24, 0x01E2
    175a:	8b 30       	cpi	r24, 0x0B	; 11
    175c:	e0 f3       	brcs	.-8      	; 0x1756 <HMI_openDoor+0x90>

	LCD_clearScreen();
    175e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
	LCD_displayString("Door is Locked");
    1762:	84 e5       	ldi	r24, 0x54	; 84
    1764:	91 e0       	ldi	r25, 0x01	; 1
    1766:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	aa e7       	ldi	r26, 0x7A	; 122
    1770:	b4 e4       	ldi	r27, 0x44	; 68
    1772:	8b 87       	std	Y+11, r24	; 0x0b
    1774:	9c 87       	std	Y+12, r25	; 0x0c
    1776:	ad 87       	std	Y+13, r26	; 0x0d
    1778:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177a:	6b 85       	ldd	r22, Y+11	; 0x0b
    177c:	7c 85       	ldd	r23, Y+12	; 0x0c
    177e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1780:	9e 85       	ldd	r25, Y+14	; 0x0e
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	4a ef       	ldi	r20, 0xFA	; 250
    1788:	54 e4       	ldi	r21, 0x44	; 68
    178a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	8f 83       	std	Y+7, r24	; 0x07
    1794:	98 87       	std	Y+8, r25	; 0x08
    1796:	a9 87       	std	Y+9, r26	; 0x09
    1798:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    179a:	6f 81       	ldd	r22, Y+7	; 0x07
    179c:	78 85       	ldd	r23, Y+8	; 0x08
    179e:	89 85       	ldd	r24, Y+9	; 0x09
    17a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e8       	ldi	r20, 0x80	; 128
    17a8:	5f e3       	ldi	r21, 0x3F	; 63
    17aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ae:	88 23       	and	r24, r24
    17b0:	2c f4       	brge	.+10     	; 0x17bc <HMI_openDoor+0xf6>
		__ticks = 1;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	9e 83       	std	Y+6, r25	; 0x06
    17b8:	8d 83       	std	Y+5, r24	; 0x05
    17ba:	3f c0       	rjmp	.+126    	; 0x183a <HMI_openDoor+0x174>
	else if (__tmp > 65535)
    17bc:	6f 81       	ldd	r22, Y+7	; 0x07
    17be:	78 85       	ldd	r23, Y+8	; 0x08
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	3f ef       	ldi	r19, 0xFF	; 255
    17c8:	4f e7       	ldi	r20, 0x7F	; 127
    17ca:	57 e4       	ldi	r21, 0x47	; 71
    17cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d0:	18 16       	cp	r1, r24
    17d2:	4c f5       	brge	.+82     	; 0x1826 <HMI_openDoor+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17da:	9e 85       	ldd	r25, Y+14	; 0x0e
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e2       	ldi	r20, 0x20	; 32
    17e2:	51 e4       	ldi	r21, 0x41	; 65
    17e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	bc 01       	movw	r22, r24
    17ee:	cd 01       	movw	r24, r26
    17f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	0f c0       	rjmp	.+30     	; 0x181c <HMI_openDoor+0x156>
    17fe:	88 ec       	ldi	r24, 0xC8	; 200
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	9c 83       	std	Y+4, r25	; 0x04
    1804:	8b 83       	std	Y+3, r24	; 0x03
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <HMI_openDoor+0x144>
    180e:	9c 83       	std	Y+4, r25	; 0x04
    1810:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	9e 83       	std	Y+6, r25	; 0x06
    181a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181c:	8d 81       	ldd	r24, Y+5	; 0x05
    181e:	9e 81       	ldd	r25, Y+6	; 0x06
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	69 f7       	brne	.-38     	; 0x17fe <HMI_openDoor+0x138>
    1824:	14 c0       	rjmp	.+40     	; 0x184e <HMI_openDoor+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	8d 83       	std	Y+5, r24	; 0x05
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <HMI_openDoor+0x180>
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);
	Timer1_deInit();
    184e:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Timer1_deInit>
	g_tick = 0;
    1852:	10 92 e2 01 	sts	0x01E2, r1
}
    1856:	69 96       	adiw	r28, 0x19	; 25
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <HMI_timer1>:
void HMI_timer1(void)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
	/*Just increment timer tick*/
	g_tick++;
    1870:	80 91 e2 01 	lds	r24, 0x01E2
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	80 93 e2 01 	sts	0x01E2, r24

}
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <HMI_handlingUnmatchedPasswords>:
uint8 HMI_handlingUnmatchedPasswords(void){
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	e9 97       	sbiw	r28, 0x39	; 57
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1894:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>

	LCD_displayString("Please Enter Password: ");
    1898:	8d ea       	ldi	r24, 0xAD	; 173
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>

	HMI_writePassword(password);
    18a0:	87 ee       	ldi	r24, 0xE7	; 231
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <HMI_writePassword>

	HMI_sendPassword(password);
    18a8:	87 ee       	ldi	r24, 0xE7	; 231
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	0e 94 1c 09 	call	0x1238	; 0x1238 <HMI_sendPassword>

	HMI_waitResponse(&Password_status);
    18b0:	84 ee       	ldi	r24, 0xE4	; 228
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	0e 94 49 09 	call	0x1292	; 0x1292 <HMI_waitResponse>

	if(Password_status == UNMATCHED_PASSWORDS){
    18b8:	80 91 e4 01 	lds	r24, 0x01E4
    18bc:	85 30       	cpi	r24, 0x05	; 5
    18be:	09 f0       	breq	.+2      	; 0x18c2 <HMI_handlingUnmatchedPasswords+0x42>
    18c0:	99 c1       	rjmp	.+818    	; 0x1bf4 <HMI_handlingUnmatchedPasswords+0x374>

		LCD_clearScreen();
    18c2:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
		LCD_displayString("Invalid Password!");
    18c6:	83 e6       	ldi	r24, 0x63	; 99
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	aa ef       	ldi	r26, 0xFA	; 250
    18d4:	b3 e4       	ldi	r27, 0x43	; 67
    18d6:	8d ab       	std	Y+53, r24	; 0x35
    18d8:	9e ab       	std	Y+54, r25	; 0x36
    18da:	af ab       	std	Y+55, r26	; 0x37
    18dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18de:	6d a9       	ldd	r22, Y+53	; 0x35
    18e0:	7e a9       	ldd	r23, Y+54	; 0x36
    18e2:	8f a9       	ldd	r24, Y+55	; 0x37
    18e4:	98 ad       	ldd	r25, Y+56	; 0x38
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	4a ef       	ldi	r20, 0xFA	; 250
    18ec:	54 e4       	ldi	r21, 0x44	; 68
    18ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	89 ab       	std	Y+49, r24	; 0x31
    18f8:	9a ab       	std	Y+50, r25	; 0x32
    18fa:	ab ab       	std	Y+51, r26	; 0x33
    18fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1900:	7a a9       	ldd	r23, Y+50	; 0x32
    1902:	8b a9       	ldd	r24, Y+51	; 0x33
    1904:	9c a9       	ldd	r25, Y+52	; 0x34
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e8       	ldi	r20, 0x80	; 128
    190c:	5f e3       	ldi	r21, 0x3F	; 63
    190e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1912:	88 23       	and	r24, r24
    1914:	2c f4       	brge	.+10     	; 0x1920 <HMI_handlingUnmatchedPasswords+0xa0>
		__ticks = 1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	98 ab       	std	Y+48, r25	; 0x30
    191c:	8f a7       	std	Y+47, r24	; 0x2f
    191e:	3f c0       	rjmp	.+126    	; 0x199e <HMI_handlingUnmatchedPasswords+0x11e>
	else if (__tmp > 65535)
    1920:	69 a9       	ldd	r22, Y+49	; 0x31
    1922:	7a a9       	ldd	r23, Y+50	; 0x32
    1924:	8b a9       	ldd	r24, Y+51	; 0x33
    1926:	9c a9       	ldd	r25, Y+52	; 0x34
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	3f ef       	ldi	r19, 0xFF	; 255
    192c:	4f e7       	ldi	r20, 0x7F	; 127
    192e:	57 e4       	ldi	r21, 0x47	; 71
    1930:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1934:	18 16       	cp	r1, r24
    1936:	4c f5       	brge	.+82     	; 0x198a <HMI_handlingUnmatchedPasswords+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1938:	6d a9       	ldd	r22, Y+53	; 0x35
    193a:	7e a9       	ldd	r23, Y+54	; 0x36
    193c:	8f a9       	ldd	r24, Y+55	; 0x37
    193e:	98 ad       	ldd	r25, Y+56	; 0x38
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e2       	ldi	r20, 0x20	; 32
    1946:	51 e4       	ldi	r21, 0x41	; 65
    1948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	98 ab       	std	Y+48, r25	; 0x30
    195e:	8f a7       	std	Y+47, r24	; 0x2f
    1960:	0f c0       	rjmp	.+30     	; 0x1980 <HMI_handlingUnmatchedPasswords+0x100>
    1962:	88 ec       	ldi	r24, 0xC8	; 200
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9e a7       	std	Y+46, r25	; 0x2e
    1968:	8d a7       	std	Y+45, r24	; 0x2d
    196a:	8d a5       	ldd	r24, Y+45	; 0x2d
    196c:	9e a5       	ldd	r25, Y+46	; 0x2e
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <HMI_handlingUnmatchedPasswords+0xee>
    1972:	9e a7       	std	Y+46, r25	; 0x2e
    1974:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1976:	8f a5       	ldd	r24, Y+47	; 0x2f
    1978:	98 a9       	ldd	r25, Y+48	; 0x30
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	98 ab       	std	Y+48, r25	; 0x30
    197e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1980:	8f a5       	ldd	r24, Y+47	; 0x2f
    1982:	98 a9       	ldd	r25, Y+48	; 0x30
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	69 f7       	brne	.-38     	; 0x1962 <HMI_handlingUnmatchedPasswords+0xe2>
    1988:	14 c0       	rjmp	.+40     	; 0x19b2 <HMI_handlingUnmatchedPasswords+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198a:	69 a9       	ldd	r22, Y+49	; 0x31
    198c:	7a a9       	ldd	r23, Y+50	; 0x32
    198e:	8b a9       	ldd	r24, Y+51	; 0x33
    1990:	9c a9       	ldd	r25, Y+52	; 0x34
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	98 ab       	std	Y+48, r25	; 0x30
    199c:	8f a7       	std	Y+47, r24	; 0x2f
    199e:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a0:	98 a9       	ldd	r25, Y+48	; 0x30
    19a2:	9c a7       	std	Y+44, r25	; 0x2c
    19a4:	8b a7       	std	Y+43, r24	; 0x2b
    19a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    19a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <HMI_handlingUnmatchedPasswords+0x12a>
    19ae:	9c a7       	std	Y+44, r25	; 0x2c
    19b0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		LCD_displayString("Please Enter Password: ");
    19b2:	8d ea       	ldi	r24, 0xAD	; 173
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
		HMI_writePassword(password);
    19ba:	87 ee       	ldi	r24, 0xE7	; 231
    19bc:	91 e0       	ldi	r25, 0x01	; 1
    19be:	0e 94 61 09 	call	0x12c2	; 0x12c2 <HMI_writePassword>

		HMI_sendPassword(password);
    19c2:	87 ee       	ldi	r24, 0xE7	; 231
    19c4:	91 e0       	ldi	r25, 0x01	; 1
    19c6:	0e 94 1c 09 	call	0x1238	; 0x1238 <HMI_sendPassword>
		HMI_waitResponse(&Password_status);
    19ca:	84 ee       	ldi	r24, 0xE4	; 228
    19cc:	91 e0       	ldi	r25, 0x01	; 1
    19ce:	0e 94 49 09 	call	0x1292	; 0x1292 <HMI_waitResponse>

		if(Password_status == UNMATCHED_PASSWORDS)
    19d2:	80 91 e4 01 	lds	r24, 0x01E4
    19d6:	85 30       	cpi	r24, 0x05	; 5
    19d8:	09 f0       	breq	.+2      	; 0x19dc <HMI_handlingUnmatchedPasswords+0x15c>
    19da:	8e c0       	rjmp	.+284    	; 0x1af8 <HMI_handlingUnmatchedPasswords+0x278>
		{
			LCD_clearScreen();
    19dc:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
			LCD_displayString("Invalid Password!");
    19e0:	83 e6       	ldi	r24, 0x63	; 99
    19e2:	91 e0       	ldi	r25, 0x01	; 1
    19e4:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	aa ef       	ldi	r26, 0xFA	; 250
    19ee:	b3 e4       	ldi	r27, 0x43	; 67
    19f0:	8f a3       	std	Y+39, r24	; 0x27
    19f2:	98 a7       	std	Y+40, r25	; 0x28
    19f4:	a9 a7       	std	Y+41, r26	; 0x29
    19f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f8:	6f a1       	ldd	r22, Y+39	; 0x27
    19fa:	78 a5       	ldd	r23, Y+40	; 0x28
    19fc:	89 a5       	ldd	r24, Y+41	; 0x29
    19fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	4a ef       	ldi	r20, 0xFA	; 250
    1a06:	54 e4       	ldi	r21, 0x44	; 68
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	8b a3       	std	Y+35, r24	; 0x23
    1a12:	9c a3       	std	Y+36, r25	; 0x24
    1a14:	ad a3       	std	Y+37, r26	; 0x25
    1a16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a18:	6b a1       	ldd	r22, Y+35	; 0x23
    1a1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	2c f4       	brge	.+10     	; 0x1a3a <HMI_handlingUnmatchedPasswords+0x1ba>
		__ticks = 1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9a a3       	std	Y+34, r25	; 0x22
    1a36:	89 a3       	std	Y+33, r24	; 0x21
    1a38:	3f c0       	rjmp	.+126    	; 0x1ab8 <HMI_handlingUnmatchedPasswords+0x238>
	else if (__tmp > 65535)
    1a3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a40:	9e a1       	ldd	r25, Y+38	; 0x26
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	3f ef       	ldi	r19, 0xFF	; 255
    1a46:	4f e7       	ldi	r20, 0x7F	; 127
    1a48:	57 e4       	ldi	r21, 0x47	; 71
    1a4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4e:	18 16       	cp	r1, r24
    1a50:	4c f5       	brge	.+82     	; 0x1aa4 <HMI_handlingUnmatchedPasswords+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a52:	6f a1       	ldd	r22, Y+39	; 0x27
    1a54:	78 a5       	ldd	r23, Y+40	; 0x28
    1a56:	89 a5       	ldd	r24, Y+41	; 0x29
    1a58:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e2       	ldi	r20, 0x20	; 32
    1a60:	51 e4       	ldi	r21, 0x41	; 65
    1a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	bc 01       	movw	r22, r24
    1a6c:	cd 01       	movw	r24, r26
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9a a3       	std	Y+34, r25	; 0x22
    1a78:	89 a3       	std	Y+33, r24	; 0x21
    1a7a:	0f c0       	rjmp	.+30     	; 0x1a9a <HMI_handlingUnmatchedPasswords+0x21a>
    1a7c:	88 ec       	ldi	r24, 0xC8	; 200
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	98 a3       	std	Y+32, r25	; 0x20
    1a82:	8f 8f       	std	Y+31, r24	; 0x1f
    1a84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a86:	98 a1       	ldd	r25, Y+32	; 0x20
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <HMI_handlingUnmatchedPasswords+0x208>
    1a8c:	98 a3       	std	Y+32, r25	; 0x20
    1a8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a90:	89 a1       	ldd	r24, Y+33	; 0x21
    1a92:	9a a1       	ldd	r25, Y+34	; 0x22
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	9a a3       	std	Y+34, r25	; 0x22
    1a98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	69 f7       	brne	.-38     	; 0x1a7c <HMI_handlingUnmatchedPasswords+0x1fc>
    1aa2:	14 c0       	rjmp	.+40     	; 0x1acc <HMI_handlingUnmatchedPasswords+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa4:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa6:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	9a a3       	std	Y+34, r25	; 0x22
    1ab6:	89 a3       	std	Y+33, r24	; 0x21
    1ab8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aba:	9a a1       	ldd	r25, Y+34	; 0x22
    1abc:	9e 8f       	std	Y+30, r25	; 0x1e
    1abe:	8d 8f       	std	Y+29, r24	; 0x1d
    1ac0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ac2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <HMI_handlingUnmatchedPasswords+0x244>
    1ac8:	9e 8f       	std	Y+30, r25	; 0x1e
    1aca:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			LCD_clearScreen();
    1acc:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
			LCD_displayString("Please Enter Password One More Time! : ");
    1ad0:	85 e7       	ldi	r24, 0x75	; 117
    1ad2:	91 e0       	ldi	r25, 0x01	; 1
    1ad4:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
			HMI_writePassword(password);
    1ad8:	87 ee       	ldi	r24, 0xE7	; 231
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	0e 94 61 09 	call	0x12c2	; 0x12c2 <HMI_writePassword>

			HMI_sendPassword(password);
    1ae0:	87 ee       	ldi	r24, 0xE7	; 231
    1ae2:	91 e0       	ldi	r25, 0x01	; 1
    1ae4:	0e 94 1c 09 	call	0x1238	; 0x1238 <HMI_sendPassword>
			HMI_waitResponse(&Password_status);
    1ae8:	84 ee       	ldi	r24, 0xE4	; 228
    1aea:	91 e0       	ldi	r25, 0x01	; 1
    1aec:	0e 94 49 09 	call	0x1292	; 0x1292 <HMI_waitResponse>
			return Password_status;
    1af0:	80 91 e4 01 	lds	r24, 0x01E4
    1af4:	89 af       	std	Y+57, r24	; 0x39
    1af6:	fe c0       	rjmp	.+508    	; 0x1cf4 <HMI_handlingUnmatchedPasswords+0x474>

		}
		else if(Password_status == MATCHED_PASSWORDS)
    1af8:	80 91 e4 01 	lds	r24, 0x01E4
    1afc:	86 30       	cpi	r24, 0x06	; 6
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <HMI_handlingUnmatchedPasswords+0x282>
    1b00:	f6 c0       	rjmp	.+492    	; 0x1cee <HMI_handlingUnmatchedPasswords+0x46e>

		{
			LCD_clearScreen();
    1b02:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
			LCD_displayString("Valid Password ");
    1b06:	8d e9       	ldi	r24, 0x9D	; 157
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	aa ef       	ldi	r26, 0xFA	; 250
    1b14:	b3 e4       	ldi	r27, 0x43	; 67
    1b16:	89 8f       	std	Y+25, r24	; 0x19
    1b18:	9a 8f       	std	Y+26, r25	; 0x1a
    1b1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a ef       	ldi	r20, 0xFA	; 250
    1b2c:	54 e4       	ldi	r21, 0x44	; 68
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	8d 8b       	std	Y+21, r24	; 0x15
    1b38:	9e 8b       	std	Y+22, r25	; 0x16
    1b3a:	af 8b       	std	Y+23, r26	; 0x17
    1b3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b40:	7e 89       	ldd	r23, Y+22	; 0x16
    1b42:	8f 89       	ldd	r24, Y+23	; 0x17
    1b44:	98 8d       	ldd	r25, Y+24	; 0x18
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b52:	88 23       	and	r24, r24
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <HMI_handlingUnmatchedPasswords+0x2e0>
		__ticks = 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9c 8b       	std	Y+20, r25	; 0x14
    1b5c:	8b 8b       	std	Y+19, r24	; 0x13
    1b5e:	3f c0       	rjmp	.+126    	; 0x1bde <HMI_handlingUnmatchedPasswords+0x35e>
	else if (__tmp > 65535)
    1b60:	6d 89       	ldd	r22, Y+21	; 0x15
    1b62:	7e 89       	ldd	r23, Y+22	; 0x16
    1b64:	8f 89       	ldd	r24, Y+23	; 0x17
    1b66:	98 8d       	ldd	r25, Y+24	; 0x18
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	3f ef       	ldi	r19, 0xFF	; 255
    1b6c:	4f e7       	ldi	r20, 0x7F	; 127
    1b6e:	57 e4       	ldi	r21, 0x47	; 71
    1b70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b74:	18 16       	cp	r1, r24
    1b76:	4c f5       	brge	.+82     	; 0x1bca <HMI_handlingUnmatchedPasswords+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b78:	69 8d       	ldd	r22, Y+25	; 0x19
    1b7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e2       	ldi	r20, 0x20	; 32
    1b86:	51 e4       	ldi	r21, 0x41	; 65
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9c 8b       	std	Y+20, r25	; 0x14
    1b9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ba0:	0f c0       	rjmp	.+30     	; 0x1bc0 <HMI_handlingUnmatchedPasswords+0x340>
    1ba2:	88 ec       	ldi	r24, 0xC8	; 200
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9a 8b       	std	Y+18, r25	; 0x12
    1ba8:	89 8b       	std	Y+17, r24	; 0x11
    1baa:	89 89       	ldd	r24, Y+17	; 0x11
    1bac:	9a 89       	ldd	r25, Y+18	; 0x12
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <HMI_handlingUnmatchedPasswords+0x32e>
    1bb2:	9a 8b       	std	Y+18, r25	; 0x12
    1bb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	9c 8b       	std	Y+20, r25	; 0x14
    1bbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	69 f7       	brne	.-38     	; 0x1ba2 <HMI_handlingUnmatchedPasswords+0x322>
    1bc8:	92 c0       	rjmp	.+292    	; 0x1cee <HMI_handlingUnmatchedPasswords+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bca:	6d 89       	ldd	r22, Y+21	; 0x15
    1bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bce:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9c 8b       	std	Y+20, r25	; 0x14
    1bdc:	8b 8b       	std	Y+19, r24	; 0x13
    1bde:	8b 89       	ldd	r24, Y+19	; 0x13
    1be0:	9c 89       	ldd	r25, Y+20	; 0x14
    1be2:	98 8b       	std	Y+16, r25	; 0x10
    1be4:	8f 87       	std	Y+15, r24	; 0x0f
    1be6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be8:	98 89       	ldd	r25, Y+16	; 0x10
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <HMI_handlingUnmatchedPasswords+0x36a>
    1bee:	98 8b       	std	Y+16, r25	; 0x10
    1bf0:	8f 87       	std	Y+15, r24	; 0x0f
    1bf2:	7d c0       	rjmp	.+250    	; 0x1cee <HMI_handlingUnmatchedPasswords+0x46e>
			_delay_ms(500);


		}
	}
	else if(Password_status == MATCHED_PASSWORDS){
    1bf4:	80 91 e4 01 	lds	r24, 0x01E4
    1bf8:	86 30       	cpi	r24, 0x06	; 6
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <HMI_handlingUnmatchedPasswords+0x37e>
    1bfc:	78 c0       	rjmp	.+240    	; 0x1cee <HMI_handlingUnmatchedPasswords+0x46e>
		LCD_clearScreen();
    1bfe:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
		LCD_displayString("Valid Password ");
    1c02:	8d e9       	ldi	r24, 0x9D	; 157
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	aa ef       	ldi	r26, 0xFA	; 250
    1c10:	b3 e4       	ldi	r27, 0x43	; 67
    1c12:	8b 87       	std	Y+11, r24	; 0x0b
    1c14:	9c 87       	std	Y+12, r25	; 0x0c
    1c16:	ad 87       	std	Y+13, r26	; 0x0d
    1c18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	4a ef       	ldi	r20, 0xFA	; 250
    1c28:	54 e4       	ldi	r21, 0x44	; 68
    1c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	8f 83       	std	Y+7, r24	; 0x07
    1c34:	98 87       	std	Y+8, r25	; 0x08
    1c36:	a9 87       	std	Y+9, r26	; 0x09
    1c38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3c:	78 85       	ldd	r23, Y+8	; 0x08
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e8       	ldi	r20, 0x80	; 128
    1c48:	5f e3       	ldi	r21, 0x3F	; 63
    1c4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c4e:	88 23       	and	r24, r24
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <HMI_handlingUnmatchedPasswords+0x3dc>
		__ticks = 1;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9e 83       	std	Y+6, r25	; 0x06
    1c58:	8d 83       	std	Y+5, r24	; 0x05
    1c5a:	3f c0       	rjmp	.+126    	; 0x1cda <HMI_handlingUnmatchedPasswords+0x45a>
	else if (__tmp > 65535)
    1c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5e:	78 85       	ldd	r23, Y+8	; 0x08
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	3f ef       	ldi	r19, 0xFF	; 255
    1c68:	4f e7       	ldi	r20, 0x7F	; 127
    1c6a:	57 e4       	ldi	r21, 0x47	; 71
    1c6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c70:	18 16       	cp	r1, r24
    1c72:	4c f5       	brge	.+82     	; 0x1cc6 <HMI_handlingUnmatchedPasswords+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e2       	ldi	r20, 0x20	; 32
    1c82:	51 e4       	ldi	r21, 0x41	; 65
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	9e 83       	std	Y+6, r25	; 0x06
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <HMI_handlingUnmatchedPasswords+0x43c>
    1c9e:	88 ec       	ldi	r24, 0xC8	; 200
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9c 83       	std	Y+4, r25	; 0x04
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <HMI_handlingUnmatchedPasswords+0x42a>
    1cae:	9c 83       	std	Y+4, r25	; 0x04
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	69 f7       	brne	.-38     	; 0x1c9e <HMI_handlingUnmatchedPasswords+0x41e>
    1cc4:	14 c0       	rjmp	.+40     	; 0x1cee <HMI_handlingUnmatchedPasswords+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <HMI_handlingUnmatchedPasswords+0x466>
    1cea:	9a 83       	std	Y+2, r25	; 0x02
    1cec:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);

	}
	return Password_status;
    1cee:	80 91 e4 01 	lds	r24, 0x01E4
    1cf2:	89 af       	std	Y+57, r24	; 0x39
    1cf4:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1cf6:	e9 96       	adiw	r28, 0x39	; 57
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <HMI_lock>:
void HMI_lock(void){
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	2b 97       	sbiw	r28, 0x0b	; 11
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
	 *                            Ttimer = 1 milli second
	 *                            with compare value of 30000
	 *                            Ttimer = 30000 * 0.001 = 30 seconds
	 * So we need 2 overflows
	 **/
	Timer1_ConfigType TimerError = {0,30000,F_CPU_1024,CTCMode};
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	98 87       	std	Y+8, r25	; 0x08
    1d22:	8f 83       	std	Y+7, r24	; 0x07
    1d24:	eb ed       	ldi	r30, 0xDB	; 219
    1d26:	f1 e0       	ldi	r31, 0x01	; 1
    1d28:	fa 87       	std	Y+10, r31	; 0x0a
    1d2a:	e9 87       	std	Y+9, r30	; 0x09
    1d2c:	f6 e0       	ldi	r31, 0x06	; 6
    1d2e:	fb 87       	std	Y+11, r31	; 0x0b
    1d30:	e9 85       	ldd	r30, Y+9	; 0x09
    1d32:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d34:	00 80       	ld	r0, Z
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	9a 87       	std	Y+10, r25	; 0x0a
    1d3e:	89 87       	std	Y+9, r24	; 0x09
    1d40:	ef 81       	ldd	r30, Y+7	; 0x07
    1d42:	f8 85       	ldd	r31, Y+8	; 0x08
    1d44:	00 82       	st	Z, r0
    1d46:	8f 81       	ldd	r24, Y+7	; 0x07
    1d48:	98 85       	ldd	r25, Y+8	; 0x08
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	98 87       	std	Y+8, r25	; 0x08
    1d4e:	8f 83       	std	Y+7, r24	; 0x07
    1d50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d52:	91 50       	subi	r25, 0x01	; 1
    1d54:	9b 87       	std	Y+11, r25	; 0x0b
    1d56:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d58:	ee 23       	and	r30, r30
    1d5a:	51 f7       	brne	.-44     	; 0x1d30 <HMI_lock+0x28>
	LCD_clearScreen();
    1d5c:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
	LCD_displayString("Error No More attempts!!");
    1d60:	8d ea       	ldi	r24, 0xAD	; 173
    1d62:	91 e0       	ldi	r25, 0x01	; 1
    1d64:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
	g_tick =0;
    1d68:	10 92 e2 01 	sts	0x01E2, r1

	/*Initialize Timer Module*/
	Timer1_init(&TimerError);
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <Timer1_init>
	while(g_tick < 2);
    1d74:	80 91 e2 01 	lds	r24, 0x01E2
    1d78:	82 30       	cpi	r24, 0x02	; 2
    1d7a:	e0 f3       	brcs	.-8      	; 0x1d74 <HMI_lock+0x6c>
	LCD_clearScreen();
    1d7c:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <LCD_clearScreen>
	Timer1_deInit();
    1d80:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Timer1_deInit>
}
    1d84:	2b 96       	adiw	r28, 0x0b	; 11
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <GPIO_setupPinDirection+0x6>
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <GPIO_setupPinDirection+0x8>
    1d9e:	0f 92       	push	r0
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	6a 83       	std	Y+2, r22	; 0x02
    1da8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	88 30       	cpi	r24, 0x08	; 8
    1dae:	08 f0       	brcs	.+2      	; 0x1db2 <GPIO_setupPinDirection+0x1c>
    1db0:	d5 c0       	rjmp	.+426    	; 0x1f5c <GPIO_setupPinDirection+0x1c6>
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	84 30       	cpi	r24, 0x04	; 4
    1db6:	08 f0       	brcs	.+2      	; 0x1dba <GPIO_setupPinDirection+0x24>
    1db8:	d1 c0       	rjmp	.+418    	; 0x1f5c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	3d 83       	std	Y+5, r19	; 0x05
    1dc2:	2c 83       	std	Y+4, r18	; 0x04
    1dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	91 05       	cpc	r25, r1
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <GPIO_setupPinDirection+0x3a>
    1dce:	43 c0       	rjmp	.+134    	; 0x1e56 <GPIO_setupPinDirection+0xc0>
    1dd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1dd4:	22 30       	cpi	r18, 0x02	; 2
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	2c f4       	brge	.+10     	; 0x1de4 <GPIO_setupPinDirection+0x4e>
    1dda:	8c 81       	ldd	r24, Y+4	; 0x04
    1ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	71 f0       	breq	.+28     	; 0x1dfe <GPIO_setupPinDirection+0x68>
    1de2:	bc c0       	rjmp	.+376    	; 0x1f5c <GPIO_setupPinDirection+0x1c6>
    1de4:	2c 81       	ldd	r18, Y+4	; 0x04
    1de6:	3d 81       	ldd	r19, Y+5	; 0x05
    1de8:	22 30       	cpi	r18, 0x02	; 2
    1dea:	31 05       	cpc	r19, r1
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <GPIO_setupPinDirection+0x5a>
    1dee:	5f c0       	rjmp	.+190    	; 0x1eae <GPIO_setupPinDirection+0x118>
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	83 30       	cpi	r24, 0x03	; 3
    1df6:	91 05       	cpc	r25, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <GPIO_setupPinDirection+0x66>
    1dfa:	85 c0       	rjmp	.+266    	; 0x1f06 <GPIO_setupPinDirection+0x170>
    1dfc:	af c0       	rjmp	.+350    	; 0x1f5c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	a1 f4       	brne	.+40     	; 0x1e2c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1e04:	aa e3       	ldi	r26, 0x3A	; 58
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	ea e3       	ldi	r30, 0x3A	; 58
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <GPIO_setupPinDirection+0x8c>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <GPIO_setupPinDirection+0x88>
    1e26:	84 2b       	or	r24, r20
    1e28:	8c 93       	st	X, r24
    1e2a:	98 c0       	rjmp	.+304    	; 0x1f5c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1e2c:	aa e3       	ldi	r26, 0x3A	; 58
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ea e3       	ldi	r30, 0x3A	; 58
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	48 2f       	mov	r20, r24
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	02 2e       	mov	r0, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <GPIO_setupPinDirection+0xb4>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <GPIO_setupPinDirection+0xb0>
    1e4e:	80 95       	com	r24
    1e50:	84 23       	and	r24, r20
    1e52:	8c 93       	st	X, r24
    1e54:	83 c0       	rjmp	.+262    	; 0x1f5c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	a1 f4       	brne	.+40     	; 0x1e84 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1e5c:	a7 e3       	ldi	r26, 0x37	; 55
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e7 e3       	ldi	r30, 0x37	; 55
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	48 2f       	mov	r20, r24
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <GPIO_setupPinDirection+0xe4>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <GPIO_setupPinDirection+0xe0>
    1e7e:	84 2b       	or	r24, r20
    1e80:	8c 93       	st	X, r24
    1e82:	6c c0       	rjmp	.+216    	; 0x1f5c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1e84:	a7 e3       	ldi	r26, 0x37	; 55
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e7 e3       	ldi	r30, 0x37	; 55
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <GPIO_setupPinDirection+0x10c>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <GPIO_setupPinDirection+0x108>
    1ea6:	80 95       	com	r24
    1ea8:	84 23       	and	r24, r20
    1eaa:	8c 93       	st	X, r24
    1eac:	57 c0       	rjmp	.+174    	; 0x1f5c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	a1 f4       	brne	.+40     	; 0x1edc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1eb4:	a4 e3       	ldi	r26, 0x34	; 52
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e4 e3       	ldi	r30, 0x34	; 52
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	48 2f       	mov	r20, r24
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	02 2e       	mov	r0, r18
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <GPIO_setupPinDirection+0x13c>
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	0a 94       	dec	r0
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <GPIO_setupPinDirection+0x138>
    1ed6:	84 2b       	or	r24, r20
    1ed8:	8c 93       	st	X, r24
    1eda:	40 c0       	rjmp	.+128    	; 0x1f5c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1edc:	a4 e3       	ldi	r26, 0x34	; 52
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e4 e3       	ldi	r30, 0x34	; 52
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	48 2f       	mov	r20, r24
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	02 2e       	mov	r0, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <GPIO_setupPinDirection+0x164>
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	0a 94       	dec	r0
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <GPIO_setupPinDirection+0x160>
    1efe:	80 95       	com	r24
    1f00:	84 23       	and	r24, r20
    1f02:	8c 93       	st	X, r24
    1f04:	2b c0       	rjmp	.+86     	; 0x1f5c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	a1 f4       	brne	.+40     	; 0x1f34 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1f0c:	a1 e3       	ldi	r26, 0x31	; 49
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e1 e3       	ldi	r30, 0x31	; 49
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	48 2f       	mov	r20, r24
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	02 2e       	mov	r0, r18
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <GPIO_setupPinDirection+0x194>
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	0a 94       	dec	r0
    1f2c:	e2 f7       	brpl	.-8      	; 0x1f26 <GPIO_setupPinDirection+0x190>
    1f2e:	84 2b       	or	r24, r20
    1f30:	8c 93       	st	X, r24
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1f34:	a1 e3       	ldi	r26, 0x31	; 49
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e1 e3       	ldi	r30, 0x31	; 49
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	48 2f       	mov	r20, r24
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	02 2e       	mov	r0, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <GPIO_setupPinDirection+0x1bc>
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	0a 94       	dec	r0
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <GPIO_setupPinDirection+0x1b8>
    1f56:	80 95       	com	r24
    1f58:	84 23       	and	r24, r20
    1f5a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <GPIO_writePin+0x6>
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <GPIO_writePin+0x8>
    1f74:	0f 92       	push	r0
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	6a 83       	std	Y+2, r22	; 0x02
    1f7e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	88 30       	cpi	r24, 0x08	; 8
    1f84:	08 f0       	brcs	.+2      	; 0x1f88 <GPIO_writePin+0x1c>
    1f86:	d5 c0       	rjmp	.+426    	; 0x2132 <GPIO_writePin+0x1c6>
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	84 30       	cpi	r24, 0x04	; 4
    1f8c:	08 f0       	brcs	.+2      	; 0x1f90 <GPIO_writePin+0x24>
    1f8e:	d1 c0       	rjmp	.+418    	; 0x2132 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	3d 83       	std	Y+5, r19	; 0x05
    1f98:	2c 83       	std	Y+4, r18	; 0x04
    1f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <GPIO_writePin+0x3a>
    1fa4:	43 c0       	rjmp	.+134    	; 0x202c <GPIO_writePin+0xc0>
    1fa6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa8:	3d 81       	ldd	r19, Y+5	; 0x05
    1faa:	22 30       	cpi	r18, 0x02	; 2
    1fac:	31 05       	cpc	r19, r1
    1fae:	2c f4       	brge	.+10     	; 0x1fba <GPIO_writePin+0x4e>
    1fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	71 f0       	breq	.+28     	; 0x1fd4 <GPIO_writePin+0x68>
    1fb8:	bc c0       	rjmp	.+376    	; 0x2132 <GPIO_writePin+0x1c6>
    1fba:	2c 81       	ldd	r18, Y+4	; 0x04
    1fbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <GPIO_writePin+0x5a>
    1fc4:	5f c0       	rjmp	.+190    	; 0x2084 <GPIO_writePin+0x118>
    1fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fca:	83 30       	cpi	r24, 0x03	; 3
    1fcc:	91 05       	cpc	r25, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <GPIO_writePin+0x66>
    1fd0:	85 c0       	rjmp	.+266    	; 0x20dc <GPIO_writePin+0x170>
    1fd2:	af c0       	rjmp	.+350    	; 0x2132 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	81 30       	cpi	r24, 0x01	; 1
    1fd8:	a1 f4       	brne	.+40     	; 0x2002 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1fda:	ab e3       	ldi	r26, 0x3B	; 59
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	eb e3       	ldi	r30, 0x3B	; 59
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	48 2f       	mov	r20, r24
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	02 2e       	mov	r0, r18
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <GPIO_writePin+0x8c>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	0a 94       	dec	r0
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <GPIO_writePin+0x88>
    1ffc:	84 2b       	or	r24, r20
    1ffe:	8c 93       	st	X, r24
    2000:	98 c0       	rjmp	.+304    	; 0x2132 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2002:	ab e3       	ldi	r26, 0x3B	; 59
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	eb e3       	ldi	r30, 0x3B	; 59
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	48 2f       	mov	r20, r24
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	02 2e       	mov	r0, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <GPIO_writePin+0xb4>
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	0a 94       	dec	r0
    2022:	e2 f7       	brpl	.-8      	; 0x201c <GPIO_writePin+0xb0>
    2024:	80 95       	com	r24
    2026:	84 23       	and	r24, r20
    2028:	8c 93       	st	X, r24
    202a:	83 c0       	rjmp	.+262    	; 0x2132 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	81 30       	cpi	r24, 0x01	; 1
    2030:	a1 f4       	brne	.+40     	; 0x205a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2032:	a8 e3       	ldi	r26, 0x38	; 56
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e8 e3       	ldi	r30, 0x38	; 56
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	48 2f       	mov	r20, r24
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	02 2e       	mov	r0, r18
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <GPIO_writePin+0xe4>
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	0a 94       	dec	r0
    2052:	e2 f7       	brpl	.-8      	; 0x204c <GPIO_writePin+0xe0>
    2054:	84 2b       	or	r24, r20
    2056:	8c 93       	st	X, r24
    2058:	6c c0       	rjmp	.+216    	; 0x2132 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    205a:	a8 e3       	ldi	r26, 0x38	; 56
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e8 e3       	ldi	r30, 0x38	; 56
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	48 2f       	mov	r20, r24
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	02 2e       	mov	r0, r18
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <GPIO_writePin+0x10c>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	0a 94       	dec	r0
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <GPIO_writePin+0x108>
    207c:	80 95       	com	r24
    207e:	84 23       	and	r24, r20
    2080:	8c 93       	st	X, r24
    2082:	57 c0       	rjmp	.+174    	; 0x2132 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	a1 f4       	brne	.+40     	; 0x20b2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    208a:	a5 e3       	ldi	r26, 0x35	; 53
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e5 e3       	ldi	r30, 0x35	; 53
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	48 2f       	mov	r20, r24
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	02 2e       	mov	r0, r18
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <GPIO_writePin+0x13c>
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	0a 94       	dec	r0
    20aa:	e2 f7       	brpl	.-8      	; 0x20a4 <GPIO_writePin+0x138>
    20ac:	84 2b       	or	r24, r20
    20ae:	8c 93       	st	X, r24
    20b0:	40 c0       	rjmp	.+128    	; 0x2132 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    20b2:	a5 e3       	ldi	r26, 0x35	; 53
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e5 e3       	ldi	r30, 0x35	; 53
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	48 2f       	mov	r20, r24
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	02 2e       	mov	r0, r18
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <GPIO_writePin+0x164>
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	0a 94       	dec	r0
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <GPIO_writePin+0x160>
    20d4:	80 95       	com	r24
    20d6:	84 23       	and	r24, r20
    20d8:	8c 93       	st	X, r24
    20da:	2b c0       	rjmp	.+86     	; 0x2132 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	a1 f4       	brne	.+40     	; 0x210a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    20e2:	a2 e3       	ldi	r26, 0x32	; 50
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e2 e3       	ldi	r30, 0x32	; 50
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	48 2f       	mov	r20, r24
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	02 2e       	mov	r0, r18
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <GPIO_writePin+0x194>
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	0a 94       	dec	r0
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <GPIO_writePin+0x190>
    2104:	84 2b       	or	r24, r20
    2106:	8c 93       	st	X, r24
    2108:	14 c0       	rjmp	.+40     	; 0x2132 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    210a:	a2 e3       	ldi	r26, 0x32	; 50
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e2 e3       	ldi	r30, 0x32	; 50
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	48 2f       	mov	r20, r24
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 2e       	mov	r0, r18
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <GPIO_writePin+0x1bc>
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	0a 94       	dec	r0
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <GPIO_writePin+0x1b8>
    212c:	80 95       	com	r24
    212e:	84 23       	and	r24, r20
    2130:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <GPIO_readPin+0x6>
    2148:	00 d0       	rcall	.+0      	; 0x214a <GPIO_readPin+0x8>
    214a:	0f 92       	push	r0
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	8a 83       	std	Y+2, r24	; 0x02
    2152:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2154:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	88 30       	cpi	r24, 0x08	; 8
    215a:	08 f0       	brcs	.+2      	; 0x215e <GPIO_readPin+0x1c>
    215c:	84 c0       	rjmp	.+264    	; 0x2266 <GPIO_readPin+0x124>
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	84 30       	cpi	r24, 0x04	; 4
    2162:	08 f0       	brcs	.+2      	; 0x2166 <GPIO_readPin+0x24>
    2164:	80 c0       	rjmp	.+256    	; 0x2266 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	3d 83       	std	Y+5, r19	; 0x05
    216e:	2c 83       	std	Y+4, r18	; 0x04
    2170:	4c 81       	ldd	r20, Y+4	; 0x04
    2172:	5d 81       	ldd	r21, Y+5	; 0x05
    2174:	41 30       	cpi	r20, 0x01	; 1
    2176:	51 05       	cpc	r21, r1
    2178:	79 f1       	breq	.+94     	; 0x21d8 <GPIO_readPin+0x96>
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	9d 81       	ldd	r25, Y+5	; 0x05
    217e:	82 30       	cpi	r24, 0x02	; 2
    2180:	91 05       	cpc	r25, r1
    2182:	34 f4       	brge	.+12     	; 0x2190 <GPIO_readPin+0x4e>
    2184:	2c 81       	ldd	r18, Y+4	; 0x04
    2186:	3d 81       	ldd	r19, Y+5	; 0x05
    2188:	21 15       	cp	r18, r1
    218a:	31 05       	cpc	r19, r1
    218c:	69 f0       	breq	.+26     	; 0x21a8 <GPIO_readPin+0x66>
    218e:	6b c0       	rjmp	.+214    	; 0x2266 <GPIO_readPin+0x124>
    2190:	4c 81       	ldd	r20, Y+4	; 0x04
    2192:	5d 81       	ldd	r21, Y+5	; 0x05
    2194:	42 30       	cpi	r20, 0x02	; 2
    2196:	51 05       	cpc	r21, r1
    2198:	b9 f1       	breq	.+110    	; 0x2208 <GPIO_readPin+0xc6>
    219a:	8c 81       	ldd	r24, Y+4	; 0x04
    219c:	9d 81       	ldd	r25, Y+5	; 0x05
    219e:	83 30       	cpi	r24, 0x03	; 3
    21a0:	91 05       	cpc	r25, r1
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <GPIO_readPin+0x64>
    21a4:	49 c0       	rjmp	.+146    	; 0x2238 <GPIO_readPin+0xf6>
    21a6:	5f c0       	rjmp	.+190    	; 0x2266 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    21a8:	e9 e3       	ldi	r30, 0x39	; 57
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a9 01       	movw	r20, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <GPIO_readPin+0x7e>
    21bc:	55 95       	asr	r21
    21be:	47 95       	ror	r20
    21c0:	8a 95       	dec	r24
    21c2:	e2 f7       	brpl	.-8      	; 0x21bc <GPIO_readPin+0x7a>
    21c4:	ca 01       	movw	r24, r20
    21c6:	81 70       	andi	r24, 0x01	; 1
    21c8:	90 70       	andi	r25, 0x00	; 0
    21ca:	88 23       	and	r24, r24
    21cc:	19 f0       	breq	.+6      	; 0x21d4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	49 c0       	rjmp	.+146    	; 0x2266 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21d4:	19 82       	std	Y+1, r1	; 0x01
    21d6:	47 c0       	rjmp	.+142    	; 0x2266 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    21d8:	e6 e3       	ldi	r30, 0x36	; 54
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	a9 01       	movw	r20, r18
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <GPIO_readPin+0xae>
    21ec:	55 95       	asr	r21
    21ee:	47 95       	ror	r20
    21f0:	8a 95       	dec	r24
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <GPIO_readPin+0xaa>
    21f4:	ca 01       	movw	r24, r20
    21f6:	81 70       	andi	r24, 0x01	; 1
    21f8:	90 70       	andi	r25, 0x00	; 0
    21fa:	88 23       	and	r24, r24
    21fc:	19 f0       	breq	.+6      	; 0x2204 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	31 c0       	rjmp	.+98     	; 0x2266 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2204:	19 82       	std	Y+1, r1	; 0x01
    2206:	2f c0       	rjmp	.+94     	; 0x2266 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2208:	e3 e3       	ldi	r30, 0x33	; 51
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	88 2f       	mov	r24, r24
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a9 01       	movw	r20, r18
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <GPIO_readPin+0xde>
    221c:	55 95       	asr	r21
    221e:	47 95       	ror	r20
    2220:	8a 95       	dec	r24
    2222:	e2 f7       	brpl	.-8      	; 0x221c <GPIO_readPin+0xda>
    2224:	ca 01       	movw	r24, r20
    2226:	81 70       	andi	r24, 0x01	; 1
    2228:	90 70       	andi	r25, 0x00	; 0
    222a:	88 23       	and	r24, r24
    222c:	19 f0       	breq	.+6      	; 0x2234 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	19 c0       	rjmp	.+50     	; 0x2266 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2234:	19 82       	std	Y+1, r1	; 0x01
    2236:	17 c0       	rjmp	.+46     	; 0x2266 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2238:	e0 e3       	ldi	r30, 0x30	; 48
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a9 01       	movw	r20, r18
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <GPIO_readPin+0x10e>
    224c:	55 95       	asr	r21
    224e:	47 95       	ror	r20
    2250:	8a 95       	dec	r24
    2252:	e2 f7       	brpl	.-8      	; 0x224c <GPIO_readPin+0x10a>
    2254:	ca 01       	movw	r24, r20
    2256:	81 70       	andi	r24, 0x01	; 1
    2258:	90 70       	andi	r25, 0x00	; 0
    225a:	88 23       	and	r24, r24
    225c:	19 f0       	breq	.+6      	; 0x2264 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	01 c0       	rjmp	.+2      	; 0x2266 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2264:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2266:	89 81       	ldd	r24, Y+1	; 0x01
}
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <GPIO_setupPortDirection+0x6>
    227e:	00 d0       	rcall	.+0      	; 0x2280 <GPIO_setupPortDirection+0x8>
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	84 30       	cpi	r24, 0x04	; 4
    228c:	90 f5       	brcc	.+100    	; 0x22f2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	3c 83       	std	Y+4, r19	; 0x04
    2296:	2b 83       	std	Y+3, r18	; 0x03
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	9c 81       	ldd	r25, Y+4	; 0x04
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	91 05       	cpc	r25, r1
    22a0:	d1 f0       	breq	.+52     	; 0x22d6 <GPIO_setupPortDirection+0x5e>
    22a2:	2b 81       	ldd	r18, Y+3	; 0x03
    22a4:	3c 81       	ldd	r19, Y+4	; 0x04
    22a6:	22 30       	cpi	r18, 0x02	; 2
    22a8:	31 05       	cpc	r19, r1
    22aa:	2c f4       	brge	.+10     	; 0x22b6 <GPIO_setupPortDirection+0x3e>
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	61 f0       	breq	.+24     	; 0x22cc <GPIO_setupPortDirection+0x54>
    22b4:	1e c0       	rjmp	.+60     	; 0x22f2 <GPIO_setupPortDirection+0x7a>
    22b6:	2b 81       	ldd	r18, Y+3	; 0x03
    22b8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ba:	22 30       	cpi	r18, 0x02	; 2
    22bc:	31 05       	cpc	r19, r1
    22be:	81 f0       	breq	.+32     	; 0x22e0 <GPIO_setupPortDirection+0x68>
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	83 30       	cpi	r24, 0x03	; 3
    22c6:	91 05       	cpc	r25, r1
    22c8:	81 f0       	breq	.+32     	; 0x22ea <GPIO_setupPortDirection+0x72>
    22ca:	13 c0       	rjmp	.+38     	; 0x22f2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    22cc:	ea e3       	ldi	r30, 0x3A	; 58
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	80 83       	st	Z, r24
    22d4:	0e c0       	rjmp	.+28     	; 0x22f2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    22d6:	e7 e3       	ldi	r30, 0x37	; 55
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	80 83       	st	Z, r24
    22de:	09 c0       	rjmp	.+18     	; 0x22f2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    22e0:	e4 e3       	ldi	r30, 0x34	; 52
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	80 83       	st	Z, r24
    22e8:	04 c0       	rjmp	.+8      	; 0x22f2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    22ea:	e1 e3       	ldi	r30, 0x31	; 49
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	80 83       	st	Z, r24
			break;
		}
	}
}
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	00 d0       	rcall	.+0      	; 0x2306 <GPIO_writePort+0x6>
    2306:	00 d0       	rcall	.+0      	; 0x2308 <GPIO_writePort+0x8>
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	84 30       	cpi	r24, 0x04	; 4
    2314:	90 f5       	brcc	.+100    	; 0x237a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	3c 83       	std	Y+4, r19	; 0x04
    231e:	2b 83       	std	Y+3, r18	; 0x03
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	91 05       	cpc	r25, r1
    2328:	d1 f0       	breq	.+52     	; 0x235e <GPIO_writePort+0x5e>
    232a:	2b 81       	ldd	r18, Y+3	; 0x03
    232c:	3c 81       	ldd	r19, Y+4	; 0x04
    232e:	22 30       	cpi	r18, 0x02	; 2
    2330:	31 05       	cpc	r19, r1
    2332:	2c f4       	brge	.+10     	; 0x233e <GPIO_writePort+0x3e>
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	61 f0       	breq	.+24     	; 0x2354 <GPIO_writePort+0x54>
    233c:	1e c0       	rjmp	.+60     	; 0x237a <GPIO_writePort+0x7a>
    233e:	2b 81       	ldd	r18, Y+3	; 0x03
    2340:	3c 81       	ldd	r19, Y+4	; 0x04
    2342:	22 30       	cpi	r18, 0x02	; 2
    2344:	31 05       	cpc	r19, r1
    2346:	81 f0       	breq	.+32     	; 0x2368 <GPIO_writePort+0x68>
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	83 30       	cpi	r24, 0x03	; 3
    234e:	91 05       	cpc	r25, r1
    2350:	81 f0       	breq	.+32     	; 0x2372 <GPIO_writePort+0x72>
    2352:	13 c0       	rjmp	.+38     	; 0x237a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2354:	eb e3       	ldi	r30, 0x3B	; 59
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	80 83       	st	Z, r24
    235c:	0e c0       	rjmp	.+28     	; 0x237a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    235e:	e8 e3       	ldi	r30, 0x38	; 56
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	80 83       	st	Z, r24
    2366:	09 c0       	rjmp	.+18     	; 0x237a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2368:	e5 e3       	ldi	r30, 0x35	; 53
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	80 83       	st	Z, r24
    2370:	04 c0       	rjmp	.+8      	; 0x237a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2372:	e2 e3       	ldi	r30, 0x32	; 50
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	80 83       	st	Z, r24
			break;
		}
	}
}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	00 d0       	rcall	.+0      	; 0x238e <GPIO_readPort+0x6>
    238e:	00 d0       	rcall	.+0      	; 0x2390 <GPIO_readPort+0x8>
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2396:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	84 30       	cpi	r24, 0x04	; 4
    239c:	90 f5       	brcc	.+100    	; 0x2402 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	3c 83       	std	Y+4, r19	; 0x04
    23a6:	2b 83       	std	Y+3, r18	; 0x03
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	91 05       	cpc	r25, r1
    23b0:	d1 f0       	breq	.+52     	; 0x23e6 <GPIO_readPort+0x5e>
    23b2:	2b 81       	ldd	r18, Y+3	; 0x03
    23b4:	3c 81       	ldd	r19, Y+4	; 0x04
    23b6:	22 30       	cpi	r18, 0x02	; 2
    23b8:	31 05       	cpc	r19, r1
    23ba:	2c f4       	brge	.+10     	; 0x23c6 <GPIO_readPort+0x3e>
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	61 f0       	breq	.+24     	; 0x23dc <GPIO_readPort+0x54>
    23c4:	1e c0       	rjmp	.+60     	; 0x2402 <GPIO_readPort+0x7a>
    23c6:	2b 81       	ldd	r18, Y+3	; 0x03
    23c8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ca:	22 30       	cpi	r18, 0x02	; 2
    23cc:	31 05       	cpc	r19, r1
    23ce:	81 f0       	breq	.+32     	; 0x23f0 <GPIO_readPort+0x68>
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	83 30       	cpi	r24, 0x03	; 3
    23d6:	91 05       	cpc	r25, r1
    23d8:	81 f0       	breq	.+32     	; 0x23fa <GPIO_readPort+0x72>
    23da:	13 c0       	rjmp	.+38     	; 0x2402 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    23dc:	e9 e3       	ldi	r30, 0x39	; 57
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	0e c0       	rjmp	.+28     	; 0x2402 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    23e6:	e6 e3       	ldi	r30, 0x36	; 54
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	09 c0       	rjmp	.+18     	; 0x2402 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    23f0:	e3 e3       	ldi	r30, 0x33	; 51
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	04 c0       	rjmp	.+8      	; 0x2402 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    23fa:	e0 e3       	ldi	r30, 0x30	; 48
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2402:	89 81       	ldd	r24, Y+1	; 0x01
}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	00 d0       	rcall	.+0      	; 0x2418 <KEYPAD_getPressedKey+0x6>
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	62 e0       	ldi	r22, 0x02	; 2
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	63 e0       	ldi	r22, 0x03	; 3
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	64 e0       	ldi	r22, 0x04	; 4
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	65 e0       	ldi	r22, 0x05	; 5
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	66 e0       	ldi	r22, 0x06	; 6
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	67 e0       	ldi	r22, 0x07	; 7
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    246c:	19 82       	std	Y+1, r1	; 0x01
    246e:	35 c0       	rjmp	.+106    	; 0x24da <KEYPAD_getPressedKey+0xc8>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	69 81       	ldd	r22, Y+1	; 0x01
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	69 81       	ldd	r22, Y+1	; 0x01
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2484:	1a 82       	std	Y+2, r1	; 0x02
    2486:	1e c0       	rjmp	.+60     	; 0x24c4 <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	98 2f       	mov	r25, r24
    248c:	9c 5f       	subi	r25, 0xFC	; 252
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	69 2f       	mov	r22, r25
    2492:	0e 94 a1 10 	call	0x2142	; 0x2142 <GPIO_readPin>
    2496:	88 23       	and	r24, r24
    2498:	91 f4       	brne	.+36     	; 0x24be <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	88 2f       	mov	r24, r24
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	98 2f       	mov	r25, r24
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	89 0f       	add	r24, r25
    24ae:	8f 5f       	subi	r24, 0xFF	; 255
    24b0:	0e 94 71 12 	call	0x24e2	; 0x24e2 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	8f 5f       	subi	r24, 0xFF	; 255
    24c2:	8a 83       	std	Y+2, r24	; 0x02
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	84 30       	cpi	r24, 0x04	; 4
    24c8:	f8 f2       	brcs	.-66     	; 0x2488 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	69 81       	ldd	r22, Y+1	; 0x01
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	8f 5f       	subi	r24, 0xFF	; 255
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	84 30       	cpi	r24, 0x04	; 4
    24de:	40 f2       	brcs	.-112    	; 0x2470 <KEYPAD_getPressedKey+0x5e>
    24e0:	c5 cf       	rjmp	.-118    	; 0x246c <KEYPAD_getPressedKey+0x5a>

000024e2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <KEYPAD_4x4_adjustKeyNumber+0x8>
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    24f0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	3c 83       	std	Y+4, r19	; 0x04
    24fa:	2b 83       	std	Y+3, r18	; 0x03
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	88 30       	cpi	r24, 0x08	; 8
    2502:	91 05       	cpc	r25, r1
    2504:	09 f4       	brne	.+2      	; 0x2508 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2506:	70 c0       	rjmp	.+224    	; 0x25e8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2508:	2b 81       	ldd	r18, Y+3	; 0x03
    250a:	3c 81       	ldd	r19, Y+4	; 0x04
    250c:	29 30       	cpi	r18, 0x09	; 9
    250e:	31 05       	cpc	r19, r1
    2510:	5c f5       	brge	.+86     	; 0x2568 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	84 30       	cpi	r24, 0x04	; 4
    2518:	91 05       	cpc	r25, r1
    251a:	09 f4       	brne	.+2      	; 0x251e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    251c:	59 c0       	rjmp	.+178    	; 0x25d0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    251e:	2b 81       	ldd	r18, Y+3	; 0x03
    2520:	3c 81       	ldd	r19, Y+4	; 0x04
    2522:	25 30       	cpi	r18, 0x05	; 5
    2524:	31 05       	cpc	r19, r1
    2526:	9c f4       	brge	.+38     	; 0x254e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	9c 81       	ldd	r25, Y+4	; 0x04
    252c:	82 30       	cpi	r24, 0x02	; 2
    252e:	91 05       	cpc	r25, r1
    2530:	09 f4       	brne	.+2      	; 0x2534 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2532:	48 c0       	rjmp	.+144    	; 0x25c4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2534:	2b 81       	ldd	r18, Y+3	; 0x03
    2536:	3c 81       	ldd	r19, Y+4	; 0x04
    2538:	23 30       	cpi	r18, 0x03	; 3
    253a:	31 05       	cpc	r19, r1
    253c:	0c f0       	brlt	.+2      	; 0x2540 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    253e:	45 c0       	rjmp	.+138    	; 0x25ca <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	9c 81       	ldd	r25, Y+4	; 0x04
    2544:	81 30       	cpi	r24, 0x01	; 1
    2546:	91 05       	cpc	r25, r1
    2548:	09 f4       	brne	.+2      	; 0x254c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    254a:	39 c0       	rjmp	.+114    	; 0x25be <KEYPAD_4x4_adjustKeyNumber+0xdc>
    254c:	67 c0       	rjmp	.+206    	; 0x261c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    254e:	2b 81       	ldd	r18, Y+3	; 0x03
    2550:	3c 81       	ldd	r19, Y+4	; 0x04
    2552:	26 30       	cpi	r18, 0x06	; 6
    2554:	31 05       	cpc	r19, r1
    2556:	09 f4       	brne	.+2      	; 0x255a <KEYPAD_4x4_adjustKeyNumber+0x78>
    2558:	41 c0       	rjmp	.+130    	; 0x25dc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	87 30       	cpi	r24, 0x07	; 7
    2560:	91 05       	cpc	r25, r1
    2562:	0c f0       	brlt	.+2      	; 0x2566 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2564:	3e c0       	rjmp	.+124    	; 0x25e2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2566:	37 c0       	rjmp	.+110    	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2568:	2b 81       	ldd	r18, Y+3	; 0x03
    256a:	3c 81       	ldd	r19, Y+4	; 0x04
    256c:	2c 30       	cpi	r18, 0x0C	; 12
    256e:	31 05       	cpc	r19, r1
    2570:	09 f4       	brne	.+2      	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2572:	46 c0       	rjmp	.+140    	; 0x2600 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	9c 81       	ldd	r25, Y+4	; 0x04
    2578:	8d 30       	cpi	r24, 0x0D	; 13
    257a:	91 05       	cpc	r25, r1
    257c:	5c f4       	brge	.+22     	; 0x2594 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    257e:	2b 81       	ldd	r18, Y+3	; 0x03
    2580:	3c 81       	ldd	r19, Y+4	; 0x04
    2582:	2a 30       	cpi	r18, 0x0A	; 10
    2584:	31 05       	cpc	r19, r1
    2586:	b1 f1       	breq	.+108    	; 0x25f4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	8b 30       	cpi	r24, 0x0B	; 11
    258e:	91 05       	cpc	r25, r1
    2590:	a4 f5       	brge	.+104    	; 0x25fa <KEYPAD_4x4_adjustKeyNumber+0x118>
    2592:	2d c0       	rjmp	.+90     	; 0x25ee <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2594:	2b 81       	ldd	r18, Y+3	; 0x03
    2596:	3c 81       	ldd	r19, Y+4	; 0x04
    2598:	2e 30       	cpi	r18, 0x0E	; 14
    259a:	31 05       	cpc	r19, r1
    259c:	b9 f1       	breq	.+110    	; 0x260c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	8e 30       	cpi	r24, 0x0E	; 14
    25a4:	91 05       	cpc	r25, r1
    25a6:	7c f1       	brlt	.+94     	; 0x2606 <KEYPAD_4x4_adjustKeyNumber+0x124>
    25a8:	2b 81       	ldd	r18, Y+3	; 0x03
    25aa:	3c 81       	ldd	r19, Y+4	; 0x04
    25ac:	2f 30       	cpi	r18, 0x0F	; 15
    25ae:	31 05       	cpc	r19, r1
    25b0:	79 f1       	breq	.+94     	; 0x2610 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	80 31       	cpi	r24, 0x10	; 16
    25b8:	91 05       	cpc	r25, r1
    25ba:	69 f1       	breq	.+90     	; 0x2616 <KEYPAD_4x4_adjustKeyNumber+0x134>
    25bc:	2f c0       	rjmp	.+94     	; 0x261c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    25be:	87 e0       	ldi	r24, 0x07	; 7
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	2e c0       	rjmp	.+92     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    25c4:	88 e0       	ldi	r24, 0x08	; 8
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	2b c0       	rjmp	.+86     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    25ca:	89 e0       	ldi	r24, 0x09	; 9
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	28 c0       	rjmp	.+80     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    25d0:	85 e2       	ldi	r24, 0x25	; 37
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	25 c0       	rjmp	.+74     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    25d6:	84 e0       	ldi	r24, 0x04	; 4
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	22 c0       	rjmp	.+68     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    25dc:	85 e0       	ldi	r24, 0x05	; 5
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	1f c0       	rjmp	.+62     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    25e2:	86 e0       	ldi	r24, 0x06	; 6
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	1c c0       	rjmp	.+56     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    25e8:	8a e2       	ldi	r24, 0x2A	; 42
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	19 c0       	rjmp	.+50     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	16 c0       	rjmp	.+44     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	13 c0       	rjmp	.+38     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    25fa:	83 e0       	ldi	r24, 0x03	; 3
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	10 c0       	rjmp	.+32     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2600:	8d e2       	ldi	r24, 0x2D	; 45
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	0d c0       	rjmp	.+26     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2606:	8d e0       	ldi	r24, 0x0D	; 13
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	0a c0       	rjmp	.+20     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    260c:	19 82       	std	Y+1, r1	; 0x01
    260e:	08 c0       	rjmp	.+16     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2610:	8d e3       	ldi	r24, 0x3D	; 61
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	05 c0       	rjmp	.+10     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2616:	8b e2       	ldi	r24, 0x2B	; 43
    2618:	89 83       	std	Y+1, r24	; 0x01
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2620:	89 81       	ldd	r24, Y+1	; 0x01
}
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	08 95       	ret

00002630 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	2e 97       	sbiw	r28, 0x0e	; 14
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	64 e0       	ldi	r22, 0x04	; 4
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	66 e0       	ldi	r22, 0x06	; 6
    2652:	41 e0       	ldi	r20, 0x01	; 1
    2654:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	65 e0       	ldi	r22, 0x05	; 5
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); //Ground
    2662:	82 e0       	ldi	r24, 0x02	; 2
    2664:	65 e0       	ldi	r22, 0x05	; 5
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	a0 ea       	ldi	r26, 0xA0	; 160
    2672:	b1 e4       	ldi	r27, 0x41	; 65
    2674:	8b 87       	std	Y+11, r24	; 0x0b
    2676:	9c 87       	std	Y+12, r25	; 0x0c
    2678:	ad 87       	std	Y+13, r26	; 0x0d
    267a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267c:	6b 85       	ldd	r22, Y+11	; 0x0b
    267e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2680:	8d 85       	ldd	r24, Y+13	; 0x0d
    2682:	9e 85       	ldd	r25, Y+14	; 0x0e
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	4a ef       	ldi	r20, 0xFA	; 250
    268a:	54 e4       	ldi	r21, 0x44	; 68
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8f 83       	std	Y+7, r24	; 0x07
    2696:	98 87       	std	Y+8, r25	; 0x08
    2698:	a9 87       	std	Y+9, r26	; 0x09
    269a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269c:	6f 81       	ldd	r22, Y+7	; 0x07
    269e:	78 85       	ldd	r23, Y+8	; 0x08
    26a0:	89 85       	ldd	r24, Y+9	; 0x09
    26a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e8       	ldi	r20, 0x80	; 128
    26aa:	5f e3       	ldi	r21, 0x3F	; 63
    26ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b0:	88 23       	and	r24, r24
    26b2:	2c f4       	brge	.+10     	; 0x26be <LCD_init+0x8e>
		__ticks = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
    26bc:	3f c0       	rjmp	.+126    	; 0x273c <LCD_init+0x10c>
	else if (__tmp > 65535)
    26be:	6f 81       	ldd	r22, Y+7	; 0x07
    26c0:	78 85       	ldd	r23, Y+8	; 0x08
    26c2:	89 85       	ldd	r24, Y+9	; 0x09
    26c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	3f ef       	ldi	r19, 0xFF	; 255
    26ca:	4f e7       	ldi	r20, 0x7F	; 127
    26cc:	57 e4       	ldi	r21, 0x47	; 71
    26ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d2:	18 16       	cp	r1, r24
    26d4:	4c f5       	brge	.+82     	; 0x2728 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26da:	8d 85       	ldd	r24, Y+13	; 0x0d
    26dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e2       	ldi	r20, 0x20	; 32
    26e4:	51 e4       	ldi	r21, 0x41	; 65
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
    26fe:	0f c0       	rjmp	.+30     	; 0x271e <LCD_init+0xee>
    2700:	88 ec       	ldi	r24, 0xC8	; 200
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9c 83       	std	Y+4, r25	; 0x04
    2706:	8b 83       	std	Y+3, r24	; 0x03
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <LCD_init+0xdc>
    2710:	9c 83       	std	Y+4, r25	; 0x04
    2712:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2714:	8d 81       	ldd	r24, Y+5	; 0x05
    2716:	9e 81       	ldd	r25, Y+6	; 0x06
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	9e 81       	ldd	r25, Y+6	; 0x06
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	69 f7       	brne	.-38     	; 0x2700 <LCD_init+0xd0>
    2726:	14 c0       	rjmp	.+40     	; 0x2750 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2728:	6f 81       	ldd	r22, Y+7	; 0x07
    272a:	78 85       	ldd	r23, Y+8	; 0x08
    272c:	89 85       	ldd	r24, Y+9	; 0x09
    272e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
    273c:	8d 81       	ldd	r24, Y+5	; 0x05
    273e:	9e 81       	ldd	r25, Y+6	; 0x06
    2740:	9a 83       	std	Y+2, r25	; 0x02
    2742:	89 83       	std	Y+1, r24	; 0x01
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	9a 81       	ldd	r25, Y+2	; 0x02
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <LCD_init+0x118>
    274c:	9a 83       	std	Y+2, r25	; 0x02
    274e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2750:	82 e0       	ldi	r24, 0x02	; 2
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	41 e0       	ldi	r20, 0x01	; 1
    2756:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    275a:	82 e0       	ldi	r24, 0x02	; 2
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2764:	82 e0       	ldi	r24, 0x02	; 2
    2766:	62 e0       	ldi	r22, 0x02	; 2
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    276e:	82 e0       	ldi	r24, 0x02	; 2
    2770:	63 e0       	ldi	r22, 0x03	; 3
    2772:	41 e0       	ldi	r20, 0x01	; 1
    2774:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2778:	83 e3       	ldi	r24, 0x33	; 51
    277a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    277e:	82 e3       	ldi	r24, 0x32	; 50
    2780:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2784:	88 e2       	ldi	r24, 0x28	; 40
    2786:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    278a:	8c e0       	ldi	r24, 0x0C	; 12
    278c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_sendCommand>
}
    2796:	2e 96       	adiw	r28, 0x0e	; 14
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    27a8:	0f 93       	push	r16
    27aa:	1f 93       	push	r17
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	c3 56       	subi	r28, 0x63	; 99
    27b6:	d0 40       	sbci	r29, 0x00	; 0
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	de bf       	out	0x3e, r29	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	fe 01       	movw	r30, r28
    27c4:	ed 59       	subi	r30, 0x9D	; 157
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    27ca:	82 e0       	ldi	r24, 0x02	; 2
    27cc:	64 e0       	ldi	r22, 0x04	; 4
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    27d4:	fe 01       	movw	r30, r28
    27d6:	e1 5a       	subi	r30, 0xA1	; 161
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	a0 e8       	ldi	r26, 0x80	; 128
    27e0:	bf e3       	ldi	r27, 0x3F	; 63
    27e2:	80 83       	st	Z, r24
    27e4:	91 83       	std	Z+1, r25	; 0x01
    27e6:	a2 83       	std	Z+2, r26	; 0x02
    27e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ea:	8e 01       	movw	r16, r28
    27ec:	05 5a       	subi	r16, 0xA5	; 165
    27ee:	1f 4f       	sbci	r17, 0xFF	; 255
    27f0:	fe 01       	movw	r30, r28
    27f2:	e1 5a       	subi	r30, 0xA1	; 161
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	60 81       	ld	r22, Z
    27f8:	71 81       	ldd	r23, Z+1	; 0x01
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	93 81       	ldd	r25, Z+3	; 0x03
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	4a ef       	ldi	r20, 0xFA	; 250
    2804:	54 e4       	ldi	r21, 0x44	; 68
    2806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	f8 01       	movw	r30, r16
    2810:	80 83       	st	Z, r24
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	a2 83       	std	Z+2, r26	; 0x02
    2816:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2818:	fe 01       	movw	r30, r28
    281a:	e5 5a       	subi	r30, 0xA5	; 165
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	60 81       	ld	r22, Z
    2820:	71 81       	ldd	r23, Z+1	; 0x01
    2822:	82 81       	ldd	r24, Z+2	; 0x02
    2824:	93 81       	ldd	r25, Z+3	; 0x03
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	44 f4       	brge	.+16     	; 0x2846 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2836:	fe 01       	movw	r30, r28
    2838:	e7 5a       	subi	r30, 0xA7	; 167
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	91 83       	std	Z+1, r25	; 0x01
    2842:	80 83       	st	Z, r24
    2844:	64 c0       	rjmp	.+200    	; 0x290e <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2846:	fe 01       	movw	r30, r28
    2848:	e5 5a       	subi	r30, 0xA5	; 165
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	60 81       	ld	r22, Z
    284e:	71 81       	ldd	r23, Z+1	; 0x01
    2850:	82 81       	ldd	r24, Z+2	; 0x02
    2852:	93 81       	ldd	r25, Z+3	; 0x03
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	3f ef       	ldi	r19, 0xFF	; 255
    2858:	4f e7       	ldi	r20, 0x7F	; 127
    285a:	57 e4       	ldi	r21, 0x47	; 71
    285c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2860:	18 16       	cp	r1, r24
    2862:	0c f0       	brlt	.+2      	; 0x2866 <LCD_sendCommand+0xbe>
    2864:	43 c0       	rjmp	.+134    	; 0x28ec <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2866:	fe 01       	movw	r30, r28
    2868:	e1 5a       	subi	r30, 0xA1	; 161
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	60 81       	ld	r22, Z
    286e:	71 81       	ldd	r23, Z+1	; 0x01
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e2       	ldi	r20, 0x20	; 32
    287a:	51 e4       	ldi	r21, 0x41	; 65
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	8e 01       	movw	r16, r28
    2886:	07 5a       	subi	r16, 0xA7	; 167
    2888:	1f 4f       	sbci	r17, 0xFF	; 255
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	f8 01       	movw	r30, r16
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	80 83       	st	Z, r24
    289c:	1f c0       	rjmp	.+62     	; 0x28dc <LCD_sendCommand+0x134>
    289e:	fe 01       	movw	r30, r28
    28a0:	e9 5a       	subi	r30, 0xA9	; 169
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	88 ec       	ldi	r24, 0xC8	; 200
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
    28ac:	fe 01       	movw	r30, r28
    28ae:	e9 5a       	subi	r30, 0xA9	; 169
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <LCD_sendCommand+0x10e>
    28ba:	fe 01       	movw	r30, r28
    28bc:	e9 5a       	subi	r30, 0xA9	; 169
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c4:	de 01       	movw	r26, r28
    28c6:	a7 5a       	subi	r26, 0xA7	; 167
    28c8:	bf 4f       	sbci	r27, 0xFF	; 255
    28ca:	fe 01       	movw	r30, r28
    28cc:	e7 5a       	subi	r30, 0xA7	; 167
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	11 96       	adiw	r26, 0x01	; 1
    28d8:	9c 93       	st	X, r25
    28da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28dc:	fe 01       	movw	r30, r28
    28de:	e7 5a       	subi	r30, 0xA7	; 167
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 81       	ld	r24, Z
    28e4:	91 81       	ldd	r25, Z+1	; 0x01
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	d1 f6       	brne	.-76     	; 0x289e <LCD_sendCommand+0xf6>
    28ea:	27 c0       	rjmp	.+78     	; 0x293a <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ec:	8e 01       	movw	r16, r28
    28ee:	07 5a       	subi	r16, 0xA7	; 167
    28f0:	1f 4f       	sbci	r17, 0xFF	; 255
    28f2:	fe 01       	movw	r30, r28
    28f4:	e5 5a       	subi	r30, 0xA5	; 165
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	82 81       	ldd	r24, Z+2	; 0x02
    28fe:	93 81       	ldd	r25, Z+3	; 0x03
    2900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	f8 01       	movw	r30, r16
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	80 83       	st	Z, r24
    290e:	de 01       	movw	r26, r28
    2910:	ab 5a       	subi	r26, 0xAB	; 171
    2912:	bf 4f       	sbci	r27, 0xFF	; 255
    2914:	fe 01       	movw	r30, r28
    2916:	e7 5a       	subi	r30, 0xA7	; 167
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 81       	ld	r24, Z
    291c:	91 81       	ldd	r25, Z+1	; 0x01
    291e:	8d 93       	st	X+, r24
    2920:	9c 93       	st	X, r25
    2922:	fe 01       	movw	r30, r28
    2924:	eb 5a       	subi	r30, 0xAB	; 171
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <LCD_sendCommand+0x184>
    2930:	fe 01       	movw	r30, r28
    2932:	eb 5a       	subi	r30, 0xAB	; 171
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    293a:	82 e0       	ldi	r24, 0x02	; 2
    293c:	66 e0       	ldi	r22, 0x06	; 6
    293e:	41 e0       	ldi	r20, 0x01	; 1
    2940:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    2944:	fe 01       	movw	r30, r28
    2946:	ef 5a       	subi	r30, 0xAF	; 175
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	a0 e8       	ldi	r26, 0x80	; 128
    2950:	bf e3       	ldi	r27, 0x3F	; 63
    2952:	80 83       	st	Z, r24
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	a2 83       	std	Z+2, r26	; 0x02
    2958:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295a:	8e 01       	movw	r16, r28
    295c:	03 5b       	subi	r16, 0xB3	; 179
    295e:	1f 4f       	sbci	r17, 0xFF	; 255
    2960:	fe 01       	movw	r30, r28
    2962:	ef 5a       	subi	r30, 0xAF	; 175
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	4a ef       	ldi	r20, 0xFA	; 250
    2974:	54 e4       	ldi	r21, 0x44	; 68
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	f8 01       	movw	r30, r16
    2980:	80 83       	st	Z, r24
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	a2 83       	std	Z+2, r26	; 0x02
    2986:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2988:	fe 01       	movw	r30, r28
    298a:	e3 5b       	subi	r30, 0xB3	; 179
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e8       	ldi	r20, 0x80	; 128
    299c:	5f e3       	ldi	r21, 0x3F	; 63
    299e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a2:	88 23       	and	r24, r24
    29a4:	44 f4       	brge	.+16     	; 0x29b6 <LCD_sendCommand+0x20e>
		__ticks = 1;
    29a6:	fe 01       	movw	r30, r28
    29a8:	e5 5b       	subi	r30, 0xB5	; 181
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	80 83       	st	Z, r24
    29b4:	64 c0       	rjmp	.+200    	; 0x2a7e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    29b6:	fe 01       	movw	r30, r28
    29b8:	e3 5b       	subi	r30, 0xB3	; 179
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	3f ef       	ldi	r19, 0xFF	; 255
    29c8:	4f e7       	ldi	r20, 0x7F	; 127
    29ca:	57 e4       	ldi	r21, 0x47	; 71
    29cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d0:	18 16       	cp	r1, r24
    29d2:	0c f0       	brlt	.+2      	; 0x29d6 <LCD_sendCommand+0x22e>
    29d4:	43 c0       	rjmp	.+134    	; 0x2a5c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	fe 01       	movw	r30, r28
    29d8:	ef 5a       	subi	r30, 0xAF	; 175
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e2       	ldi	r20, 0x20	; 32
    29ea:	51 e4       	ldi	r21, 0x41	; 65
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	8e 01       	movw	r16, r28
    29f6:	05 5b       	subi	r16, 0xB5	; 181
    29f8:	1f 4f       	sbci	r17, 0xFF	; 255
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	f8 01       	movw	r30, r16
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	1f c0       	rjmp	.+62     	; 0x2a4c <LCD_sendCommand+0x2a4>
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e7 5b       	subi	r30, 0xB7	; 183
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	88 ec       	ldi	r24, 0xC8	; 200
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	91 83       	std	Z+1, r25	; 0x01
    2a1a:	80 83       	st	Z, r24
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e7 5b       	subi	r30, 0xB7	; 183
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	80 81       	ld	r24, Z
    2a24:	91 81       	ldd	r25, Z+1	; 0x01
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <LCD_sendCommand+0x27e>
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e7 5b       	subi	r30, 0xB7	; 183
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a34:	de 01       	movw	r26, r28
    2a36:	a5 5b       	subi	r26, 0xB5	; 181
    2a38:	bf 4f       	sbci	r27, 0xFF	; 255
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e5 5b       	subi	r30, 0xB5	; 181
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 81       	ld	r24, Z
    2a42:	91 81       	ldd	r25, Z+1	; 0x01
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	11 96       	adiw	r26, 0x01	; 1
    2a48:	9c 93       	st	X, r25
    2a4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e5 5b       	subi	r30, 0xB5	; 181
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	d1 f6       	brne	.-76     	; 0x2a0e <LCD_sendCommand+0x266>
    2a5a:	27 c0       	rjmp	.+78     	; 0x2aaa <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5c:	8e 01       	movw	r16, r28
    2a5e:	05 5b       	subi	r16, 0xB5	; 181
    2a60:	1f 4f       	sbci	r17, 0xFF	; 255
    2a62:	fe 01       	movw	r30, r28
    2a64:	e3 5b       	subi	r30, 0xB3	; 179
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	60 81       	ld	r22, Z
    2a6a:	71 81       	ldd	r23, Z+1	; 0x01
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	93 81       	ldd	r25, Z+3	; 0x03
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	f8 01       	movw	r30, r16
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	80 83       	st	Z, r24
    2a7e:	de 01       	movw	r26, r28
    2a80:	a9 5b       	subi	r26, 0xB9	; 185
    2a82:	bf 4f       	sbci	r27, 0xFF	; 255
    2a84:	fe 01       	movw	r30, r28
    2a86:	e5 5b       	subi	r30, 0xB5	; 181
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	80 81       	ld	r24, Z
    2a8c:	91 81       	ldd	r25, Z+1	; 0x01
    2a8e:	8d 93       	st	X+, r24
    2a90:	9c 93       	st	X, r25
    2a92:	fe 01       	movw	r30, r28
    2a94:	e9 5b       	subi	r30, 0xB9	; 185
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	91 81       	ldd	r25, Z+1	; 0x01
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <LCD_sendCommand+0x2f4>
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e9 5b       	subi	r30, 0xB9	; 185
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2aaa:	fe 01       	movw	r30, r28
    2aac:	ed 59       	subi	r30, 0x9D	; 157
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 81       	ld	r24, Z
    2ab2:	88 2f       	mov	r24, r24
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	80 71       	andi	r24, 0x10	; 16
    2ab8:	90 70       	andi	r25, 0x00	; 0
    2aba:	95 95       	asr	r25
    2abc:	87 95       	ror	r24
    2abe:	95 95       	asr	r25
    2ac0:	87 95       	ror	r24
    2ac2:	95 95       	asr	r25
    2ac4:	87 95       	ror	r24
    2ac6:	95 95       	asr	r25
    2ac8:	87 95       	ror	r24
    2aca:	98 2f       	mov	r25, r24
    2acc:	82 e0       	ldi	r24, 0x02	; 2
    2ace:	60 e0       	ldi	r22, 0x00	; 0
    2ad0:	49 2f       	mov	r20, r25
    2ad2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	ed 59       	subi	r30, 0x9D	; 157
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	80 81       	ld	r24, Z
    2ade:	88 2f       	mov	r24, r24
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	80 72       	andi	r24, 0x20	; 32
    2ae4:	90 70       	andi	r25, 0x00	; 0
    2ae6:	95 95       	asr	r25
    2ae8:	87 95       	ror	r24
    2aea:	95 95       	asr	r25
    2aec:	87 95       	ror	r24
    2aee:	95 95       	asr	r25
    2af0:	87 95       	ror	r24
    2af2:	95 95       	asr	r25
    2af4:	87 95       	ror	r24
    2af6:	95 95       	asr	r25
    2af8:	87 95       	ror	r24
    2afa:	98 2f       	mov	r25, r24
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	61 e0       	ldi	r22, 0x01	; 1
    2b00:	49 2f       	mov	r20, r25
    2b02:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2b06:	fe 01       	movw	r30, r28
    2b08:	ed 59       	subi	r30, 0x9D	; 157
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	80 81       	ld	r24, Z
    2b0e:	88 2f       	mov	r24, r24
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	80 74       	andi	r24, 0x40	; 64
    2b14:	90 70       	andi	r25, 0x00	; 0
    2b16:	08 2e       	mov	r0, r24
    2b18:	89 2f       	mov	r24, r25
    2b1a:	00 0c       	add	r0, r0
    2b1c:	88 1f       	adc	r24, r24
    2b1e:	99 0b       	sbc	r25, r25
    2b20:	00 0c       	add	r0, r0
    2b22:	88 1f       	adc	r24, r24
    2b24:	99 1f       	adc	r25, r25
    2b26:	98 2f       	mov	r25, r24
    2b28:	82 e0       	ldi	r24, 0x02	; 2
    2b2a:	62 e0       	ldi	r22, 0x02	; 2
    2b2c:	49 2f       	mov	r20, r25
    2b2e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2b32:	fe 01       	movw	r30, r28
    2b34:	ed 59       	subi	r30, 0x9D	; 157
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	80 81       	ld	r24, Z
    2b3a:	98 2f       	mov	r25, r24
    2b3c:	99 1f       	adc	r25, r25
    2b3e:	99 27       	eor	r25, r25
    2b40:	99 1f       	adc	r25, r25
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	63 e0       	ldi	r22, 0x03	; 3
    2b46:	49 2f       	mov	r20, r25
    2b48:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ed 5b       	subi	r30, 0xBD	; 189
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	a0 e8       	ldi	r26, 0x80	; 128
    2b58:	bf e3       	ldi	r27, 0x3F	; 63
    2b5a:	80 83       	st	Z, r24
    2b5c:	91 83       	std	Z+1, r25	; 0x01
    2b5e:	a2 83       	std	Z+2, r26	; 0x02
    2b60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b62:	8e 01       	movw	r16, r28
    2b64:	01 5c       	subi	r16, 0xC1	; 193
    2b66:	1f 4f       	sbci	r17, 0xFF	; 255
    2b68:	fe 01       	movw	r30, r28
    2b6a:	ed 5b       	subi	r30, 0xBD	; 189
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	60 81       	ld	r22, Z
    2b70:	71 81       	ldd	r23, Z+1	; 0x01
    2b72:	82 81       	ldd	r24, Z+2	; 0x02
    2b74:	93 81       	ldd	r25, Z+3	; 0x03
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	4a ef       	ldi	r20, 0xFA	; 250
    2b7c:	54 e4       	ldi	r21, 0x44	; 68
    2b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	f8 01       	movw	r30, r16
    2b88:	80 83       	st	Z, r24
    2b8a:	91 83       	std	Z+1, r25	; 0x01
    2b8c:	a2 83       	std	Z+2, r26	; 0x02
    2b8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b90:	fe 01       	movw	r30, r28
    2b92:	ff 96       	adiw	r30, 0x3f	; 63
    2b94:	60 81       	ld	r22, Z
    2b96:	71 81       	ldd	r23, Z+1	; 0x01
    2b98:	82 81       	ldd	r24, Z+2	; 0x02
    2b9a:	93 81       	ldd	r25, Z+3	; 0x03
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e8       	ldi	r20, 0x80	; 128
    2ba2:	5f e3       	ldi	r21, 0x3F	; 63
    2ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba8:	88 23       	and	r24, r24
    2baa:	2c f4       	brge	.+10     	; 0x2bb6 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	9e af       	std	Y+62, r25	; 0x3e
    2bb2:	8d af       	std	Y+61, r24	; 0x3d
    2bb4:	46 c0       	rjmp	.+140    	; 0x2c42 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	ff 96       	adiw	r30, 0x3f	; 63
    2bba:	60 81       	ld	r22, Z
    2bbc:	71 81       	ldd	r23, Z+1	; 0x01
    2bbe:	82 81       	ldd	r24, Z+2	; 0x02
    2bc0:	93 81       	ldd	r25, Z+3	; 0x03
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	3f ef       	ldi	r19, 0xFF	; 255
    2bc6:	4f e7       	ldi	r20, 0x7F	; 127
    2bc8:	57 e4       	ldi	r21, 0x47	; 71
    2bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bce:	18 16       	cp	r1, r24
    2bd0:	64 f5       	brge	.+88     	; 0x2c2a <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	ed 5b       	subi	r30, 0xBD	; 189
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	60 81       	ld	r22, Z
    2bda:	71 81       	ldd	r23, Z+1	; 0x01
    2bdc:	82 81       	ldd	r24, Z+2	; 0x02
    2bde:	93 81       	ldd	r25, Z+3	; 0x03
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e2       	ldi	r20, 0x20	; 32
    2be6:	51 e4       	ldi	r21, 0x41	; 65
    2be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	bc 01       	movw	r22, r24
    2bf2:	cd 01       	movw	r24, r26
    2bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	9e af       	std	Y+62, r25	; 0x3e
    2bfe:	8d af       	std	Y+61, r24	; 0x3d
    2c00:	0f c0       	rjmp	.+30     	; 0x2c20 <LCD_sendCommand+0x478>
    2c02:	88 ec       	ldi	r24, 0xC8	; 200
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9c af       	std	Y+60, r25	; 0x3c
    2c08:	8b af       	std	Y+59, r24	; 0x3b
    2c0a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c0c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <LCD_sendCommand+0x466>
    2c12:	9c af       	std	Y+60, r25	; 0x3c
    2c14:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c16:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c18:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	9e af       	std	Y+62, r25	; 0x3e
    2c1e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c20:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c22:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	69 f7       	brne	.-38     	; 0x2c02 <LCD_sendCommand+0x45a>
    2c28:	16 c0       	rjmp	.+44     	; 0x2c56 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	ff 96       	adiw	r30, 0x3f	; 63
    2c2e:	60 81       	ld	r22, Z
    2c30:	71 81       	ldd	r23, Z+1	; 0x01
    2c32:	82 81       	ldd	r24, Z+2	; 0x02
    2c34:	93 81       	ldd	r25, Z+3	; 0x03
    2c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	9e af       	std	Y+62, r25	; 0x3e
    2c40:	8d af       	std	Y+61, r24	; 0x3d
    2c42:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c44:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c46:	9a af       	std	Y+58, r25	; 0x3a
    2c48:	89 af       	std	Y+57, r24	; 0x39
    2c4a:	89 ad       	ldd	r24, Y+57	; 0x39
    2c4c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	f1 f7       	brne	.-4      	; 0x2c4e <LCD_sendCommand+0x4a6>
    2c52:	9a af       	std	Y+58, r25	; 0x3a
    2c54:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c56:	82 e0       	ldi	r24, 0x02	; 2
    2c58:	66 e0       	ldi	r22, 0x06	; 6
    2c5a:	40 e0       	ldi	r20, 0x00	; 0
    2c5c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	a0 e8       	ldi	r26, 0x80	; 128
    2c66:	bf e3       	ldi	r27, 0x3F	; 63
    2c68:	8d ab       	std	Y+53, r24	; 0x35
    2c6a:	9e ab       	std	Y+54, r25	; 0x36
    2c6c:	af ab       	std	Y+55, r26	; 0x37
    2c6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c70:	6d a9       	ldd	r22, Y+53	; 0x35
    2c72:	7e a9       	ldd	r23, Y+54	; 0x36
    2c74:	8f a9       	ldd	r24, Y+55	; 0x37
    2c76:	98 ad       	ldd	r25, Y+56	; 0x38
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	4a ef       	ldi	r20, 0xFA	; 250
    2c7e:	54 e4       	ldi	r21, 0x44	; 68
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	89 ab       	std	Y+49, r24	; 0x31
    2c8a:	9a ab       	std	Y+50, r25	; 0x32
    2c8c:	ab ab       	std	Y+51, r26	; 0x33
    2c8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c90:	69 a9       	ldd	r22, Y+49	; 0x31
    2c92:	7a a9       	ldd	r23, Y+50	; 0x32
    2c94:	8b a9       	ldd	r24, Y+51	; 0x33
    2c96:	9c a9       	ldd	r25, Y+52	; 0x34
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e8       	ldi	r20, 0x80	; 128
    2c9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ca0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca4:	88 23       	and	r24, r24
    2ca6:	2c f4       	brge	.+10     	; 0x2cb2 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	98 ab       	std	Y+48, r25	; 0x30
    2cae:	8f a7       	std	Y+47, r24	; 0x2f
    2cb0:	3f c0       	rjmp	.+126    	; 0x2d30 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2cb2:	69 a9       	ldd	r22, Y+49	; 0x31
    2cb4:	7a a9       	ldd	r23, Y+50	; 0x32
    2cb6:	8b a9       	ldd	r24, Y+51	; 0x33
    2cb8:	9c a9       	ldd	r25, Y+52	; 0x34
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	3f ef       	ldi	r19, 0xFF	; 255
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	57 e4       	ldi	r21, 0x47	; 71
    2cc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc6:	18 16       	cp	r1, r24
    2cc8:	4c f5       	brge	.+82     	; 0x2d1c <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cca:	6d a9       	ldd	r22, Y+53	; 0x35
    2ccc:	7e a9       	ldd	r23, Y+54	; 0x36
    2cce:	8f a9       	ldd	r24, Y+55	; 0x37
    2cd0:	98 ad       	ldd	r25, Y+56	; 0x38
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e2       	ldi	r20, 0x20	; 32
    2cd8:	51 e4       	ldi	r21, 0x41	; 65
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	98 ab       	std	Y+48, r25	; 0x30
    2cf0:	8f a7       	std	Y+47, r24	; 0x2f
    2cf2:	0f c0       	rjmp	.+30     	; 0x2d12 <LCD_sendCommand+0x56a>
    2cf4:	88 ec       	ldi	r24, 0xC8	; 200
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9e a7       	std	Y+46, r25	; 0x2e
    2cfa:	8d a7       	std	Y+45, r24	; 0x2d
    2cfc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cfe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <LCD_sendCommand+0x558>
    2d04:	9e a7       	std	Y+46, r25	; 0x2e
    2d06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	98 ab       	std	Y+48, r25	; 0x30
    2d10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d14:	98 a9       	ldd	r25, Y+48	; 0x30
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	69 f7       	brne	.-38     	; 0x2cf4 <LCD_sendCommand+0x54c>
    2d1a:	14 c0       	rjmp	.+40     	; 0x2d44 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d1e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d20:	8b a9       	ldd	r24, Y+51	; 0x33
    2d22:	9c a9       	ldd	r25, Y+52	; 0x34
    2d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	98 ab       	std	Y+48, r25	; 0x30
    2d2e:	8f a7       	std	Y+47, r24	; 0x2f
    2d30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d32:	98 a9       	ldd	r25, Y+48	; 0x30
    2d34:	9c a7       	std	Y+44, r25	; 0x2c
    2d36:	8b a7       	std	Y+43, r24	; 0x2b
    2d38:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <LCD_sendCommand+0x594>
    2d40:	9c a7       	std	Y+44, r25	; 0x2c
    2d42:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d44:	82 e0       	ldi	r24, 0x02	; 2
    2d46:	66 e0       	ldi	r22, 0x06	; 6
    2d48:	41 e0       	ldi	r20, 0x01	; 1
    2d4a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	a0 e8       	ldi	r26, 0x80	; 128
    2d54:	bf e3       	ldi	r27, 0x3F	; 63
    2d56:	8f a3       	std	Y+39, r24	; 0x27
    2d58:	98 a7       	std	Y+40, r25	; 0x28
    2d5a:	a9 a7       	std	Y+41, r26	; 0x29
    2d5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d60:	78 a5       	ldd	r23, Y+40	; 0x28
    2d62:	89 a5       	ldd	r24, Y+41	; 0x29
    2d64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	4a ef       	ldi	r20, 0xFA	; 250
    2d6c:	54 e4       	ldi	r21, 0x44	; 68
    2d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	8b a3       	std	Y+35, r24	; 0x23
    2d78:	9c a3       	std	Y+36, r25	; 0x24
    2d7a:	ad a3       	std	Y+37, r26	; 0x25
    2d7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d80:	7c a1       	ldd	r23, Y+36	; 0x24
    2d82:	8d a1       	ldd	r24, Y+37	; 0x25
    2d84:	9e a1       	ldd	r25, Y+38	; 0x26
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e8       	ldi	r20, 0x80	; 128
    2d8c:	5f e3       	ldi	r21, 0x3F	; 63
    2d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d92:	88 23       	and	r24, r24
    2d94:	2c f4       	brge	.+10     	; 0x2da0 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	9a a3       	std	Y+34, r25	; 0x22
    2d9c:	89 a3       	std	Y+33, r24	; 0x21
    2d9e:	3f c0       	rjmp	.+126    	; 0x2e1e <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2da0:	6b a1       	ldd	r22, Y+35	; 0x23
    2da2:	7c a1       	ldd	r23, Y+36	; 0x24
    2da4:	8d a1       	ldd	r24, Y+37	; 0x25
    2da6:	9e a1       	ldd	r25, Y+38	; 0x26
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	3f ef       	ldi	r19, 0xFF	; 255
    2dac:	4f e7       	ldi	r20, 0x7F	; 127
    2dae:	57 e4       	ldi	r21, 0x47	; 71
    2db0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db4:	18 16       	cp	r1, r24
    2db6:	4c f5       	brge	.+82     	; 0x2e0a <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db8:	6f a1       	ldd	r22, Y+39	; 0x27
    2dba:	78 a5       	ldd	r23, Y+40	; 0x28
    2dbc:	89 a5       	ldd	r24, Y+41	; 0x29
    2dbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e2       	ldi	r20, 0x20	; 32
    2dc6:	51 e4       	ldi	r21, 0x41	; 65
    2dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	bc 01       	movw	r22, r24
    2dd2:	cd 01       	movw	r24, r26
    2dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	9a a3       	std	Y+34, r25	; 0x22
    2dde:	89 a3       	std	Y+33, r24	; 0x21
    2de0:	0f c0       	rjmp	.+30     	; 0x2e00 <LCD_sendCommand+0x658>
    2de2:	88 ec       	ldi	r24, 0xC8	; 200
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	98 a3       	std	Y+32, r25	; 0x20
    2de8:	8f 8f       	std	Y+31, r24	; 0x1f
    2dea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dec:	98 a1       	ldd	r25, Y+32	; 0x20
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <LCD_sendCommand+0x646>
    2df2:	98 a3       	std	Y+32, r25	; 0x20
    2df4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df6:	89 a1       	ldd	r24, Y+33	; 0x21
    2df8:	9a a1       	ldd	r25, Y+34	; 0x22
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	9a a3       	std	Y+34, r25	; 0x22
    2dfe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e00:	89 a1       	ldd	r24, Y+33	; 0x21
    2e02:	9a a1       	ldd	r25, Y+34	; 0x22
    2e04:	00 97       	sbiw	r24, 0x00	; 0
    2e06:	69 f7       	brne	.-38     	; 0x2de2 <LCD_sendCommand+0x63a>
    2e08:	14 c0       	rjmp	.+40     	; 0x2e32 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e10:	9e a1       	ldd	r25, Y+38	; 0x26
    2e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	9a a3       	std	Y+34, r25	; 0x22
    2e1c:	89 a3       	std	Y+33, r24	; 0x21
    2e1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e20:	9a a1       	ldd	r25, Y+34	; 0x22
    2e22:	9e 8f       	std	Y+30, r25	; 0x1e
    2e24:	8d 8f       	std	Y+29, r24	; 0x1d
    2e26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <LCD_sendCommand+0x682>
    2e2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e30:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2e32:	fe 01       	movw	r30, r28
    2e34:	ed 59       	subi	r30, 0x9D	; 157
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 81       	ld	r24, Z
    2e3a:	98 2f       	mov	r25, r24
    2e3c:	91 70       	andi	r25, 0x01	; 1
    2e3e:	82 e0       	ldi	r24, 0x02	; 2
    2e40:	60 e0       	ldi	r22, 0x00	; 0
    2e42:	49 2f       	mov	r20, r25
    2e44:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2e48:	fe 01       	movw	r30, r28
    2e4a:	ed 59       	subi	r30, 0x9D	; 157
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 81       	ld	r24, Z
    2e50:	88 2f       	mov	r24, r24
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	82 70       	andi	r24, 0x02	; 2
    2e56:	90 70       	andi	r25, 0x00	; 0
    2e58:	95 95       	asr	r25
    2e5a:	87 95       	ror	r24
    2e5c:	98 2f       	mov	r25, r24
    2e5e:	82 e0       	ldi	r24, 0x02	; 2
    2e60:	61 e0       	ldi	r22, 0x01	; 1
    2e62:	49 2f       	mov	r20, r25
    2e64:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2e68:	fe 01       	movw	r30, r28
    2e6a:	ed 59       	subi	r30, 0x9D	; 157
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	80 81       	ld	r24, Z
    2e70:	88 2f       	mov	r24, r24
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	84 70       	andi	r24, 0x04	; 4
    2e76:	90 70       	andi	r25, 0x00	; 0
    2e78:	95 95       	asr	r25
    2e7a:	87 95       	ror	r24
    2e7c:	95 95       	asr	r25
    2e7e:	87 95       	ror	r24
    2e80:	98 2f       	mov	r25, r24
    2e82:	82 e0       	ldi	r24, 0x02	; 2
    2e84:	62 e0       	ldi	r22, 0x02	; 2
    2e86:	49 2f       	mov	r20, r25
    2e88:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	ed 59       	subi	r30, 0x9D	; 157
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 81       	ld	r24, Z
    2e94:	88 2f       	mov	r24, r24
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	88 70       	andi	r24, 0x08	; 8
    2e9a:	90 70       	andi	r25, 0x00	; 0
    2e9c:	95 95       	asr	r25
    2e9e:	87 95       	ror	r24
    2ea0:	95 95       	asr	r25
    2ea2:	87 95       	ror	r24
    2ea4:	95 95       	asr	r25
    2ea6:	87 95       	ror	r24
    2ea8:	98 2f       	mov	r25, r24
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	63 e0       	ldi	r22, 0x03	; 3
    2eae:	49 2f       	mov	r20, r25
    2eb0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	a0 e8       	ldi	r26, 0x80	; 128
    2eba:	bf e3       	ldi	r27, 0x3F	; 63
    2ebc:	89 8f       	std	Y+25, r24	; 0x19
    2ebe:	9a 8f       	std	Y+26, r25	; 0x1a
    2ec0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ec2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	4a ef       	ldi	r20, 0xFA	; 250
    2ed2:	54 e4       	ldi	r21, 0x44	; 68
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	8d 8b       	std	Y+21, r24	; 0x15
    2ede:	9e 8b       	std	Y+22, r25	; 0x16
    2ee0:	af 8b       	std	Y+23, r26	; 0x17
    2ee2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ee4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eea:	98 8d       	ldd	r25, Y+24	; 0x18
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e8       	ldi	r20, 0x80	; 128
    2ef2:	5f e3       	ldi	r21, 0x3F	; 63
    2ef4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ef8:	88 23       	and	r24, r24
    2efa:	2c f4       	brge	.+10     	; 0x2f06 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	9c 8b       	std	Y+20, r25	; 0x14
    2f02:	8b 8b       	std	Y+19, r24	; 0x13
    2f04:	3f c0       	rjmp	.+126    	; 0x2f84 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2f06:	6d 89       	ldd	r22, Y+21	; 0x15
    2f08:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	3f ef       	ldi	r19, 0xFF	; 255
    2f12:	4f e7       	ldi	r20, 0x7F	; 127
    2f14:	57 e4       	ldi	r21, 0x47	; 71
    2f16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f1a:	18 16       	cp	r1, r24
    2f1c:	4c f5       	brge	.+82     	; 0x2f70 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e2       	ldi	r20, 0x20	; 32
    2f2c:	51 e4       	ldi	r21, 0x41	; 65
    2f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	bc 01       	movw	r22, r24
    2f38:	cd 01       	movw	r24, r26
    2f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	9c 8b       	std	Y+20, r25	; 0x14
    2f44:	8b 8b       	std	Y+19, r24	; 0x13
    2f46:	0f c0       	rjmp	.+30     	; 0x2f66 <LCD_sendCommand+0x7be>
    2f48:	88 ec       	ldi	r24, 0xC8	; 200
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	9a 8b       	std	Y+18, r25	; 0x12
    2f4e:	89 8b       	std	Y+17, r24	; 0x11
    2f50:	89 89       	ldd	r24, Y+17	; 0x11
    2f52:	9a 89       	ldd	r25, Y+18	; 0x12
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	f1 f7       	brne	.-4      	; 0x2f54 <LCD_sendCommand+0x7ac>
    2f58:	9a 8b       	std	Y+18, r25	; 0x12
    2f5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	9c 8b       	std	Y+20, r25	; 0x14
    2f64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f66:	8b 89       	ldd	r24, Y+19	; 0x13
    2f68:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6a:	00 97       	sbiw	r24, 0x00	; 0
    2f6c:	69 f7       	brne	.-38     	; 0x2f48 <LCD_sendCommand+0x7a0>
    2f6e:	14 c0       	rjmp	.+40     	; 0x2f98 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f70:	6d 89       	ldd	r22, Y+21	; 0x15
    2f72:	7e 89       	ldd	r23, Y+22	; 0x16
    2f74:	8f 89       	ldd	r24, Y+23	; 0x17
    2f76:	98 8d       	ldd	r25, Y+24	; 0x18
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9c 8b       	std	Y+20, r25	; 0x14
    2f82:	8b 8b       	std	Y+19, r24	; 0x13
    2f84:	8b 89       	ldd	r24, Y+19	; 0x13
    2f86:	9c 89       	ldd	r25, Y+20	; 0x14
    2f88:	98 8b       	std	Y+16, r25	; 0x10
    2f8a:	8f 87       	std	Y+15, r24	; 0x0f
    2f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f8e:	98 89       	ldd	r25, Y+16	; 0x10
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <LCD_sendCommand+0x7e8>
    2f94:	98 8b       	std	Y+16, r25	; 0x10
    2f96:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f98:	82 e0       	ldi	r24, 0x02	; 2
    2f9a:	66 e0       	ldi	r22, 0x06	; 6
    2f9c:	40 e0       	ldi	r20, 0x00	; 0
    2f9e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	a0 e8       	ldi	r26, 0x80	; 128
    2fa8:	bf e3       	ldi	r27, 0x3F	; 63
    2faa:	8b 87       	std	Y+11, r24	; 0x0b
    2fac:	9c 87       	std	Y+12, r25	; 0x0c
    2fae:	ad 87       	std	Y+13, r26	; 0x0d
    2fb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	4a ef       	ldi	r20, 0xFA	; 250
    2fc0:	54 e4       	ldi	r21, 0x44	; 68
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	8f 83       	std	Y+7, r24	; 0x07
    2fcc:	98 87       	std	Y+8, r25	; 0x08
    2fce:	a9 87       	std	Y+9, r26	; 0x09
    2fd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd4:	78 85       	ldd	r23, Y+8	; 0x08
    2fd6:	89 85       	ldd	r24, Y+9	; 0x09
    2fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	2c f4       	brge	.+10     	; 0x2ff4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9e 83       	std	Y+6, r25	; 0x06
    2ff0:	8d 83       	std	Y+5, r24	; 0x05
    2ff2:	3f c0       	rjmp	.+126    	; 0x3072 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff6:	78 85       	ldd	r23, Y+8	; 0x08
    2ff8:	89 85       	ldd	r24, Y+9	; 0x09
    2ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	3f ef       	ldi	r19, 0xFF	; 255
    3000:	4f e7       	ldi	r20, 0x7F	; 127
    3002:	57 e4       	ldi	r21, 0x47	; 71
    3004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3008:	18 16       	cp	r1, r24
    300a:	4c f5       	brge	.+82     	; 0x305e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    300c:	6b 85       	ldd	r22, Y+11	; 0x0b
    300e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3010:	8d 85       	ldd	r24, Y+13	; 0x0d
    3012:	9e 85       	ldd	r25, Y+14	; 0x0e
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e2       	ldi	r20, 0x20	; 32
    301a:	51 e4       	ldi	r21, 0x41	; 65
    301c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	bc 01       	movw	r22, r24
    3026:	cd 01       	movw	r24, r26
    3028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	9e 83       	std	Y+6, r25	; 0x06
    3032:	8d 83       	std	Y+5, r24	; 0x05
    3034:	0f c0       	rjmp	.+30     	; 0x3054 <LCD_sendCommand+0x8ac>
    3036:	88 ec       	ldi	r24, 0xC8	; 200
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	9c 83       	std	Y+4, r25	; 0x04
    303c:	8b 83       	std	Y+3, r24	; 0x03
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	9c 81       	ldd	r25, Y+4	; 0x04
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <LCD_sendCommand+0x89a>
    3046:	9c 83       	std	Y+4, r25	; 0x04
    3048:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304a:	8d 81       	ldd	r24, Y+5	; 0x05
    304c:	9e 81       	ldd	r25, Y+6	; 0x06
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	9e 83       	std	Y+6, r25	; 0x06
    3052:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3054:	8d 81       	ldd	r24, Y+5	; 0x05
    3056:	9e 81       	ldd	r25, Y+6	; 0x06
    3058:	00 97       	sbiw	r24, 0x00	; 0
    305a:	69 f7       	brne	.-38     	; 0x3036 <LCD_sendCommand+0x88e>
    305c:	14 c0       	rjmp	.+40     	; 0x3086 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305e:	6f 81       	ldd	r22, Y+7	; 0x07
    3060:	78 85       	ldd	r23, Y+8	; 0x08
    3062:	89 85       	ldd	r24, Y+9	; 0x09
    3064:	9a 85       	ldd	r25, Y+10	; 0x0a
    3066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	9e 83       	std	Y+6, r25	; 0x06
    3070:	8d 83       	std	Y+5, r24	; 0x05
    3072:	8d 81       	ldd	r24, Y+5	; 0x05
    3074:	9e 81       	ldd	r25, Y+6	; 0x06
    3076:	9a 83       	std	Y+2, r25	; 0x02
    3078:	89 83       	std	Y+1, r24	; 0x01
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	9a 81       	ldd	r25, Y+2	; 0x02
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	f1 f7       	brne	.-4      	; 0x307e <LCD_sendCommand+0x8d6>
    3082:	9a 83       	std	Y+2, r25	; 0x02
    3084:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3086:	cd 59       	subi	r28, 0x9D	; 157
    3088:	df 4f       	sbci	r29, 0xFF	; 255
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	1f 91       	pop	r17
    309a:	0f 91       	pop	r16
    309c:	08 95       	ret

0000309e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    309e:	0f 93       	push	r16
    30a0:	1f 93       	push	r17
    30a2:	df 93       	push	r29
    30a4:	cf 93       	push	r28
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	c3 56       	subi	r28, 0x63	; 99
    30ac:	d0 40       	sbci	r29, 0x00	; 0
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	f8 94       	cli
    30b2:	de bf       	out	0x3e, r29	; 62
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	cd bf       	out	0x3d, r28	; 61
    30b8:	fe 01       	movw	r30, r28
    30ba:	ed 59       	subi	r30, 0x9D	; 157
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    30c0:	82 e0       	ldi	r24, 0x02	; 2
    30c2:	64 e0       	ldi	r22, 0x04	; 4
    30c4:	41 e0       	ldi	r20, 0x01	; 1
    30c6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    30ca:	fe 01       	movw	r30, r28
    30cc:	e1 5a       	subi	r30, 0xA1	; 161
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	a0 e8       	ldi	r26, 0x80	; 128
    30d6:	bf e3       	ldi	r27, 0x3F	; 63
    30d8:	80 83       	st	Z, r24
    30da:	91 83       	std	Z+1, r25	; 0x01
    30dc:	a2 83       	std	Z+2, r26	; 0x02
    30de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e0:	8e 01       	movw	r16, r28
    30e2:	05 5a       	subi	r16, 0xA5	; 165
    30e4:	1f 4f       	sbci	r17, 0xFF	; 255
    30e6:	fe 01       	movw	r30, r28
    30e8:	e1 5a       	subi	r30, 0xA1	; 161
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	4a ef       	ldi	r20, 0xFA	; 250
    30fa:	54 e4       	ldi	r21, 0x44	; 68
    30fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	f8 01       	movw	r30, r16
    3106:	80 83       	st	Z, r24
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	a2 83       	std	Z+2, r26	; 0x02
    310c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    310e:	fe 01       	movw	r30, r28
    3110:	e5 5a       	subi	r30, 0xA5	; 165
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	60 81       	ld	r22, Z
    3116:	71 81       	ldd	r23, Z+1	; 0x01
    3118:	82 81       	ldd	r24, Z+2	; 0x02
    311a:	93 81       	ldd	r25, Z+3	; 0x03
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	40 e8       	ldi	r20, 0x80	; 128
    3122:	5f e3       	ldi	r21, 0x3F	; 63
    3124:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3128:	88 23       	and	r24, r24
    312a:	44 f4       	brge	.+16     	; 0x313c <LCD_displayCharacter+0x9e>
		__ticks = 1;
    312c:	fe 01       	movw	r30, r28
    312e:	e7 5a       	subi	r30, 0xA7	; 167
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	80 83       	st	Z, r24
    313a:	64 c0       	rjmp	.+200    	; 0x3204 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    313c:	fe 01       	movw	r30, r28
    313e:	e5 5a       	subi	r30, 0xA5	; 165
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	60 81       	ld	r22, Z
    3144:	71 81       	ldd	r23, Z+1	; 0x01
    3146:	82 81       	ldd	r24, Z+2	; 0x02
    3148:	93 81       	ldd	r25, Z+3	; 0x03
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	3f ef       	ldi	r19, 0xFF	; 255
    314e:	4f e7       	ldi	r20, 0x7F	; 127
    3150:	57 e4       	ldi	r21, 0x47	; 71
    3152:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3156:	18 16       	cp	r1, r24
    3158:	0c f0       	brlt	.+2      	; 0x315c <LCD_displayCharacter+0xbe>
    315a:	43 c0       	rjmp	.+134    	; 0x31e2 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315c:	fe 01       	movw	r30, r28
    315e:	e1 5a       	subi	r30, 0xA1	; 161
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	60 81       	ld	r22, Z
    3164:	71 81       	ldd	r23, Z+1	; 0x01
    3166:	82 81       	ldd	r24, Z+2	; 0x02
    3168:	93 81       	ldd	r25, Z+3	; 0x03
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e2       	ldi	r20, 0x20	; 32
    3170:	51 e4       	ldi	r21, 0x41	; 65
    3172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	8e 01       	movw	r16, r28
    317c:	07 5a       	subi	r16, 0xA7	; 167
    317e:	1f 4f       	sbci	r17, 0xFF	; 255
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	f8 01       	movw	r30, r16
    318e:	91 83       	std	Z+1, r25	; 0x01
    3190:	80 83       	st	Z, r24
    3192:	1f c0       	rjmp	.+62     	; 0x31d2 <LCD_displayCharacter+0x134>
    3194:	fe 01       	movw	r30, r28
    3196:	e9 5a       	subi	r30, 0xA9	; 169
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	88 ec       	ldi	r24, 0xC8	; 200
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	80 83       	st	Z, r24
    31a2:	fe 01       	movw	r30, r28
    31a4:	e9 5a       	subi	r30, 0xA9	; 169
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	80 81       	ld	r24, Z
    31aa:	91 81       	ldd	r25, Z+1	; 0x01
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <LCD_displayCharacter+0x10e>
    31b0:	fe 01       	movw	r30, r28
    31b2:	e9 5a       	subi	r30, 0xA9	; 169
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	91 83       	std	Z+1, r25	; 0x01
    31b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ba:	de 01       	movw	r26, r28
    31bc:	a7 5a       	subi	r26, 0xA7	; 167
    31be:	bf 4f       	sbci	r27, 0xFF	; 255
    31c0:	fe 01       	movw	r30, r28
    31c2:	e7 5a       	subi	r30, 0xA7	; 167
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	80 81       	ld	r24, Z
    31c8:	91 81       	ldd	r25, Z+1	; 0x01
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	11 96       	adiw	r26, 0x01	; 1
    31ce:	9c 93       	st	X, r25
    31d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d2:	fe 01       	movw	r30, r28
    31d4:	e7 5a       	subi	r30, 0xA7	; 167
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	80 81       	ld	r24, Z
    31da:	91 81       	ldd	r25, Z+1	; 0x01
    31dc:	00 97       	sbiw	r24, 0x00	; 0
    31de:	d1 f6       	brne	.-76     	; 0x3194 <LCD_displayCharacter+0xf6>
    31e0:	27 c0       	rjmp	.+78     	; 0x3230 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e2:	8e 01       	movw	r16, r28
    31e4:	07 5a       	subi	r16, 0xA7	; 167
    31e6:	1f 4f       	sbci	r17, 0xFF	; 255
    31e8:	fe 01       	movw	r30, r28
    31ea:	e5 5a       	subi	r30, 0xA5	; 165
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	60 81       	ld	r22, Z
    31f0:	71 81       	ldd	r23, Z+1	; 0x01
    31f2:	82 81       	ldd	r24, Z+2	; 0x02
    31f4:	93 81       	ldd	r25, Z+3	; 0x03
    31f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	f8 01       	movw	r30, r16
    3200:	91 83       	std	Z+1, r25	; 0x01
    3202:	80 83       	st	Z, r24
    3204:	de 01       	movw	r26, r28
    3206:	ab 5a       	subi	r26, 0xAB	; 171
    3208:	bf 4f       	sbci	r27, 0xFF	; 255
    320a:	fe 01       	movw	r30, r28
    320c:	e7 5a       	subi	r30, 0xA7	; 167
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	80 81       	ld	r24, Z
    3212:	91 81       	ldd	r25, Z+1	; 0x01
    3214:	8d 93       	st	X+, r24
    3216:	9c 93       	st	X, r25
    3218:	fe 01       	movw	r30, r28
    321a:	eb 5a       	subi	r30, 0xAB	; 171
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	80 81       	ld	r24, Z
    3220:	91 81       	ldd	r25, Z+1	; 0x01
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <LCD_displayCharacter+0x184>
    3226:	fe 01       	movw	r30, r28
    3228:	eb 5a       	subi	r30, 0xAB	; 171
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	91 83       	std	Z+1, r25	; 0x01
    322e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3230:	82 e0       	ldi	r24, 0x02	; 2
    3232:	66 e0       	ldi	r22, 0x06	; 6
    3234:	41 e0       	ldi	r20, 0x01	; 1
    3236:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    323a:	fe 01       	movw	r30, r28
    323c:	ef 5a       	subi	r30, 0xAF	; 175
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	a0 e8       	ldi	r26, 0x80	; 128
    3246:	bf e3       	ldi	r27, 0x3F	; 63
    3248:	80 83       	st	Z, r24
    324a:	91 83       	std	Z+1, r25	; 0x01
    324c:	a2 83       	std	Z+2, r26	; 0x02
    324e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3250:	8e 01       	movw	r16, r28
    3252:	03 5b       	subi	r16, 0xB3	; 179
    3254:	1f 4f       	sbci	r17, 0xFF	; 255
    3256:	fe 01       	movw	r30, r28
    3258:	ef 5a       	subi	r30, 0xAF	; 175
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	82 81       	ldd	r24, Z+2	; 0x02
    3262:	93 81       	ldd	r25, Z+3	; 0x03
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	4a ef       	ldi	r20, 0xFA	; 250
    326a:	54 e4       	ldi	r21, 0x44	; 68
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	f8 01       	movw	r30, r16
    3276:	80 83       	st	Z, r24
    3278:	91 83       	std	Z+1, r25	; 0x01
    327a:	a2 83       	std	Z+2, r26	; 0x02
    327c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    327e:	fe 01       	movw	r30, r28
    3280:	e3 5b       	subi	r30, 0xB3	; 179
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	60 81       	ld	r22, Z
    3286:	71 81       	ldd	r23, Z+1	; 0x01
    3288:	82 81       	ldd	r24, Z+2	; 0x02
    328a:	93 81       	ldd	r25, Z+3	; 0x03
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e8       	ldi	r20, 0x80	; 128
    3292:	5f e3       	ldi	r21, 0x3F	; 63
    3294:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3298:	88 23       	and	r24, r24
    329a:	44 f4       	brge	.+16     	; 0x32ac <LCD_displayCharacter+0x20e>
		__ticks = 1;
    329c:	fe 01       	movw	r30, r28
    329e:	e5 5b       	subi	r30, 0xB5	; 181
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	91 83       	std	Z+1, r25	; 0x01
    32a8:	80 83       	st	Z, r24
    32aa:	64 c0       	rjmp	.+200    	; 0x3374 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    32ac:	fe 01       	movw	r30, r28
    32ae:	e3 5b       	subi	r30, 0xB3	; 179
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	60 81       	ld	r22, Z
    32b4:	71 81       	ldd	r23, Z+1	; 0x01
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	93 81       	ldd	r25, Z+3	; 0x03
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	3f ef       	ldi	r19, 0xFF	; 255
    32be:	4f e7       	ldi	r20, 0x7F	; 127
    32c0:	57 e4       	ldi	r21, 0x47	; 71
    32c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32c6:	18 16       	cp	r1, r24
    32c8:	0c f0       	brlt	.+2      	; 0x32cc <LCD_displayCharacter+0x22e>
    32ca:	43 c0       	rjmp	.+134    	; 0x3352 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32cc:	fe 01       	movw	r30, r28
    32ce:	ef 5a       	subi	r30, 0xAF	; 175
    32d0:	ff 4f       	sbci	r31, 0xFF	; 255
    32d2:	60 81       	ld	r22, Z
    32d4:	71 81       	ldd	r23, Z+1	; 0x01
    32d6:	82 81       	ldd	r24, Z+2	; 0x02
    32d8:	93 81       	ldd	r25, Z+3	; 0x03
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	40 e2       	ldi	r20, 0x20	; 32
    32e0:	51 e4       	ldi	r21, 0x41	; 65
    32e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	8e 01       	movw	r16, r28
    32ec:	05 5b       	subi	r16, 0xB5	; 181
    32ee:	1f 4f       	sbci	r17, 0xFF	; 255
    32f0:	bc 01       	movw	r22, r24
    32f2:	cd 01       	movw	r24, r26
    32f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	f8 01       	movw	r30, r16
    32fe:	91 83       	std	Z+1, r25	; 0x01
    3300:	80 83       	st	Z, r24
    3302:	1f c0       	rjmp	.+62     	; 0x3342 <LCD_displayCharacter+0x2a4>
    3304:	fe 01       	movw	r30, r28
    3306:	e7 5b       	subi	r30, 0xB7	; 183
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	88 ec       	ldi	r24, 0xC8	; 200
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	91 83       	std	Z+1, r25	; 0x01
    3310:	80 83       	st	Z, r24
    3312:	fe 01       	movw	r30, r28
    3314:	e7 5b       	subi	r30, 0xB7	; 183
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	80 81       	ld	r24, Z
    331a:	91 81       	ldd	r25, Z+1	; 0x01
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	f1 f7       	brne	.-4      	; 0x331c <LCD_displayCharacter+0x27e>
    3320:	fe 01       	movw	r30, r28
    3322:	e7 5b       	subi	r30, 0xB7	; 183
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	91 83       	std	Z+1, r25	; 0x01
    3328:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332a:	de 01       	movw	r26, r28
    332c:	a5 5b       	subi	r26, 0xB5	; 181
    332e:	bf 4f       	sbci	r27, 0xFF	; 255
    3330:	fe 01       	movw	r30, r28
    3332:	e5 5b       	subi	r30, 0xB5	; 181
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	80 81       	ld	r24, Z
    3338:	91 81       	ldd	r25, Z+1	; 0x01
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	11 96       	adiw	r26, 0x01	; 1
    333e:	9c 93       	st	X, r25
    3340:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3342:	fe 01       	movw	r30, r28
    3344:	e5 5b       	subi	r30, 0xB5	; 181
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	80 81       	ld	r24, Z
    334a:	91 81       	ldd	r25, Z+1	; 0x01
    334c:	00 97       	sbiw	r24, 0x00	; 0
    334e:	d1 f6       	brne	.-76     	; 0x3304 <LCD_displayCharacter+0x266>
    3350:	27 c0       	rjmp	.+78     	; 0x33a0 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3352:	8e 01       	movw	r16, r28
    3354:	05 5b       	subi	r16, 0xB5	; 181
    3356:	1f 4f       	sbci	r17, 0xFF	; 255
    3358:	fe 01       	movw	r30, r28
    335a:	e3 5b       	subi	r30, 0xB3	; 179
    335c:	ff 4f       	sbci	r31, 0xFF	; 255
    335e:	60 81       	ld	r22, Z
    3360:	71 81       	ldd	r23, Z+1	; 0x01
    3362:	82 81       	ldd	r24, Z+2	; 0x02
    3364:	93 81       	ldd	r25, Z+3	; 0x03
    3366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	f8 01       	movw	r30, r16
    3370:	91 83       	std	Z+1, r25	; 0x01
    3372:	80 83       	st	Z, r24
    3374:	de 01       	movw	r26, r28
    3376:	a9 5b       	subi	r26, 0xB9	; 185
    3378:	bf 4f       	sbci	r27, 0xFF	; 255
    337a:	fe 01       	movw	r30, r28
    337c:	e5 5b       	subi	r30, 0xB5	; 181
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	80 81       	ld	r24, Z
    3382:	91 81       	ldd	r25, Z+1	; 0x01
    3384:	8d 93       	st	X+, r24
    3386:	9c 93       	st	X, r25
    3388:	fe 01       	movw	r30, r28
    338a:	e9 5b       	subi	r30, 0xB9	; 185
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	80 81       	ld	r24, Z
    3390:	91 81       	ldd	r25, Z+1	; 0x01
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	f1 f7       	brne	.-4      	; 0x3392 <LCD_displayCharacter+0x2f4>
    3396:	fe 01       	movw	r30, r28
    3398:	e9 5b       	subi	r30, 0xB9	; 185
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    33a0:	fe 01       	movw	r30, r28
    33a2:	ed 59       	subi	r30, 0x9D	; 157
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	80 81       	ld	r24, Z
    33a8:	88 2f       	mov	r24, r24
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	80 71       	andi	r24, 0x10	; 16
    33ae:	90 70       	andi	r25, 0x00	; 0
    33b0:	95 95       	asr	r25
    33b2:	87 95       	ror	r24
    33b4:	95 95       	asr	r25
    33b6:	87 95       	ror	r24
    33b8:	95 95       	asr	r25
    33ba:	87 95       	ror	r24
    33bc:	95 95       	asr	r25
    33be:	87 95       	ror	r24
    33c0:	98 2f       	mov	r25, r24
    33c2:	82 e0       	ldi	r24, 0x02	; 2
    33c4:	60 e0       	ldi	r22, 0x00	; 0
    33c6:	49 2f       	mov	r20, r25
    33c8:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    33cc:	fe 01       	movw	r30, r28
    33ce:	ed 59       	subi	r30, 0x9D	; 157
    33d0:	ff 4f       	sbci	r31, 0xFF	; 255
    33d2:	80 81       	ld	r24, Z
    33d4:	88 2f       	mov	r24, r24
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	80 72       	andi	r24, 0x20	; 32
    33da:	90 70       	andi	r25, 0x00	; 0
    33dc:	95 95       	asr	r25
    33de:	87 95       	ror	r24
    33e0:	95 95       	asr	r25
    33e2:	87 95       	ror	r24
    33e4:	95 95       	asr	r25
    33e6:	87 95       	ror	r24
    33e8:	95 95       	asr	r25
    33ea:	87 95       	ror	r24
    33ec:	95 95       	asr	r25
    33ee:	87 95       	ror	r24
    33f0:	98 2f       	mov	r25, r24
    33f2:	82 e0       	ldi	r24, 0x02	; 2
    33f4:	61 e0       	ldi	r22, 0x01	; 1
    33f6:	49 2f       	mov	r20, r25
    33f8:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    33fc:	fe 01       	movw	r30, r28
    33fe:	ed 59       	subi	r30, 0x9D	; 157
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	80 81       	ld	r24, Z
    3404:	88 2f       	mov	r24, r24
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	80 74       	andi	r24, 0x40	; 64
    340a:	90 70       	andi	r25, 0x00	; 0
    340c:	08 2e       	mov	r0, r24
    340e:	89 2f       	mov	r24, r25
    3410:	00 0c       	add	r0, r0
    3412:	88 1f       	adc	r24, r24
    3414:	99 0b       	sbc	r25, r25
    3416:	00 0c       	add	r0, r0
    3418:	88 1f       	adc	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	98 2f       	mov	r25, r24
    341e:	82 e0       	ldi	r24, 0x02	; 2
    3420:	62 e0       	ldi	r22, 0x02	; 2
    3422:	49 2f       	mov	r20, r25
    3424:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    3428:	fe 01       	movw	r30, r28
    342a:	ed 59       	subi	r30, 0x9D	; 157
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	80 81       	ld	r24, Z
    3430:	98 2f       	mov	r25, r24
    3432:	99 1f       	adc	r25, r25
    3434:	99 27       	eor	r25, r25
    3436:	99 1f       	adc	r25, r25
    3438:	82 e0       	ldi	r24, 0x02	; 2
    343a:	63 e0       	ldi	r22, 0x03	; 3
    343c:	49 2f       	mov	r20, r25
    343e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    3442:	fe 01       	movw	r30, r28
    3444:	ed 5b       	subi	r30, 0xBD	; 189
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	a0 e8       	ldi	r26, 0x80	; 128
    344e:	bf e3       	ldi	r27, 0x3F	; 63
    3450:	80 83       	st	Z, r24
    3452:	91 83       	std	Z+1, r25	; 0x01
    3454:	a2 83       	std	Z+2, r26	; 0x02
    3456:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3458:	8e 01       	movw	r16, r28
    345a:	01 5c       	subi	r16, 0xC1	; 193
    345c:	1f 4f       	sbci	r17, 0xFF	; 255
    345e:	fe 01       	movw	r30, r28
    3460:	ed 5b       	subi	r30, 0xBD	; 189
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	60 81       	ld	r22, Z
    3466:	71 81       	ldd	r23, Z+1	; 0x01
    3468:	82 81       	ldd	r24, Z+2	; 0x02
    346a:	93 81       	ldd	r25, Z+3	; 0x03
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	4a ef       	ldi	r20, 0xFA	; 250
    3472:	54 e4       	ldi	r21, 0x44	; 68
    3474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	f8 01       	movw	r30, r16
    347e:	80 83       	st	Z, r24
    3480:	91 83       	std	Z+1, r25	; 0x01
    3482:	a2 83       	std	Z+2, r26	; 0x02
    3484:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3486:	fe 01       	movw	r30, r28
    3488:	ff 96       	adiw	r30, 0x3f	; 63
    348a:	60 81       	ld	r22, Z
    348c:	71 81       	ldd	r23, Z+1	; 0x01
    348e:	82 81       	ldd	r24, Z+2	; 0x02
    3490:	93 81       	ldd	r25, Z+3	; 0x03
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	40 e8       	ldi	r20, 0x80	; 128
    3498:	5f e3       	ldi	r21, 0x3F	; 63
    349a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    349e:	88 23       	and	r24, r24
    34a0:	2c f4       	brge	.+10     	; 0x34ac <LCD_displayCharacter+0x40e>
		__ticks = 1;
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	9e af       	std	Y+62, r25	; 0x3e
    34a8:	8d af       	std	Y+61, r24	; 0x3d
    34aa:	46 c0       	rjmp	.+140    	; 0x3538 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    34ac:	fe 01       	movw	r30, r28
    34ae:	ff 96       	adiw	r30, 0x3f	; 63
    34b0:	60 81       	ld	r22, Z
    34b2:	71 81       	ldd	r23, Z+1	; 0x01
    34b4:	82 81       	ldd	r24, Z+2	; 0x02
    34b6:	93 81       	ldd	r25, Z+3	; 0x03
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	3f ef       	ldi	r19, 0xFF	; 255
    34bc:	4f e7       	ldi	r20, 0x7F	; 127
    34be:	57 e4       	ldi	r21, 0x47	; 71
    34c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34c4:	18 16       	cp	r1, r24
    34c6:	64 f5       	brge	.+88     	; 0x3520 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c8:	fe 01       	movw	r30, r28
    34ca:	ed 5b       	subi	r30, 0xBD	; 189
    34cc:	ff 4f       	sbci	r31, 0xFF	; 255
    34ce:	60 81       	ld	r22, Z
    34d0:	71 81       	ldd	r23, Z+1	; 0x01
    34d2:	82 81       	ldd	r24, Z+2	; 0x02
    34d4:	93 81       	ldd	r25, Z+3	; 0x03
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	40 e2       	ldi	r20, 0x20	; 32
    34dc:	51 e4       	ldi	r21, 0x41	; 65
    34de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	bc 01       	movw	r22, r24
    34e8:	cd 01       	movw	r24, r26
    34ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	9e af       	std	Y+62, r25	; 0x3e
    34f4:	8d af       	std	Y+61, r24	; 0x3d
    34f6:	0f c0       	rjmp	.+30     	; 0x3516 <LCD_displayCharacter+0x478>
    34f8:	88 ec       	ldi	r24, 0xC8	; 200
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	9c af       	std	Y+60, r25	; 0x3c
    34fe:	8b af       	std	Y+59, r24	; 0x3b
    3500:	8b ad       	ldd	r24, Y+59	; 0x3b
    3502:	9c ad       	ldd	r25, Y+60	; 0x3c
    3504:	01 97       	sbiw	r24, 0x01	; 1
    3506:	f1 f7       	brne	.-4      	; 0x3504 <LCD_displayCharacter+0x466>
    3508:	9c af       	std	Y+60, r25	; 0x3c
    350a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    350c:	8d ad       	ldd	r24, Y+61	; 0x3d
    350e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	9e af       	std	Y+62, r25	; 0x3e
    3514:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3516:	8d ad       	ldd	r24, Y+61	; 0x3d
    3518:	9e ad       	ldd	r25, Y+62	; 0x3e
    351a:	00 97       	sbiw	r24, 0x00	; 0
    351c:	69 f7       	brne	.-38     	; 0x34f8 <LCD_displayCharacter+0x45a>
    351e:	16 c0       	rjmp	.+44     	; 0x354c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3520:	fe 01       	movw	r30, r28
    3522:	ff 96       	adiw	r30, 0x3f	; 63
    3524:	60 81       	ld	r22, Z
    3526:	71 81       	ldd	r23, Z+1	; 0x01
    3528:	82 81       	ldd	r24, Z+2	; 0x02
    352a:	93 81       	ldd	r25, Z+3	; 0x03
    352c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	9e af       	std	Y+62, r25	; 0x3e
    3536:	8d af       	std	Y+61, r24	; 0x3d
    3538:	8d ad       	ldd	r24, Y+61	; 0x3d
    353a:	9e ad       	ldd	r25, Y+62	; 0x3e
    353c:	9a af       	std	Y+58, r25	; 0x3a
    353e:	89 af       	std	Y+57, r24	; 0x39
    3540:	89 ad       	ldd	r24, Y+57	; 0x39
    3542:	9a ad       	ldd	r25, Y+58	; 0x3a
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	f1 f7       	brne	.-4      	; 0x3544 <LCD_displayCharacter+0x4a6>
    3548:	9a af       	std	Y+58, r25	; 0x3a
    354a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    354c:	82 e0       	ldi	r24, 0x02	; 2
    354e:	66 e0       	ldi	r22, 0x06	; 6
    3550:	40 e0       	ldi	r20, 0x00	; 0
    3552:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	a0 e8       	ldi	r26, 0x80	; 128
    355c:	bf e3       	ldi	r27, 0x3F	; 63
    355e:	8d ab       	std	Y+53, r24	; 0x35
    3560:	9e ab       	std	Y+54, r25	; 0x36
    3562:	af ab       	std	Y+55, r26	; 0x37
    3564:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3566:	6d a9       	ldd	r22, Y+53	; 0x35
    3568:	7e a9       	ldd	r23, Y+54	; 0x36
    356a:	8f a9       	ldd	r24, Y+55	; 0x37
    356c:	98 ad       	ldd	r25, Y+56	; 0x38
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	4a ef       	ldi	r20, 0xFA	; 250
    3574:	54 e4       	ldi	r21, 0x44	; 68
    3576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	89 ab       	std	Y+49, r24	; 0x31
    3580:	9a ab       	std	Y+50, r25	; 0x32
    3582:	ab ab       	std	Y+51, r26	; 0x33
    3584:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3586:	69 a9       	ldd	r22, Y+49	; 0x31
    3588:	7a a9       	ldd	r23, Y+50	; 0x32
    358a:	8b a9       	ldd	r24, Y+51	; 0x33
    358c:	9c a9       	ldd	r25, Y+52	; 0x34
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e8       	ldi	r20, 0x80	; 128
    3594:	5f e3       	ldi	r21, 0x3F	; 63
    3596:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    359a:	88 23       	and	r24, r24
    359c:	2c f4       	brge	.+10     	; 0x35a8 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	98 ab       	std	Y+48, r25	; 0x30
    35a4:	8f a7       	std	Y+47, r24	; 0x2f
    35a6:	3f c0       	rjmp	.+126    	; 0x3626 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    35a8:	69 a9       	ldd	r22, Y+49	; 0x31
    35aa:	7a a9       	ldd	r23, Y+50	; 0x32
    35ac:	8b a9       	ldd	r24, Y+51	; 0x33
    35ae:	9c a9       	ldd	r25, Y+52	; 0x34
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	3f ef       	ldi	r19, 0xFF	; 255
    35b4:	4f e7       	ldi	r20, 0x7F	; 127
    35b6:	57 e4       	ldi	r21, 0x47	; 71
    35b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35bc:	18 16       	cp	r1, r24
    35be:	4c f5       	brge	.+82     	; 0x3612 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c0:	6d a9       	ldd	r22, Y+53	; 0x35
    35c2:	7e a9       	ldd	r23, Y+54	; 0x36
    35c4:	8f a9       	ldd	r24, Y+55	; 0x37
    35c6:	98 ad       	ldd	r25, Y+56	; 0x38
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	40 e2       	ldi	r20, 0x20	; 32
    35ce:	51 e4       	ldi	r21, 0x41	; 65
    35d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	bc 01       	movw	r22, r24
    35da:	cd 01       	movw	r24, r26
    35dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	98 ab       	std	Y+48, r25	; 0x30
    35e6:	8f a7       	std	Y+47, r24	; 0x2f
    35e8:	0f c0       	rjmp	.+30     	; 0x3608 <LCD_displayCharacter+0x56a>
    35ea:	88 ec       	ldi	r24, 0xC8	; 200
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	9e a7       	std	Y+46, r25	; 0x2e
    35f0:	8d a7       	std	Y+45, r24	; 0x2d
    35f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    35f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <LCD_displayCharacter+0x558>
    35fa:	9e a7       	std	Y+46, r25	; 0x2e
    35fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3600:	98 a9       	ldd	r25, Y+48	; 0x30
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	98 ab       	std	Y+48, r25	; 0x30
    3606:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3608:	8f a5       	ldd	r24, Y+47	; 0x2f
    360a:	98 a9       	ldd	r25, Y+48	; 0x30
    360c:	00 97       	sbiw	r24, 0x00	; 0
    360e:	69 f7       	brne	.-38     	; 0x35ea <LCD_displayCharacter+0x54c>
    3610:	14 c0       	rjmp	.+40     	; 0x363a <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3612:	69 a9       	ldd	r22, Y+49	; 0x31
    3614:	7a a9       	ldd	r23, Y+50	; 0x32
    3616:	8b a9       	ldd	r24, Y+51	; 0x33
    3618:	9c a9       	ldd	r25, Y+52	; 0x34
    361a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	98 ab       	std	Y+48, r25	; 0x30
    3624:	8f a7       	std	Y+47, r24	; 0x2f
    3626:	8f a5       	ldd	r24, Y+47	; 0x2f
    3628:	98 a9       	ldd	r25, Y+48	; 0x30
    362a:	9c a7       	std	Y+44, r25	; 0x2c
    362c:	8b a7       	std	Y+43, r24	; 0x2b
    362e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3630:	9c a5       	ldd	r25, Y+44	; 0x2c
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	f1 f7       	brne	.-4      	; 0x3632 <LCD_displayCharacter+0x594>
    3636:	9c a7       	std	Y+44, r25	; 0x2c
    3638:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    363a:	82 e0       	ldi	r24, 0x02	; 2
    363c:	66 e0       	ldi	r22, 0x06	; 6
    363e:	41 e0       	ldi	r20, 0x01	; 1
    3640:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    3644:	80 e0       	ldi	r24, 0x00	; 0
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	a0 e8       	ldi	r26, 0x80	; 128
    364a:	bf e3       	ldi	r27, 0x3F	; 63
    364c:	8f a3       	std	Y+39, r24	; 0x27
    364e:	98 a7       	std	Y+40, r25	; 0x28
    3650:	a9 a7       	std	Y+41, r26	; 0x29
    3652:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3654:	6f a1       	ldd	r22, Y+39	; 0x27
    3656:	78 a5       	ldd	r23, Y+40	; 0x28
    3658:	89 a5       	ldd	r24, Y+41	; 0x29
    365a:	9a a5       	ldd	r25, Y+42	; 0x2a
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	4a ef       	ldi	r20, 0xFA	; 250
    3662:	54 e4       	ldi	r21, 0x44	; 68
    3664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	8b a3       	std	Y+35, r24	; 0x23
    366e:	9c a3       	std	Y+36, r25	; 0x24
    3670:	ad a3       	std	Y+37, r26	; 0x25
    3672:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3674:	6b a1       	ldd	r22, Y+35	; 0x23
    3676:	7c a1       	ldd	r23, Y+36	; 0x24
    3678:	8d a1       	ldd	r24, Y+37	; 0x25
    367a:	9e a1       	ldd	r25, Y+38	; 0x26
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	40 e8       	ldi	r20, 0x80	; 128
    3682:	5f e3       	ldi	r21, 0x3F	; 63
    3684:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3688:	88 23       	and	r24, r24
    368a:	2c f4       	brge	.+10     	; 0x3696 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	9a a3       	std	Y+34, r25	; 0x22
    3692:	89 a3       	std	Y+33, r24	; 0x21
    3694:	3f c0       	rjmp	.+126    	; 0x3714 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3696:	6b a1       	ldd	r22, Y+35	; 0x23
    3698:	7c a1       	ldd	r23, Y+36	; 0x24
    369a:	8d a1       	ldd	r24, Y+37	; 0x25
    369c:	9e a1       	ldd	r25, Y+38	; 0x26
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	3f ef       	ldi	r19, 0xFF	; 255
    36a2:	4f e7       	ldi	r20, 0x7F	; 127
    36a4:	57 e4       	ldi	r21, 0x47	; 71
    36a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36aa:	18 16       	cp	r1, r24
    36ac:	4c f5       	brge	.+82     	; 0x3700 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ae:	6f a1       	ldd	r22, Y+39	; 0x27
    36b0:	78 a5       	ldd	r23, Y+40	; 0x28
    36b2:	89 a5       	ldd	r24, Y+41	; 0x29
    36b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	40 e2       	ldi	r20, 0x20	; 32
    36bc:	51 e4       	ldi	r21, 0x41	; 65
    36be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	bc 01       	movw	r22, r24
    36c8:	cd 01       	movw	r24, r26
    36ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	9a a3       	std	Y+34, r25	; 0x22
    36d4:	89 a3       	std	Y+33, r24	; 0x21
    36d6:	0f c0       	rjmp	.+30     	; 0x36f6 <LCD_displayCharacter+0x658>
    36d8:	88 ec       	ldi	r24, 0xC8	; 200
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	98 a3       	std	Y+32, r25	; 0x20
    36de:	8f 8f       	std	Y+31, r24	; 0x1f
    36e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36e2:	98 a1       	ldd	r25, Y+32	; 0x20
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	f1 f7       	brne	.-4      	; 0x36e4 <LCD_displayCharacter+0x646>
    36e8:	98 a3       	std	Y+32, r25	; 0x20
    36ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ec:	89 a1       	ldd	r24, Y+33	; 0x21
    36ee:	9a a1       	ldd	r25, Y+34	; 0x22
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	9a a3       	std	Y+34, r25	; 0x22
    36f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36f6:	89 a1       	ldd	r24, Y+33	; 0x21
    36f8:	9a a1       	ldd	r25, Y+34	; 0x22
    36fa:	00 97       	sbiw	r24, 0x00	; 0
    36fc:	69 f7       	brne	.-38     	; 0x36d8 <LCD_displayCharacter+0x63a>
    36fe:	14 c0       	rjmp	.+40     	; 0x3728 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3700:	6b a1       	ldd	r22, Y+35	; 0x23
    3702:	7c a1       	ldd	r23, Y+36	; 0x24
    3704:	8d a1       	ldd	r24, Y+37	; 0x25
    3706:	9e a1       	ldd	r25, Y+38	; 0x26
    3708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	9a a3       	std	Y+34, r25	; 0x22
    3712:	89 a3       	std	Y+33, r24	; 0x21
    3714:	89 a1       	ldd	r24, Y+33	; 0x21
    3716:	9a a1       	ldd	r25, Y+34	; 0x22
    3718:	9e 8f       	std	Y+30, r25	; 0x1e
    371a:	8d 8f       	std	Y+29, r24	; 0x1d
    371c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    371e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	f1 f7       	brne	.-4      	; 0x3720 <LCD_displayCharacter+0x682>
    3724:	9e 8f       	std	Y+30, r25	; 0x1e
    3726:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3728:	fe 01       	movw	r30, r28
    372a:	ed 59       	subi	r30, 0x9D	; 157
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	80 81       	ld	r24, Z
    3730:	98 2f       	mov	r25, r24
    3732:	91 70       	andi	r25, 0x01	; 1
    3734:	82 e0       	ldi	r24, 0x02	; 2
    3736:	60 e0       	ldi	r22, 0x00	; 0
    3738:	49 2f       	mov	r20, r25
    373a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    373e:	fe 01       	movw	r30, r28
    3740:	ed 59       	subi	r30, 0x9D	; 157
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	80 81       	ld	r24, Z
    3746:	88 2f       	mov	r24, r24
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	82 70       	andi	r24, 0x02	; 2
    374c:	90 70       	andi	r25, 0x00	; 0
    374e:	95 95       	asr	r25
    3750:	87 95       	ror	r24
    3752:	98 2f       	mov	r25, r24
    3754:	82 e0       	ldi	r24, 0x02	; 2
    3756:	61 e0       	ldi	r22, 0x01	; 1
    3758:	49 2f       	mov	r20, r25
    375a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    375e:	fe 01       	movw	r30, r28
    3760:	ed 59       	subi	r30, 0x9D	; 157
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	80 81       	ld	r24, Z
    3766:	88 2f       	mov	r24, r24
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	84 70       	andi	r24, 0x04	; 4
    376c:	90 70       	andi	r25, 0x00	; 0
    376e:	95 95       	asr	r25
    3770:	87 95       	ror	r24
    3772:	95 95       	asr	r25
    3774:	87 95       	ror	r24
    3776:	98 2f       	mov	r25, r24
    3778:	82 e0       	ldi	r24, 0x02	; 2
    377a:	62 e0       	ldi	r22, 0x02	; 2
    377c:	49 2f       	mov	r20, r25
    377e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3782:	fe 01       	movw	r30, r28
    3784:	ed 59       	subi	r30, 0x9D	; 157
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	80 81       	ld	r24, Z
    378a:	88 2f       	mov	r24, r24
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	88 70       	andi	r24, 0x08	; 8
    3790:	90 70       	andi	r25, 0x00	; 0
    3792:	95 95       	asr	r25
    3794:	87 95       	ror	r24
    3796:	95 95       	asr	r25
    3798:	87 95       	ror	r24
    379a:	95 95       	asr	r25
    379c:	87 95       	ror	r24
    379e:	98 2f       	mov	r25, r24
    37a0:	82 e0       	ldi	r24, 0x02	; 2
    37a2:	63 e0       	ldi	r22, 0x03	; 3
    37a4:	49 2f       	mov	r20, r25
    37a6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	a0 e8       	ldi	r26, 0x80	; 128
    37b0:	bf e3       	ldi	r27, 0x3F	; 63
    37b2:	89 8f       	std	Y+25, r24	; 0x19
    37b4:	9a 8f       	std	Y+26, r25	; 0x1a
    37b6:	ab 8f       	std	Y+27, r26	; 0x1b
    37b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ba:	69 8d       	ldd	r22, Y+25	; 0x19
    37bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	4a ef       	ldi	r20, 0xFA	; 250
    37c8:	54 e4       	ldi	r21, 0x44	; 68
    37ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	8d 8b       	std	Y+21, r24	; 0x15
    37d4:	9e 8b       	std	Y+22, r25	; 0x16
    37d6:	af 8b       	std	Y+23, r26	; 0x17
    37d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37da:	6d 89       	ldd	r22, Y+21	; 0x15
    37dc:	7e 89       	ldd	r23, Y+22	; 0x16
    37de:	8f 89       	ldd	r24, Y+23	; 0x17
    37e0:	98 8d       	ldd	r25, Y+24	; 0x18
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	40 e8       	ldi	r20, 0x80	; 128
    37e8:	5f e3       	ldi	r21, 0x3F	; 63
    37ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ee:	88 23       	and	r24, r24
    37f0:	2c f4       	brge	.+10     	; 0x37fc <LCD_displayCharacter+0x75e>
		__ticks = 1;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	9c 8b       	std	Y+20, r25	; 0x14
    37f8:	8b 8b       	std	Y+19, r24	; 0x13
    37fa:	3f c0       	rjmp	.+126    	; 0x387a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    37fc:	6d 89       	ldd	r22, Y+21	; 0x15
    37fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3800:	8f 89       	ldd	r24, Y+23	; 0x17
    3802:	98 8d       	ldd	r25, Y+24	; 0x18
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	3f ef       	ldi	r19, 0xFF	; 255
    3808:	4f e7       	ldi	r20, 0x7F	; 127
    380a:	57 e4       	ldi	r21, 0x47	; 71
    380c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3810:	18 16       	cp	r1, r24
    3812:	4c f5       	brge	.+82     	; 0x3866 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3814:	69 8d       	ldd	r22, Y+25	; 0x19
    3816:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3818:	8b 8d       	ldd	r24, Y+27	; 0x1b
    381a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e2       	ldi	r20, 0x20	; 32
    3822:	51 e4       	ldi	r21, 0x41	; 65
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	9c 8b       	std	Y+20, r25	; 0x14
    383a:	8b 8b       	std	Y+19, r24	; 0x13
    383c:	0f c0       	rjmp	.+30     	; 0x385c <LCD_displayCharacter+0x7be>
    383e:	88 ec       	ldi	r24, 0xC8	; 200
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	9a 8b       	std	Y+18, r25	; 0x12
    3844:	89 8b       	std	Y+17, r24	; 0x11
    3846:	89 89       	ldd	r24, Y+17	; 0x11
    3848:	9a 89       	ldd	r25, Y+18	; 0x12
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	f1 f7       	brne	.-4      	; 0x384a <LCD_displayCharacter+0x7ac>
    384e:	9a 8b       	std	Y+18, r25	; 0x12
    3850:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3852:	8b 89       	ldd	r24, Y+19	; 0x13
    3854:	9c 89       	ldd	r25, Y+20	; 0x14
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	9c 8b       	std	Y+20, r25	; 0x14
    385a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    385c:	8b 89       	ldd	r24, Y+19	; 0x13
    385e:	9c 89       	ldd	r25, Y+20	; 0x14
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	69 f7       	brne	.-38     	; 0x383e <LCD_displayCharacter+0x7a0>
    3864:	14 c0       	rjmp	.+40     	; 0x388e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3866:	6d 89       	ldd	r22, Y+21	; 0x15
    3868:	7e 89       	ldd	r23, Y+22	; 0x16
    386a:	8f 89       	ldd	r24, Y+23	; 0x17
    386c:	98 8d       	ldd	r25, Y+24	; 0x18
    386e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	9c 8b       	std	Y+20, r25	; 0x14
    3878:	8b 8b       	std	Y+19, r24	; 0x13
    387a:	8b 89       	ldd	r24, Y+19	; 0x13
    387c:	9c 89       	ldd	r25, Y+20	; 0x14
    387e:	98 8b       	std	Y+16, r25	; 0x10
    3880:	8f 87       	std	Y+15, r24	; 0x0f
    3882:	8f 85       	ldd	r24, Y+15	; 0x0f
    3884:	98 89       	ldd	r25, Y+16	; 0x10
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <LCD_displayCharacter+0x7e8>
    388a:	98 8b       	std	Y+16, r25	; 0x10
    388c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    388e:	82 e0       	ldi	r24, 0x02	; 2
    3890:	66 e0       	ldi	r22, 0x06	; 6
    3892:	40 e0       	ldi	r20, 0x00	; 0
    3894:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <GPIO_writePin>
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	a0 e8       	ldi	r26, 0x80	; 128
    389e:	bf e3       	ldi	r27, 0x3F	; 63
    38a0:	8b 87       	std	Y+11, r24	; 0x0b
    38a2:	9c 87       	std	Y+12, r25	; 0x0c
    38a4:	ad 87       	std	Y+13, r26	; 0x0d
    38a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    38aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	4a ef       	ldi	r20, 0xFA	; 250
    38b6:	54 e4       	ldi	r21, 0x44	; 68
    38b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	8f 83       	std	Y+7, r24	; 0x07
    38c2:	98 87       	std	Y+8, r25	; 0x08
    38c4:	a9 87       	std	Y+9, r26	; 0x09
    38c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38c8:	6f 81       	ldd	r22, Y+7	; 0x07
    38ca:	78 85       	ldd	r23, Y+8	; 0x08
    38cc:	89 85       	ldd	r24, Y+9	; 0x09
    38ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	40 e8       	ldi	r20, 0x80	; 128
    38d6:	5f e3       	ldi	r21, 0x3F	; 63
    38d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38dc:	88 23       	and	r24, r24
    38de:	2c f4       	brge	.+10     	; 0x38ea <LCD_displayCharacter+0x84c>
		__ticks = 1;
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	9e 83       	std	Y+6, r25	; 0x06
    38e6:	8d 83       	std	Y+5, r24	; 0x05
    38e8:	3f c0       	rjmp	.+126    	; 0x3968 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    38ea:	6f 81       	ldd	r22, Y+7	; 0x07
    38ec:	78 85       	ldd	r23, Y+8	; 0x08
    38ee:	89 85       	ldd	r24, Y+9	; 0x09
    38f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f2:	20 e0       	ldi	r18, 0x00	; 0
    38f4:	3f ef       	ldi	r19, 0xFF	; 255
    38f6:	4f e7       	ldi	r20, 0x7F	; 127
    38f8:	57 e4       	ldi	r21, 0x47	; 71
    38fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38fe:	18 16       	cp	r1, r24
    3900:	4c f5       	brge	.+82     	; 0x3954 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3902:	6b 85       	ldd	r22, Y+11	; 0x0b
    3904:	7c 85       	ldd	r23, Y+12	; 0x0c
    3906:	8d 85       	ldd	r24, Y+13	; 0x0d
    3908:	9e 85       	ldd	r25, Y+14	; 0x0e
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	40 e2       	ldi	r20, 0x20	; 32
    3910:	51 e4       	ldi	r21, 0x41	; 65
    3912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	bc 01       	movw	r22, r24
    391c:	cd 01       	movw	r24, r26
    391e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	9e 83       	std	Y+6, r25	; 0x06
    3928:	8d 83       	std	Y+5, r24	; 0x05
    392a:	0f c0       	rjmp	.+30     	; 0x394a <LCD_displayCharacter+0x8ac>
    392c:	88 ec       	ldi	r24, 0xC8	; 200
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	9c 83       	std	Y+4, r25	; 0x04
    3932:	8b 83       	std	Y+3, r24	; 0x03
    3934:	8b 81       	ldd	r24, Y+3	; 0x03
    3936:	9c 81       	ldd	r25, Y+4	; 0x04
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	f1 f7       	brne	.-4      	; 0x3938 <LCD_displayCharacter+0x89a>
    393c:	9c 83       	std	Y+4, r25	; 0x04
    393e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3940:	8d 81       	ldd	r24, Y+5	; 0x05
    3942:	9e 81       	ldd	r25, Y+6	; 0x06
    3944:	01 97       	sbiw	r24, 0x01	; 1
    3946:	9e 83       	std	Y+6, r25	; 0x06
    3948:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394a:	8d 81       	ldd	r24, Y+5	; 0x05
    394c:	9e 81       	ldd	r25, Y+6	; 0x06
    394e:	00 97       	sbiw	r24, 0x00	; 0
    3950:	69 f7       	brne	.-38     	; 0x392c <LCD_displayCharacter+0x88e>
    3952:	14 c0       	rjmp	.+40     	; 0x397c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3954:	6f 81       	ldd	r22, Y+7	; 0x07
    3956:	78 85       	ldd	r23, Y+8	; 0x08
    3958:	89 85       	ldd	r24, Y+9	; 0x09
    395a:	9a 85       	ldd	r25, Y+10	; 0x0a
    395c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	9e 83       	std	Y+6, r25	; 0x06
    3966:	8d 83       	std	Y+5, r24	; 0x05
    3968:	8d 81       	ldd	r24, Y+5	; 0x05
    396a:	9e 81       	ldd	r25, Y+6	; 0x06
    396c:	9a 83       	std	Y+2, r25	; 0x02
    396e:	89 83       	std	Y+1, r24	; 0x01
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	9a 81       	ldd	r25, Y+2	; 0x02
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	f1 f7       	brne	.-4      	; 0x3974 <LCD_displayCharacter+0x8d6>
    3978:	9a 83       	std	Y+2, r25	; 0x02
    397a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    397c:	cd 59       	subi	r28, 0x9D	; 157
    397e:	df 4f       	sbci	r29, 0xFF	; 255
    3980:	0f b6       	in	r0, 0x3f	; 63
    3982:	f8 94       	cli
    3984:	de bf       	out	0x3e, r29	; 62
    3986:	0f be       	out	0x3f, r0	; 63
    3988:	cd bf       	out	0x3d, r28	; 61
    398a:	cf 91       	pop	r28
    398c:	df 91       	pop	r29
    398e:	1f 91       	pop	r17
    3990:	0f 91       	pop	r16
    3992:	08 95       	ret

00003994 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3994:	df 93       	push	r29
    3996:	cf 93       	push	r28
    3998:	00 d0       	rcall	.+0      	; 0x399a <LCD_displayString+0x6>
    399a:	0f 92       	push	r0
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	9b 83       	std	Y+3, r25	; 0x03
    39a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    39a4:	19 82       	std	Y+1, r1	; 0x01
    39a6:	0e c0       	rjmp	.+28     	; 0x39c4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	28 2f       	mov	r18, r24
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	8a 81       	ldd	r24, Y+2	; 0x02
    39b0:	9b 81       	ldd	r25, Y+3	; 0x03
    39b2:	fc 01       	movw	r30, r24
    39b4:	e2 0f       	add	r30, r18
    39b6:	f3 1f       	adc	r31, r19
    39b8:	80 81       	ld	r24, Z
    39ba:	0e 94 4f 18 	call	0x309e	; 0x309e <LCD_displayCharacter>
		i++;
    39be:	89 81       	ldd	r24, Y+1	; 0x01
    39c0:	8f 5f       	subi	r24, 0xFF	; 255
    39c2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	28 2f       	mov	r18, r24
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	8a 81       	ldd	r24, Y+2	; 0x02
    39cc:	9b 81       	ldd	r25, Y+3	; 0x03
    39ce:	fc 01       	movw	r30, r24
    39d0:	e2 0f       	add	r30, r18
    39d2:	f3 1f       	adc	r31, r19
    39d4:	80 81       	ld	r24, Z
    39d6:	88 23       	and	r24, r24
    39d8:	39 f7       	brne	.-50     	; 0x39a8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    39da:	0f 90       	pop	r0
    39dc:	0f 90       	pop	r0
    39de:	0f 90       	pop	r0
    39e0:	cf 91       	pop	r28
    39e2:	df 91       	pop	r29
    39e4:	08 95       	ret

000039e6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    39e6:	df 93       	push	r29
    39e8:	cf 93       	push	r28
    39ea:	00 d0       	rcall	.+0      	; 0x39ec <LCD_moveCursor+0x6>
    39ec:	00 d0       	rcall	.+0      	; 0x39ee <LCD_moveCursor+0x8>
    39ee:	0f 92       	push	r0
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	8a 83       	std	Y+2, r24	; 0x02
    39f6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    39f8:	8a 81       	ldd	r24, Y+2	; 0x02
    39fa:	28 2f       	mov	r18, r24
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	3d 83       	std	Y+5, r19	; 0x05
    3a00:	2c 83       	std	Y+4, r18	; 0x04
    3a02:	8c 81       	ldd	r24, Y+4	; 0x04
    3a04:	9d 81       	ldd	r25, Y+5	; 0x05
    3a06:	81 30       	cpi	r24, 0x01	; 1
    3a08:	91 05       	cpc	r25, r1
    3a0a:	c1 f0       	breq	.+48     	; 0x3a3c <LCD_moveCursor+0x56>
    3a0c:	2c 81       	ldd	r18, Y+4	; 0x04
    3a0e:	3d 81       	ldd	r19, Y+5	; 0x05
    3a10:	22 30       	cpi	r18, 0x02	; 2
    3a12:	31 05       	cpc	r19, r1
    3a14:	2c f4       	brge	.+10     	; 0x3a20 <LCD_moveCursor+0x3a>
    3a16:	8c 81       	ldd	r24, Y+4	; 0x04
    3a18:	9d 81       	ldd	r25, Y+5	; 0x05
    3a1a:	00 97       	sbiw	r24, 0x00	; 0
    3a1c:	61 f0       	breq	.+24     	; 0x3a36 <LCD_moveCursor+0x50>
    3a1e:	19 c0       	rjmp	.+50     	; 0x3a52 <LCD_moveCursor+0x6c>
    3a20:	2c 81       	ldd	r18, Y+4	; 0x04
    3a22:	3d 81       	ldd	r19, Y+5	; 0x05
    3a24:	22 30       	cpi	r18, 0x02	; 2
    3a26:	31 05       	cpc	r19, r1
    3a28:	69 f0       	breq	.+26     	; 0x3a44 <LCD_moveCursor+0x5e>
    3a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a2e:	83 30       	cpi	r24, 0x03	; 3
    3a30:	91 05       	cpc	r25, r1
    3a32:	61 f0       	breq	.+24     	; 0x3a4c <LCD_moveCursor+0x66>
    3a34:	0e c0       	rjmp	.+28     	; 0x3a52 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3a36:	8b 81       	ldd	r24, Y+3	; 0x03
    3a38:	89 83       	std	Y+1, r24	; 0x01
    3a3a:	0b c0       	rjmp	.+22     	; 0x3a52 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3e:	80 5c       	subi	r24, 0xC0	; 192
    3a40:	89 83       	std	Y+1, r24	; 0x01
    3a42:	07 c0       	rjmp	.+14     	; 0x3a52 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3a44:	8b 81       	ldd	r24, Y+3	; 0x03
    3a46:	80 5f       	subi	r24, 0xF0	; 240
    3a48:	89 83       	std	Y+1, r24	; 0x01
    3a4a:	03 c0       	rjmp	.+6      	; 0x3a52 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4e:	80 5b       	subi	r24, 0xB0	; 176
    3a50:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	80 68       	ori	r24, 0x80	; 128
    3a56:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_sendCommand>
}
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	cf 91       	pop	r28
    3a66:	df 91       	pop	r29
    3a68:	08 95       	ret

00003a6a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3a6a:	df 93       	push	r29
    3a6c:	cf 93       	push	r28
    3a6e:	00 d0       	rcall	.+0      	; 0x3a70 <LCD_displayStringRowColumn+0x6>
    3a70:	00 d0       	rcall	.+0      	; 0x3a72 <LCD_displayStringRowColumn+0x8>
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	89 83       	std	Y+1, r24	; 0x01
    3a78:	6a 83       	std	Y+2, r22	; 0x02
    3a7a:	5c 83       	std	Y+4, r21	; 0x04
    3a7c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	6a 81       	ldd	r22, Y+2	; 0x02
    3a82:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3a86:	8b 81       	ldd	r24, Y+3	; 0x03
    3a88:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8a:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>
}
    3a8e:	0f 90       	pop	r0
    3a90:	0f 90       	pop	r0
    3a92:	0f 90       	pop	r0
    3a94:	0f 90       	pop	r0
    3a96:	cf 91       	pop	r28
    3a98:	df 91       	pop	r29
    3a9a:	08 95       	ret

00003a9c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3a9c:	df 93       	push	r29
    3a9e:	cf 93       	push	r28
    3aa0:	cd b7       	in	r28, 0x3d	; 61
    3aa2:	de b7       	in	r29, 0x3e	; 62
    3aa4:	62 97       	sbiw	r28, 0x12	; 18
    3aa6:	0f b6       	in	r0, 0x3f	; 63
    3aa8:	f8 94       	cli
    3aaa:	de bf       	out	0x3e, r29	; 62
    3aac:	0f be       	out	0x3f, r0	; 63
    3aae:	cd bf       	out	0x3d, r28	; 61
    3ab0:	9a 8b       	std	Y+18, r25	; 0x12
    3ab2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3ab4:	89 89       	ldd	r24, Y+17	; 0x11
    3ab6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ab8:	9e 01       	movw	r18, r28
    3aba:	2f 5f       	subi	r18, 0xFF	; 255
    3abc:	3f 4f       	sbci	r19, 0xFF	; 255
    3abe:	b9 01       	movw	r22, r18
    3ac0:	4a e0       	ldi	r20, 0x0A	; 10
    3ac2:	50 e0       	ldi	r21, 0x00	; 0
    3ac4:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <itoa>
   LCD_displayString(buff); /* Display the string */
    3ac8:	ce 01       	movw	r24, r28
    3aca:	01 96       	adiw	r24, 0x01	; 1
    3acc:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_displayString>

}
    3ad0:	62 96       	adiw	r28, 0x12	; 18
    3ad2:	0f b6       	in	r0, 0x3f	; 63
    3ad4:	f8 94       	cli
    3ad6:	de bf       	out	0x3e, r29	; 62
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	cd bf       	out	0x3d, r28	; 61
    3adc:	cf 91       	pop	r28
    3ade:	df 91       	pop	r29
    3ae0:	08 95       	ret

00003ae2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3ae2:	df 93       	push	r29
    3ae4:	cf 93       	push	r28
    3ae6:	cd b7       	in	r28, 0x3d	; 61
    3ae8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_sendCommand>
}
    3af0:	cf 91       	pop	r28
    3af2:	df 91       	pop	r29
    3af4:	08 95       	ret

00003af6 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    3af6:	1f 92       	push	r1
    3af8:	0f 92       	push	r0
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	0f 92       	push	r0
    3afe:	11 24       	eor	r1, r1
    3b00:	2f 93       	push	r18
    3b02:	3f 93       	push	r19
    3b04:	4f 93       	push	r20
    3b06:	5f 93       	push	r21
    3b08:	6f 93       	push	r22
    3b0a:	7f 93       	push	r23
    3b0c:	8f 93       	push	r24
    3b0e:	9f 93       	push	r25
    3b10:	af 93       	push	r26
    3b12:	bf 93       	push	r27
    3b14:	ef 93       	push	r30
    3b16:	ff 93       	push	r31
    3b18:	df 93       	push	r29
    3b1a:	cf 93       	push	r28
    3b1c:	cd b7       	in	r28, 0x3d	; 61
    3b1e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3b20:	80 91 e5 01 	lds	r24, 0x01E5
    3b24:	90 91 e6 01 	lds	r25, 0x01E6
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	29 f0       	breq	.+10     	; 0x3b36 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3b2c:	e0 91 e5 01 	lds	r30, 0x01E5
    3b30:	f0 91 e6 01 	lds	r31, 0x01E6
    3b34:	09 95       	icall
	}
}
    3b36:	cf 91       	pop	r28
    3b38:	df 91       	pop	r29
    3b3a:	ff 91       	pop	r31
    3b3c:	ef 91       	pop	r30
    3b3e:	bf 91       	pop	r27
    3b40:	af 91       	pop	r26
    3b42:	9f 91       	pop	r25
    3b44:	8f 91       	pop	r24
    3b46:	7f 91       	pop	r23
    3b48:	6f 91       	pop	r22
    3b4a:	5f 91       	pop	r21
    3b4c:	4f 91       	pop	r20
    3b4e:	3f 91       	pop	r19
    3b50:	2f 91       	pop	r18
    3b52:	0f 90       	pop	r0
    3b54:	0f be       	out	0x3f, r0	; 63
    3b56:	0f 90       	pop	r0
    3b58:	1f 90       	pop	r1
    3b5a:	18 95       	reti

00003b5c <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3b5c:	1f 92       	push	r1
    3b5e:	0f 92       	push	r0
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	0f 92       	push	r0
    3b64:	11 24       	eor	r1, r1
    3b66:	2f 93       	push	r18
    3b68:	3f 93       	push	r19
    3b6a:	4f 93       	push	r20
    3b6c:	5f 93       	push	r21
    3b6e:	6f 93       	push	r22
    3b70:	7f 93       	push	r23
    3b72:	8f 93       	push	r24
    3b74:	9f 93       	push	r25
    3b76:	af 93       	push	r26
    3b78:	bf 93       	push	r27
    3b7a:	ef 93       	push	r30
    3b7c:	ff 93       	push	r31
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3b86:	80 91 e5 01 	lds	r24, 0x01E5
    3b8a:	90 91 e6 01 	lds	r25, 0x01E6
    3b8e:	00 97       	sbiw	r24, 0x00	; 0
    3b90:	29 f0       	breq	.+10     	; 0x3b9c <__vector_7+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3b92:	e0 91 e5 01 	lds	r30, 0x01E5
    3b96:	f0 91 e6 01 	lds	r31, 0x01E6
    3b9a:	09 95       	icall
	}
}
    3b9c:	cf 91       	pop	r28
    3b9e:	df 91       	pop	r29
    3ba0:	ff 91       	pop	r31
    3ba2:	ef 91       	pop	r30
    3ba4:	bf 91       	pop	r27
    3ba6:	af 91       	pop	r26
    3ba8:	9f 91       	pop	r25
    3baa:	8f 91       	pop	r24
    3bac:	7f 91       	pop	r23
    3bae:	6f 91       	pop	r22
    3bb0:	5f 91       	pop	r21
    3bb2:	4f 91       	pop	r20
    3bb4:	3f 91       	pop	r19
    3bb6:	2f 91       	pop	r18
    3bb8:	0f 90       	pop	r0
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	0f 90       	pop	r0
    3bbe:	1f 90       	pop	r1
    3bc0:	18 95       	reti

00003bc2 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    3bc2:	df 93       	push	r29
    3bc4:	cf 93       	push	r28
    3bc6:	00 d0       	rcall	.+0      	; 0x3bc8 <Timer1_init+0x6>
    3bc8:	cd b7       	in	r28, 0x3d	; 61
    3bca:	de b7       	in	r29, 0x3e	; 62
    3bcc:	9a 83       	std	Y+2, r25	; 0x02
    3bce:	89 83       	std	Y+1, r24	; 0x01
	/* Set Timer1 initial value to input value */
	TCNT1 = Config_Ptr -> initial_value;
    3bd0:	ac e4       	ldi	r26, 0x4C	; 76
    3bd2:	b0 e0       	ldi	r27, 0x00	; 0
    3bd4:	e9 81       	ldd	r30, Y+1	; 0x01
    3bd6:	fa 81       	ldd	r31, Y+2	; 0x02
    3bd8:	80 81       	ld	r24, Z
    3bda:	91 81       	ldd	r25, Z+1	; 0x01
    3bdc:	11 96       	adiw	r26, 0x01	; 1
    3bde:	9c 93       	st	X, r25
    3be0:	8e 93       	st	-X, r24

	if (Config_Ptr -> mode == CTCMode){
    3be2:	e9 81       	ldd	r30, Y+1	; 0x01
    3be4:	fa 81       	ldd	r31, Y+2	; 0x02
    3be6:	85 81       	ldd	r24, Z+5	; 0x05
    3be8:	81 30       	cpi	r24, 0x01	; 1
    3bea:	e1 f4       	brne	.+56     	; 0x3c24 <Timer1_init+0x62>

		/* Set Compare value as required */
		OCR1A  = Config_Ptr -> compare_value;
    3bec:	aa e4       	ldi	r26, 0x4A	; 74
    3bee:	b0 e0       	ldi	r27, 0x00	; 0
    3bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    3bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf4:	82 81       	ldd	r24, Z+2	; 0x02
    3bf6:	93 81       	ldd	r25, Z+3	; 0x03
    3bf8:	11 96       	adiw	r26, 0x01	; 1
    3bfa:	9c 93       	st	X, r25
    3bfc:	8e 93       	st	-X, r24

		/* Enable Timer1 Compare A Interrupt */
		TIMSK |= (1<<OCIE1A);
    3bfe:	a9 e5       	ldi	r26, 0x59	; 89
    3c00:	b0 e0       	ldi	r27, 0x00	; 0
    3c02:	e9 e5       	ldi	r30, 0x59	; 89
    3c04:	f0 e0       	ldi	r31, 0x00	; 0
    3c06:	80 81       	ld	r24, Z
    3c08:	80 61       	ori	r24, 0x10	; 16
    3c0a:	8c 93       	st	X, r24
		/* Configure timer control register TCCR1A
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=0
		 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
		 */
		TCCR1A = (1<<FOC1A);
    3c0c:	ef e4       	ldi	r30, 0x4F	; 79
    3c0e:	f0 e0       	ldi	r31, 0x00	; 0
    3c10:	88 e0       	ldi	r24, 0x08	; 8
    3c12:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
		 * 2. Prescaler : insert the required clock value in the first three bits (CS10, CS11 and CS12)
		 */
		TCCR1B = (1<<WGM12) | (Config_Ptr -> prescaler);
    3c14:	ae e4       	ldi	r26, 0x4E	; 78
    3c16:	b0 e0       	ldi	r27, 0x00	; 0
    3c18:	e9 81       	ldd	r30, Y+1	; 0x01
    3c1a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c1c:	84 81       	ldd	r24, Z+4	; 0x04
    3c1e:	88 60       	ori	r24, 0x08	; 8
    3c20:	8c 93       	st	X, r24
    3c22:	16 c0       	rjmp	.+44     	; 0x3c50 <Timer1_init+0x8e>
	}
	else if(Config_Ptr -> mode == NormalMode){
    3c24:	e9 81       	ldd	r30, Y+1	; 0x01
    3c26:	fa 81       	ldd	r31, Y+2	; 0x02
    3c28:	85 81       	ldd	r24, Z+5	; 0x05
    3c2a:	88 23       	and	r24, r24
    3c2c:	89 f4       	brne	.+34     	; 0x3c50 <Timer1_init+0x8e>
		/* Enable Timer1 Overflow Interrupt	*/
		TIMSK |= (1<<TOIE1);
    3c2e:	a9 e5       	ldi	r26, 0x59	; 89
    3c30:	b0 e0       	ldi	r27, 0x00	; 0
    3c32:	e9 e5       	ldi	r30, 0x59	; 89
    3c34:	f0 e0       	ldi	r31, 0x00	; 0
    3c36:	80 81       	ld	r24, Z
    3c38:	84 60       	ori	r24, 0x04	; 4
    3c3a:	8c 93       	st	X, r24

		/* Timer1 operates in Normal Mode */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    3c3c:	ef e4       	ldi	r30, 0x4F	; 79
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	8c e0       	ldi	r24, 0x0C	; 12
    3c42:	80 83       	st	Z, r24

		/*
		 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
		 * of TCCR1B Register
		 */
		TCCR1B = (Config_Ptr->prescaler);
    3c44:	ae e4       	ldi	r26, 0x4E	; 78
    3c46:	b0 e0       	ldi	r27, 0x00	; 0
    3c48:	e9 81       	ldd	r30, Y+1	; 0x01
    3c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c4c:	84 81       	ldd	r24, Z+4	; 0x04
    3c4e:	8c 93       	st	X, r24
	else {
		/*#error "This Mode is Not Supported"
		 * Do Nothing
		 */
	}
}
    3c50:	0f 90       	pop	r0
    3c52:	0f 90       	pop	r0
    3c54:	cf 91       	pop	r28
    3c56:	df 91       	pop	r29
    3c58:	08 95       	ret

00003c5a <Timer1_deInit>:

void Timer1_deInit(void)
{
    3c5a:	df 93       	push	r29
    3c5c:	cf 93       	push	r28
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
	/* Disconnect clock source and stop the timer
	 * Clear All Timer1 Registers */
	TCCR1A = 0;
    3c62:	ef e4       	ldi	r30, 0x4F	; 79
    3c64:	f0 e0       	ldi	r31, 0x00	; 0
    3c66:	10 82       	st	Z, r1
	TCCR1B = 0;
    3c68:	ee e4       	ldi	r30, 0x4E	; 78
    3c6a:	f0 e0       	ldi	r31, 0x00	; 0
    3c6c:	10 82       	st	Z, r1
	TCNT1 = 0;
    3c6e:	ec e4       	ldi	r30, 0x4C	; 76
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	11 82       	std	Z+1, r1	; 0x01
    3c74:	10 82       	st	Z, r1


	/* Disable Timer1 Overflow Interrupt and Timer1 Compare A Interrupt respectively */
	TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A) ;
    3c76:	a9 e5       	ldi	r26, 0x59	; 89
    3c78:	b0 e0       	ldi	r27, 0x00	; 0
    3c7a:	e9 e5       	ldi	r30, 0x59	; 89
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	80 81       	ld	r24, Z
    3c80:	8b 7e       	andi	r24, 0xEB	; 235
    3c82:	8c 93       	st	X, r24
}
    3c84:	cf 91       	pop	r28
    3c86:	df 91       	pop	r29
    3c88:	08 95       	ret

00003c8a <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    3c8a:	df 93       	push	r29
    3c8c:	cf 93       	push	r28
    3c8e:	00 d0       	rcall	.+0      	; 0x3c90 <Timer1_setCallBack+0x6>
    3c90:	cd b7       	in	r28, 0x3d	; 61
    3c92:	de b7       	in	r29, 0x3e	; 62
    3c94:	9a 83       	std	Y+2, r25	; 0x02
    3c96:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = *a_ptr;
    3c98:	89 81       	ldd	r24, Y+1	; 0x01
    3c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9c:	90 93 e6 01 	sts	0x01E6, r25
    3ca0:	80 93 e5 01 	sts	0x01E5, r24
}
    3ca4:	0f 90       	pop	r0
    3ca6:	0f 90       	pop	r0
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	08 95       	ret

00003cae <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(Uart_ConfigType * UartConfig)
{
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	00 d0       	rcall	.+0      	; 0x3cb4 <UART_init+0x6>
    3cb4:	00 d0       	rcall	.+0      	; 0x3cb6 <UART_init+0x8>
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
    3cba:	9c 83       	std	Y+4, r25	; 0x04
    3cbc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3cbe:	1a 82       	std	Y+2, r1	; 0x02
    3cc0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3cc2:	eb e2       	ldi	r30, 0x2B	; 43
    3cc4:	f0 e0       	ldi	r31, 0x00	; 0
    3cc6:	82 e0       	ldi	r24, 0x02	; 2
    3cc8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3cca:	ea e2       	ldi	r30, 0x2A	; 42
    3ccc:	f0 e0       	ldi	r31, 0x00	; 0
    3cce:	88 e1       	ldi	r24, 0x18	; 24
    3cd0:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((UartConfig -> DataBits_Sel)<<1) | ((UartConfig -> StopBit_Sel)<<3) | ((UartConfig -> Parity_Sel)<<4);
    3cd2:	a0 e4       	ldi	r26, 0x40	; 64
    3cd4:	b0 e0       	ldi	r27, 0x00	; 0
    3cd6:	eb 81       	ldd	r30, Y+3	; 0x03
    3cd8:	fc 81       	ldd	r31, Y+4	; 0x04
    3cda:	86 81       	ldd	r24, Z+6	; 0x06
    3cdc:	88 2f       	mov	r24, r24
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	88 0f       	add	r24, r24
    3ce2:	99 1f       	adc	r25, r25
    3ce4:	28 2f       	mov	r18, r24
    3ce6:	20 68       	ori	r18, 0x80	; 128
    3ce8:	eb 81       	ldd	r30, Y+3	; 0x03
    3cea:	fc 81       	ldd	r31, Y+4	; 0x04
    3cec:	85 81       	ldd	r24, Z+5	; 0x05
    3cee:	88 2f       	mov	r24, r24
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	88 0f       	add	r24, r24
    3cf4:	99 1f       	adc	r25, r25
    3cf6:	88 0f       	add	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	88 0f       	add	r24, r24
    3cfc:	99 1f       	adc	r25, r25
    3cfe:	28 2b       	or	r18, r24
    3d00:	eb 81       	ldd	r30, Y+3	; 0x03
    3d02:	fc 81       	ldd	r31, Y+4	; 0x04
    3d04:	84 81       	ldd	r24, Z+4	; 0x04
    3d06:	88 2f       	mov	r24, r24
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	82 95       	swap	r24
    3d0c:	92 95       	swap	r25
    3d0e:	90 7f       	andi	r25, 0xF0	; 240
    3d10:	98 27       	eor	r25, r24
    3d12:	80 7f       	andi	r24, 0xF0	; 240
    3d14:	98 27       	eor	r25, r24
    3d16:	82 2b       	or	r24, r18
    3d18:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (UartConfig -> Uart_BaudRate * 8UL))) - 1);
    3d1a:	eb 81       	ldd	r30, Y+3	; 0x03
    3d1c:	fc 81       	ldd	r31, Y+4	; 0x04
    3d1e:	80 81       	ld	r24, Z
    3d20:	91 81       	ldd	r25, Z+1	; 0x01
    3d22:	a2 81       	ldd	r26, Z+2	; 0x02
    3d24:	b3 81       	ldd	r27, Z+3	; 0x03
    3d26:	88 0f       	add	r24, r24
    3d28:	99 1f       	adc	r25, r25
    3d2a:	aa 1f       	adc	r26, r26
    3d2c:	bb 1f       	adc	r27, r27
    3d2e:	88 0f       	add	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	aa 1f       	adc	r26, r26
    3d34:	bb 1f       	adc	r27, r27
    3d36:	88 0f       	add	r24, r24
    3d38:	99 1f       	adc	r25, r25
    3d3a:	aa 1f       	adc	r26, r26
    3d3c:	bb 1f       	adc	r27, r27
    3d3e:	9c 01       	movw	r18, r24
    3d40:	ad 01       	movw	r20, r26
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	92 e1       	ldi	r25, 0x12	; 18
    3d46:	aa e7       	ldi	r26, 0x7A	; 122
    3d48:	b0 e0       	ldi	r27, 0x00	; 0
    3d4a:	bc 01       	movw	r22, r24
    3d4c:	cd 01       	movw	r24, r26
    3d4e:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <__udivmodsi4>
    3d52:	da 01       	movw	r26, r20
    3d54:	c9 01       	movw	r24, r18
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	9a 83       	std	Y+2, r25	; 0x02
    3d5a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3d5c:	e0 e4       	ldi	r30, 0x40	; 64
    3d5e:	f0 e0       	ldi	r31, 0x00	; 0
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	9a 81       	ldd	r25, Y+2	; 0x02
    3d64:	89 2f       	mov	r24, r25
    3d66:	99 27       	eor	r25, r25
    3d68:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3d6a:	e9 e2       	ldi	r30, 0x29	; 41
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	89 81       	ldd	r24, Y+1	; 0x01
    3d70:	80 83       	st	Z, r24
}
    3d72:	0f 90       	pop	r0
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	0f 90       	pop	r0
    3d7a:	cf 91       	pop	r28
    3d7c:	df 91       	pop	r29
    3d7e:	08 95       	ret

00003d80 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3d80:	df 93       	push	r29
    3d82:	cf 93       	push	r28
    3d84:	0f 92       	push	r0
    3d86:	cd b7       	in	r28, 0x3d	; 61
    3d88:	de b7       	in	r29, 0x3e	; 62
    3d8a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3d8c:	eb e2       	ldi	r30, 0x2B	; 43
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	80 81       	ld	r24, Z
    3d92:	88 2f       	mov	r24, r24
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	80 72       	andi	r24, 0x20	; 32
    3d98:	90 70       	andi	r25, 0x00	; 0
    3d9a:	00 97       	sbiw	r24, 0x00	; 0
    3d9c:	b9 f3       	breq	.-18     	; 0x3d8c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3d9e:	ec e2       	ldi	r30, 0x2C	; 44
    3da0:	f0 e0       	ldi	r31, 0x00	; 0
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3da6:	0f 90       	pop	r0
    3da8:	cf 91       	pop	r28
    3daa:	df 91       	pop	r29
    3dac:	08 95       	ret

00003dae <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3dae:	df 93       	push	r29
    3db0:	cf 93       	push	r28
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3db6:	eb e2       	ldi	r30, 0x2B	; 43
    3db8:	f0 e0       	ldi	r31, 0x00	; 0
    3dba:	80 81       	ld	r24, Z
    3dbc:	88 23       	and	r24, r24
    3dbe:	dc f7       	brge	.-10     	; 0x3db6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3dc0:	ec e2       	ldi	r30, 0x2C	; 44
    3dc2:	f0 e0       	ldi	r31, 0x00	; 0
    3dc4:	80 81       	ld	r24, Z
}
    3dc6:	cf 91       	pop	r28
    3dc8:	df 91       	pop	r29
    3dca:	08 95       	ret

00003dcc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3dcc:	df 93       	push	r29
    3dce:	cf 93       	push	r28
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <UART_sendString+0x6>
    3dd2:	0f 92       	push	r0
    3dd4:	cd b7       	in	r28, 0x3d	; 61
    3dd6:	de b7       	in	r29, 0x3e	; 62
    3dd8:	9b 83       	std	Y+3, r25	; 0x03
    3dda:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3ddc:	19 82       	std	Y+1, r1	; 0x01
    3dde:	0e c0       	rjmp	.+28     	; 0x3dfc <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	28 2f       	mov	r18, r24
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	8a 81       	ldd	r24, Y+2	; 0x02
    3de8:	9b 81       	ldd	r25, Y+3	; 0x03
    3dea:	fc 01       	movw	r30, r24
    3dec:	e2 0f       	add	r30, r18
    3dee:	f3 1f       	adc	r31, r19
    3df0:	80 81       	ld	r24, Z
    3df2:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <UART_sendByte>
		i++;
    3df6:	89 81       	ldd	r24, Y+1	; 0x01
    3df8:	8f 5f       	subi	r24, 0xFF	; 255
    3dfa:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3dfc:	89 81       	ldd	r24, Y+1	; 0x01
    3dfe:	28 2f       	mov	r18, r24
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	8a 81       	ldd	r24, Y+2	; 0x02
    3e04:	9b 81       	ldd	r25, Y+3	; 0x03
    3e06:	fc 01       	movw	r30, r24
    3e08:	e2 0f       	add	r30, r18
    3e0a:	f3 1f       	adc	r31, r19
    3e0c:	80 81       	ld	r24, Z
    3e0e:	88 23       	and	r24, r24
    3e10:	39 f7       	brne	.-50     	; 0x3de0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	cf 91       	pop	r28
    3e1a:	df 91       	pop	r29
    3e1c:	08 95       	ret

00003e1e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3e1e:	0f 93       	push	r16
    3e20:	1f 93       	push	r17
    3e22:	df 93       	push	r29
    3e24:	cf 93       	push	r28
    3e26:	00 d0       	rcall	.+0      	; 0x3e28 <UART_receiveString+0xa>
    3e28:	0f 92       	push	r0
    3e2a:	cd b7       	in	r28, 0x3d	; 61
    3e2c:	de b7       	in	r29, 0x3e	; 62
    3e2e:	9b 83       	std	Y+3, r25	; 0x03
    3e30:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3e32:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	28 2f       	mov	r18, r24
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e3e:	8c 01       	movw	r16, r24
    3e40:	02 0f       	add	r16, r18
    3e42:	13 1f       	adc	r17, r19
    3e44:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <UART_recieveByte>
    3e48:	f8 01       	movw	r30, r16
    3e4a:	80 83       	st	Z, r24
    3e4c:	0f c0       	rjmp	.+30     	; 0x3e6c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3e4e:	89 81       	ldd	r24, Y+1	; 0x01
    3e50:	8f 5f       	subi	r24, 0xFF	; 255
    3e52:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3e54:	89 81       	ldd	r24, Y+1	; 0x01
    3e56:	28 2f       	mov	r18, r24
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e5e:	8c 01       	movw	r16, r24
    3e60:	02 0f       	add	r16, r18
    3e62:	13 1f       	adc	r17, r19
    3e64:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <UART_recieveByte>
    3e68:	f8 01       	movw	r30, r16
    3e6a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
    3e6e:	28 2f       	mov	r18, r24
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	8a 81       	ldd	r24, Y+2	; 0x02
    3e74:	9b 81       	ldd	r25, Y+3	; 0x03
    3e76:	fc 01       	movw	r30, r24
    3e78:	e2 0f       	add	r30, r18
    3e7a:	f3 1f       	adc	r31, r19
    3e7c:	80 81       	ld	r24, Z
    3e7e:	83 32       	cpi	r24, 0x23	; 35
    3e80:	31 f7       	brne	.-52     	; 0x3e4e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	28 2f       	mov	r18, r24
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e8c:	fc 01       	movw	r30, r24
    3e8e:	e2 0f       	add	r30, r18
    3e90:	f3 1f       	adc	r31, r19
    3e92:	10 82       	st	Z, r1
}
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	cf 91       	pop	r28
    3e9c:	df 91       	pop	r29
    3e9e:	1f 91       	pop	r17
    3ea0:	0f 91       	pop	r16
    3ea2:	08 95       	ret

00003ea4 <__udivmodsi4>:
    3ea4:	a1 e2       	ldi	r26, 0x21	; 33
    3ea6:	1a 2e       	mov	r1, r26
    3ea8:	aa 1b       	sub	r26, r26
    3eaa:	bb 1b       	sub	r27, r27
    3eac:	fd 01       	movw	r30, r26
    3eae:	0d c0       	rjmp	.+26     	; 0x3eca <__udivmodsi4_ep>

00003eb0 <__udivmodsi4_loop>:
    3eb0:	aa 1f       	adc	r26, r26
    3eb2:	bb 1f       	adc	r27, r27
    3eb4:	ee 1f       	adc	r30, r30
    3eb6:	ff 1f       	adc	r31, r31
    3eb8:	a2 17       	cp	r26, r18
    3eba:	b3 07       	cpc	r27, r19
    3ebc:	e4 07       	cpc	r30, r20
    3ebe:	f5 07       	cpc	r31, r21
    3ec0:	20 f0       	brcs	.+8      	; 0x3eca <__udivmodsi4_ep>
    3ec2:	a2 1b       	sub	r26, r18
    3ec4:	b3 0b       	sbc	r27, r19
    3ec6:	e4 0b       	sbc	r30, r20
    3ec8:	f5 0b       	sbc	r31, r21

00003eca <__udivmodsi4_ep>:
    3eca:	66 1f       	adc	r22, r22
    3ecc:	77 1f       	adc	r23, r23
    3ece:	88 1f       	adc	r24, r24
    3ed0:	99 1f       	adc	r25, r25
    3ed2:	1a 94       	dec	r1
    3ed4:	69 f7       	brne	.-38     	; 0x3eb0 <__udivmodsi4_loop>
    3ed6:	60 95       	com	r22
    3ed8:	70 95       	com	r23
    3eda:	80 95       	com	r24
    3edc:	90 95       	com	r25
    3ede:	9b 01       	movw	r18, r22
    3ee0:	ac 01       	movw	r20, r24
    3ee2:	bd 01       	movw	r22, r26
    3ee4:	cf 01       	movw	r24, r30
    3ee6:	08 95       	ret

00003ee8 <__prologue_saves__>:
    3ee8:	2f 92       	push	r2
    3eea:	3f 92       	push	r3
    3eec:	4f 92       	push	r4
    3eee:	5f 92       	push	r5
    3ef0:	6f 92       	push	r6
    3ef2:	7f 92       	push	r7
    3ef4:	8f 92       	push	r8
    3ef6:	9f 92       	push	r9
    3ef8:	af 92       	push	r10
    3efa:	bf 92       	push	r11
    3efc:	cf 92       	push	r12
    3efe:	df 92       	push	r13
    3f00:	ef 92       	push	r14
    3f02:	ff 92       	push	r15
    3f04:	0f 93       	push	r16
    3f06:	1f 93       	push	r17
    3f08:	cf 93       	push	r28
    3f0a:	df 93       	push	r29
    3f0c:	cd b7       	in	r28, 0x3d	; 61
    3f0e:	de b7       	in	r29, 0x3e	; 62
    3f10:	ca 1b       	sub	r28, r26
    3f12:	db 0b       	sbc	r29, r27
    3f14:	0f b6       	in	r0, 0x3f	; 63
    3f16:	f8 94       	cli
    3f18:	de bf       	out	0x3e, r29	; 62
    3f1a:	0f be       	out	0x3f, r0	; 63
    3f1c:	cd bf       	out	0x3d, r28	; 61
    3f1e:	09 94       	ijmp

00003f20 <__epilogue_restores__>:
    3f20:	2a 88       	ldd	r2, Y+18	; 0x12
    3f22:	39 88       	ldd	r3, Y+17	; 0x11
    3f24:	48 88       	ldd	r4, Y+16	; 0x10
    3f26:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f28:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f30:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f32:	b9 84       	ldd	r11, Y+9	; 0x09
    3f34:	c8 84       	ldd	r12, Y+8	; 0x08
    3f36:	df 80       	ldd	r13, Y+7	; 0x07
    3f38:	ee 80       	ldd	r14, Y+6	; 0x06
    3f3a:	fd 80       	ldd	r15, Y+5	; 0x05
    3f3c:	0c 81       	ldd	r16, Y+4	; 0x04
    3f3e:	1b 81       	ldd	r17, Y+3	; 0x03
    3f40:	aa 81       	ldd	r26, Y+2	; 0x02
    3f42:	b9 81       	ldd	r27, Y+1	; 0x01
    3f44:	ce 0f       	add	r28, r30
    3f46:	d1 1d       	adc	r29, r1
    3f48:	0f b6       	in	r0, 0x3f	; 63
    3f4a:	f8 94       	cli
    3f4c:	de bf       	out	0x3e, r29	; 62
    3f4e:	0f be       	out	0x3f, r0	; 63
    3f50:	cd bf       	out	0x3d, r28	; 61
    3f52:	ed 01       	movw	r28, r26
    3f54:	08 95       	ret

00003f56 <itoa>:
    3f56:	fb 01       	movw	r30, r22
    3f58:	9f 01       	movw	r18, r30
    3f5a:	e8 94       	clt
    3f5c:	42 30       	cpi	r20, 0x02	; 2
    3f5e:	c4 f0       	brlt	.+48     	; 0x3f90 <itoa+0x3a>
    3f60:	45 32       	cpi	r20, 0x25	; 37
    3f62:	b4 f4       	brge	.+44     	; 0x3f90 <itoa+0x3a>
    3f64:	4a 30       	cpi	r20, 0x0A	; 10
    3f66:	29 f4       	brne	.+10     	; 0x3f72 <itoa+0x1c>
    3f68:	97 fb       	bst	r25, 7
    3f6a:	1e f4       	brtc	.+6      	; 0x3f72 <itoa+0x1c>
    3f6c:	90 95       	com	r25
    3f6e:	81 95       	neg	r24
    3f70:	9f 4f       	sbci	r25, 0xFF	; 255
    3f72:	64 2f       	mov	r22, r20
    3f74:	77 27       	eor	r23, r23
    3f76:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__udivmodhi4>
    3f7a:	80 5d       	subi	r24, 0xD0	; 208
    3f7c:	8a 33       	cpi	r24, 0x3A	; 58
    3f7e:	0c f0       	brlt	.+2      	; 0x3f82 <itoa+0x2c>
    3f80:	89 5d       	subi	r24, 0xD9	; 217
    3f82:	81 93       	st	Z+, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	00 97       	sbiw	r24, 0x00	; 0
    3f88:	a1 f7       	brne	.-24     	; 0x3f72 <itoa+0x1c>
    3f8a:	16 f4       	brtc	.+4      	; 0x3f90 <itoa+0x3a>
    3f8c:	5d e2       	ldi	r21, 0x2D	; 45
    3f8e:	51 93       	st	Z+, r21
    3f90:	10 82       	st	Z, r1
    3f92:	c9 01       	movw	r24, r18
    3f94:	0c 94 cc 1f 	jmp	0x3f98	; 0x3f98 <strrev>

00003f98 <strrev>:
    3f98:	dc 01       	movw	r26, r24
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	67 2f       	mov	r22, r23
    3f9e:	71 91       	ld	r23, Z+
    3fa0:	77 23       	and	r23, r23
    3fa2:	e1 f7       	brne	.-8      	; 0x3f9c <strrev+0x4>
    3fa4:	32 97       	sbiw	r30, 0x02	; 2
    3fa6:	04 c0       	rjmp	.+8      	; 0x3fb0 <strrev+0x18>
    3fa8:	7c 91       	ld	r23, X
    3faa:	6d 93       	st	X+, r22
    3fac:	70 83       	st	Z, r23
    3fae:	62 91       	ld	r22, -Z
    3fb0:	ae 17       	cp	r26, r30
    3fb2:	bf 07       	cpc	r27, r31
    3fb4:	c8 f3       	brcs	.-14     	; 0x3fa8 <strrev+0x10>
    3fb6:	08 95       	ret

00003fb8 <__udivmodhi4>:
    3fb8:	aa 1b       	sub	r26, r26
    3fba:	bb 1b       	sub	r27, r27
    3fbc:	51 e1       	ldi	r21, 0x11	; 17
    3fbe:	07 c0       	rjmp	.+14     	; 0x3fce <__udivmodhi4_ep>

00003fc0 <__udivmodhi4_loop>:
    3fc0:	aa 1f       	adc	r26, r26
    3fc2:	bb 1f       	adc	r27, r27
    3fc4:	a6 17       	cp	r26, r22
    3fc6:	b7 07       	cpc	r27, r23
    3fc8:	10 f0       	brcs	.+4      	; 0x3fce <__udivmodhi4_ep>
    3fca:	a6 1b       	sub	r26, r22
    3fcc:	b7 0b       	sbc	r27, r23

00003fce <__udivmodhi4_ep>:
    3fce:	88 1f       	adc	r24, r24
    3fd0:	99 1f       	adc	r25, r25
    3fd2:	5a 95       	dec	r21
    3fd4:	a9 f7       	brne	.-22     	; 0x3fc0 <__udivmodhi4_loop>
    3fd6:	80 95       	com	r24
    3fd8:	90 95       	com	r25
    3fda:	bc 01       	movw	r22, r24
    3fdc:	cd 01       	movw	r24, r26
    3fde:	08 95       	ret

00003fe0 <_exit>:
    3fe0:	f8 94       	cli

00003fe2 <__stop_program>:
    3fe2:	ff cf       	rjmp	.-2      	; 0x3fe2 <__stop_program>
